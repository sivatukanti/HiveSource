// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.hadoop.yarn.webapp.hamlet;

import org.apache.hadoop.yarn.webapp.SubView;
import java.util.EnumSet;
import java.io.PrintWriter;
import org.apache.hadoop.classification.InterfaceAudience;

@InterfaceAudience.LimitedPrivate({ "YARN", "MapReduce" })
public class Hamlet extends HamletImpl implements _Html
{
    public Hamlet(final PrintWriter out, final int nestLevel, final boolean wasInline) {
        super(out, nestLevel, wasInline);
    }
    
    static EnumSet<EOpt> opt(final boolean endTag, final boolean inline, final boolean pre) {
        final EnumSet<EOpt> opts = EnumSet.of(EOpt.ENDTAG);
        if (!endTag) {
            opts.remove(EOpt.ENDTAG);
        }
        if (inline) {
            opts.add(EOpt.INLINE);
        }
        if (pre) {
            opts.add(EOpt.PRE);
        }
        return opts;
    }
    
    private <T extends _> HEAD<T> head_(final T e, final boolean inline) {
        return new HEAD<T>("head", e, opt(true, inline, false));
    }
    
    private <T extends _> BODY<T> body_(final T e, final boolean inline) {
        return new BODY<T>("body", e, opt(true, inline, false));
    }
    
    private <T extends _> BASE<T> base_(final T e, final boolean inline) {
        return new BASE<T>("base", e, opt(false, inline, false));
    }
    
    private <T extends _> TITLE<T> title_(final T e, final boolean inline) {
        return new TITLE<T>("title", e, opt(true, inline, false));
    }
    
    private <T extends _> TH<T> th_(final T e, final boolean inline) {
        return new TH<T>("th", e, opt(true, inline, false));
    }
    
    private <T extends _> TD<T> td_(final T e, final boolean inline) {
        return new TD<T>("td", e, opt(true, inline, false));
    }
    
    private <T extends _> CAPTION<T> caption_(final T e, final boolean inline) {
        return new CAPTION<T>("caption", e, opt(true, inline, false));
    }
    
    private <T extends _> COLGROUP<T> colgroup_(final T e, final boolean inline) {
        return new COLGROUP<T>("colgroup", e, opt(false, inline, false));
    }
    
    private <T extends _> THEAD<T> thead_(final T e, final boolean inline) {
        return new THEAD<T>("thead", e, opt(true, inline, false));
    }
    
    private <T extends _> TFOOT<T> tfoot_(final T e, final boolean inline) {
        return new TFOOT<T>("tfoot", e, opt(true, inline, false));
    }
    
    private <T extends _> TBODY<T> tbody_(final T e, final boolean inline) {
        return new TBODY<T>("tbody", e, opt(true, inline, false));
    }
    
    private <T extends _> COL<T> col_(final T e, final boolean inline) {
        return new COL<T>("col", e, opt(false, inline, false));
    }
    
    private <T extends _> TR<T> tr_(final T e, final boolean inline) {
        return new TR<T>("tr", e, opt(true, inline, false));
    }
    
    private <T extends _> LEGEND<T> legend_(final T e, final boolean inline) {
        return new LEGEND<T>("legend", e, opt(true, inline, false));
    }
    
    private <T extends _> OPTGROUP<T> optgroup_(final T e, final boolean inline) {
        return new OPTGROUP<T>("optgroup", e, opt(true, inline, false));
    }
    
    private <T extends _> OPTION<T> option_(final T e, final boolean inline) {
        return new OPTION<T>("option", e, opt(false, inline, false));
    }
    
    private <T extends _> LI<T> li_(final T e, final boolean inline) {
        return new LI<T>("li", e, opt(false, inline, false));
    }
    
    private <T extends _> DT<T> dt_(final T e, final boolean inline) {
        return new DT<T>("dt", e, opt(false, inline, false));
    }
    
    private <T extends _> DD<T> dd_(final T e, final boolean inline) {
        return new DD<T>("dd", e, opt(false, inline, false));
    }
    
    private <T extends _> PARAM<T> param_(final T e, final boolean inline) {
        return new PARAM<T>("param", e, opt(false, inline, false));
    }
    
    private <T extends _> AREA<T> area_(final T e, final boolean inline) {
        return new AREA<T>("area", e, opt(false, inline, false));
    }
    
    private <T extends _> TABLE<T> table_(final T e, final boolean inline) {
        return new TABLE<T>("table", e, opt(true, inline, false));
    }
    
    private <T extends _> ADDRESS<T> address_(final T e, final boolean inline) {
        return new ADDRESS<T>("address", e, opt(true, inline, false));
    }
    
    private <T extends _> P<T> p_(final T e, final boolean inline) {
        return new P<T>("p", e, opt(false, inline, false));
    }
    
    private <T extends _> HR<T> hr_(final T e, final boolean inline) {
        return new HR<T>("hr", e, opt(false, inline, false));
    }
    
    private <T extends _> DL<T> dl_(final T e, final boolean inline) {
        return new DL<T>("dl", e, opt(true, inline, false));
    }
    
    private <T extends _> DIV<T> div_(final T e, final boolean inline) {
        return new DIV<T>("div", e, opt(true, inline, false));
    }
    
    private <T extends _> BLOCKQUOTE<T> blockquote_(final T e, final boolean inline) {
        return new BLOCKQUOTE<T>("blockquote", e, opt(true, inline, false));
    }
    
    private <T extends _> BLOCKQUOTE<T> bq_(final T e, final boolean inline) {
        return new BLOCKQUOTE<T>("blockquote", e, opt(true, inline, false));
    }
    
    private <T extends _> FIELDSET<T> fieldset_(final T e, final boolean inline) {
        return new FIELDSET<T>("fieldset", e, opt(true, inline, false));
    }
    
    private <T extends _> FORM<T> form_(final T e, final boolean inline) {
        return new FORM<T>("form", e, opt(true, inline, false));
    }
    
    private <T extends _> INPUT<T> input_(final T e, final boolean inline) {
        return new INPUT<T>("input", e, opt(false, inline, false));
    }
    
    private <T extends _> SELECT<T> select_(final T e, final boolean inline) {
        return new SELECT<T>("select", e, opt(true, inline, false));
    }
    
    private <T extends _> TEXTAREA<T> textarea_(final T e, final boolean inline) {
        return new TEXTAREA<T>("textarea", e, opt(true, inline, false));
    }
    
    private <T extends _> BUTTON<T> button_(final T e, final boolean inline) {
        return new BUTTON<T>("button", e, opt(true, inline, false));
    }
    
    private <T extends _> LABEL<T> label_(final T e, final boolean inline) {
        return new LABEL<T>("label", e, opt(true, inline, false));
    }
    
    private <T extends _> MAP<T> map_(final T e, final boolean inline) {
        return new MAP<T>("map", e, opt(true, inline, false));
    }
    
    private <T extends _> Q<T> q_(final T e, final boolean inline) {
        return new Q<T>("q", e, opt(true, inline, false));
    }
    
    private <T extends _> BR<T> br_(final T e, final boolean inline) {
        return new BR<T>("br", e, opt(false, inline, false));
    }
    
    private <T extends _> BDO<T> bdo_(final T e, final boolean inline) {
        return new BDO<T>("bdo", e, opt(true, inline, false));
    }
    
    private <T extends _> SPAN<T> span_(final T e, final boolean inline) {
        return new SPAN<T>("span", e, opt(true, inline, false));
    }
    
    private <T extends _> INS<T> ins_(final T e, final boolean inline) {
        return new INS<T>("ins", e, opt(true, inline, false));
    }
    
    private <T extends _> DEL<T> del_(final T e, final boolean inline) {
        return new DEL<T>("del", e, opt(true, inline, false));
    }
    
    private <T extends _> A<T> a_(final T e, final boolean inline) {
        return new A<T>("a", e, opt(true, inline, false));
    }
    
    private <T extends _> SUB<T> sub_(final T e, final boolean inline) {
        return new SUB<T>("sub", e, opt(true, inline, false));
    }
    
    private <T extends _> SUP<T> sup_(final T e, final boolean inline) {
        return new SUP<T>("sup", e, opt(true, inline, false));
    }
    
    private <T extends _> IMG<T> img_(final T e, final boolean inline) {
        return new IMG<T>("img", e, opt(false, inline, false));
    }
    
    private <T extends _> EM<T> em_(final T e, final boolean inline) {
        return new EM<T>("em", e, opt(true, inline, false));
    }
    
    private <T extends _> STRONG<T> strong_(final T e, final boolean inline) {
        return new STRONG<T>("strong", e, opt(true, inline, false));
    }
    
    private <T extends _> DFN<T> dfn_(final T e, final boolean inline) {
        return new DFN<T>("dfn", e, opt(true, inline, false));
    }
    
    private <T extends _> CODE<T> code_(final T e, final boolean inline) {
        return new CODE<T>("code", e, opt(true, inline, false));
    }
    
    private <T extends _> SAMP<T> samp_(final T e, final boolean inline) {
        return new SAMP<T>("samp", e, opt(true, inline, false));
    }
    
    private <T extends _> KBD<T> kbd_(final T e, final boolean inline) {
        return new KBD<T>("kbd", e, opt(true, inline, false));
    }
    
    private <T extends _> VAR<T> var_(final T e, final boolean inline) {
        return new VAR<T>("var", e, opt(true, inline, false));
    }
    
    private <T extends _> CITE<T> cite_(final T e, final boolean inline) {
        return new CITE<T>("cite", e, opt(true, inline, false));
    }
    
    private <T extends _> ABBR<T> abbr_(final T e, final boolean inline) {
        return new ABBR<T>("abbr", e, opt(true, inline, false));
    }
    
    private <T extends _> B<T> b_(final T e, final boolean inline) {
        return new B<T>("b", e, opt(true, inline, false));
    }
    
    private <T extends _> I<T> i_(final T e, final boolean inline) {
        return new I<T>("i", e, opt(true, inline, false));
    }
    
    private <T extends _> SMALL<T> small_(final T e, final boolean inline) {
        return new SMALL<T>("small", e, opt(true, inline, false));
    }
    
    private <T extends _> PRE<T> pre_(final T e, final boolean inline) {
        return new PRE<T>("pre", e, opt(true, inline, true));
    }
    
    private <T extends _> UL<T> ul_(final T e, final boolean inline) {
        return new UL<T>("ul", e, opt(true, inline, false));
    }
    
    private <T extends _> OL<T> ol_(final T e, final boolean inline) {
        return new OL<T>("ol", e, opt(true, inline, false));
    }
    
    private <T extends _> H1<T> h1_(final T e, final boolean inline) {
        return new H1<T>("h1", e, opt(true, inline, false));
    }
    
    private <T extends _> H2<T> h2_(final T e, final boolean inline) {
        return new H2<T>("h2", e, opt(true, inline, false));
    }
    
    private <T extends _> H3<T> h3_(final T e, final boolean inline) {
        return new H3<T>("h3", e, opt(true, inline, false));
    }
    
    private <T extends _> H4<T> h4_(final T e, final boolean inline) {
        return new H4<T>("h4", e, opt(true, inline, false));
    }
    
    private <T extends _> H5<T> h5_(final T e, final boolean inline) {
        return new H5<T>("h5", e, opt(true, inline, false));
    }
    
    private <T extends _> H6<T> h6_(final T e, final boolean inline) {
        return new H6<T>("h6", e, opt(true, inline, false));
    }
    
    private <T extends _> STYLE<T> style_(final T e, final boolean inline) {
        return new STYLE<T>("style", e, opt(true, inline, false));
    }
    
    private <T extends _> LINK<T> link_(final T e, final boolean inline) {
        return new LINK<T>("link", e, opt(false, inline, false));
    }
    
    private <T extends _> META<T> meta_(final T e, final boolean inline) {
        return new META<T>("meta", e, opt(false, inline, false));
    }
    
    private <T extends _> OBJECT<T> object_(final T e, final boolean inline) {
        return new OBJECT<T>("object", e, opt(true, inline, false));
    }
    
    private <T extends _> SCRIPT<T> script_(final T e, final boolean inline) {
        return new SCRIPT<T>("script", e, opt(true, inline, false));
    }
    
    @Override
    public HEAD<Hamlet> head() {
        return this.head_(this, false);
    }
    
    @Override
    public BODY<Hamlet> body() {
        return this.body_(this, false);
    }
    
    @Override
    public BODY<Hamlet> body(final String selector) {
        return HamletImpl.setSelector(this.body(), selector);
    }
    
    @Override
    public BASE<Hamlet> base() {
        return this.base_(this, false);
    }
    
    @Override
    public Hamlet base(final String href) {
        return this.base().$href(href)._();
    }
    
    @Override
    public TITLE<Hamlet> title() {
        return this.title_(this, false);
    }
    
    @Override
    public Hamlet title(final String cdata) {
        return this.title()._(cdata)._();
    }
    
    @Override
    public STYLE<Hamlet> style() {
        return this.style_(this, false);
    }
    
    @Override
    public Hamlet style(final Object... lines) {
        return this.style().$type("text/css")._(lines)._();
    }
    
    @Override
    public LINK<Hamlet> link() {
        return this.link_(this, false);
    }
    
    @Override
    public Hamlet link(final String href) {
        return HamletImpl.setLinkHref(this.link(), href)._();
    }
    
    @Override
    public META<Hamlet> meta() {
        return this.meta_(this, false);
    }
    
    @Override
    public Hamlet meta(final String name, final String content) {
        return this.meta().$name(name).$content(content)._();
    }
    
    @Override
    public Hamlet meta_http(final String header, final String content) {
        return this.meta().$http_equiv(header).$content(content)._();
    }
    
    @Override
    public SCRIPT<Hamlet> script() {
        return this.script_(this, false);
    }
    
    @Override
    public Hamlet script(final String src) {
        return HamletImpl.setScriptSrc(this.script(), src)._();
    }
    
    @Override
    public OBJECT<Hamlet> object() {
        return this.object_(this, true);
    }
    
    @Override
    public OBJECT<Hamlet> object(final String selector) {
        return HamletImpl.setSelector(this.object(), selector);
    }
    
    @Override
    public TABLE<Hamlet> table() {
        return this.table_(this, false);
    }
    
    @Override
    public TABLE<Hamlet> table(final String selector) {
        return HamletImpl.setSelector(this.table(), selector);
    }
    
    @Override
    public Hamlet address(final String cdata) {
        return this.address()._(cdata)._();
    }
    
    @Override
    public ADDRESS<Hamlet> address() {
        return this.address_(this, false);
    }
    
    @Override
    public P<Hamlet> p(final String selector) {
        return HamletImpl.setSelector(this.p(), selector);
    }
    
    @Override
    public P<Hamlet> p() {
        return this.p_(this, false);
    }
    
    @Override
    public Hamlet _(final Class<? extends SubView> cls) {
        this.subView(cls);
        return this;
    }
    
    @Override
    public HR<Hamlet> hr() {
        return this.hr_(this, false);
    }
    
    @Override
    public Hamlet hr(final String selector) {
        return HamletImpl.setSelector(this.hr(), selector)._();
    }
    
    @Override
    public DL<Hamlet> dl(final String selector) {
        return HamletImpl.setSelector(this.dl(), selector);
    }
    
    @Override
    public DL<Hamlet> dl() {
        return this.dl_(this, false);
    }
    
    @Override
    public DIV<Hamlet> div(final String selector) {
        return HamletImpl.setSelector(this.div(), selector);
    }
    
    @Override
    public DIV<Hamlet> div() {
        return this.div_(this, false);
    }
    
    @Override
    public BLOCKQUOTE<Hamlet> blockquote() {
        return this.blockquote_(this, false);
    }
    
    @Override
    public BLOCKQUOTE<Hamlet> bq() {
        return this.blockquote_(this, false);
    }
    
    @Override
    public Hamlet h1(final String cdata) {
        return this.h1()._(cdata)._();
    }
    
    @Override
    public H1<Hamlet> h1() {
        return this.h1_(this, false);
    }
    
    @Override
    public Hamlet h1(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
    }
    
    @Override
    public Hamlet h2(final String cdata) {
        return this.h2()._(cdata)._();
    }
    
    @Override
    public H2<Hamlet> h2() {
        return this.h2_(this, false);
    }
    
    @Override
    public Hamlet h2(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
    }
    
    @Override
    public H3<Hamlet> h3() {
        return this.h3_(this, false);
    }
    
    @Override
    public Hamlet h3(final String cdata) {
        return this.h3()._(cdata)._();
    }
    
    @Override
    public Hamlet h3(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
    }
    
    @Override
    public H4<Hamlet> h4() {
        return this.h4_(this, false);
    }
    
    @Override
    public Hamlet h4(final String cdata) {
        return this.h4()._(cdata)._();
    }
    
    @Override
    public Hamlet h4(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
    }
    
    @Override
    public H5<Hamlet> h5() {
        return this.h5_(this, false);
    }
    
    @Override
    public Hamlet h5(final String cdata) {
        return this.h5()._(cdata)._();
    }
    
    @Override
    public Hamlet h5(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
    }
    
    @Override
    public H6<Hamlet> h6() {
        return this.h6_(this, false);
    }
    
    @Override
    public Hamlet h6(final String cdata) {
        return this.h6()._(cdata)._();
    }
    
    @Override
    public Hamlet h6(final String selector, final String cdata) {
        return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
    }
    
    @Override
    public UL<Hamlet> ul() {
        return this.ul_(this, false);
    }
    
    @Override
    public UL<Hamlet> ul(final String selector) {
        return HamletImpl.setSelector(this.ul(), selector);
    }
    
    @Override
    public OL<Hamlet> ol() {
        return this.ol_(this, false);
    }
    
    @Override
    public OL<Hamlet> ol(final String selector) {
        return HamletImpl.setSelector(this.ol(), selector);
    }
    
    @Override
    public PRE<Hamlet> pre() {
        return this.pre_(this, false);
    }
    
    @Override
    public PRE<Hamlet> pre(final String selector) {
        return HamletImpl.setSelector(this.pre(), selector);
    }
    
    @Override
    public FORM<Hamlet> form() {
        return this.form_(this, false);
    }
    
    @Override
    public FORM<Hamlet> form(final String selector) {
        return HamletImpl.setSelector(this.form(), selector);
    }
    
    @Override
    public FIELDSET<Hamlet> fieldset() {
        return this.fieldset_(this, false);
    }
    
    @Override
    public FIELDSET<Hamlet> fieldset(final String selector) {
        return HamletImpl.setSelector(this.fieldset(), selector);
    }
    
    @Override
    public INS<Hamlet> ins() {
        return this.ins_(this, false);
    }
    
    @Override
    public Hamlet ins(final String cdata) {
        return this.ins()._(cdata)._();
    }
    
    @Override
    public DEL<Hamlet> del() {
        return this.del_(this, false);
    }
    
    @Override
    public Hamlet del(final String cdata) {
        return this.del()._(cdata)._();
    }
    
    public class HTML<T extends _> extends EImp<T> implements HamletSpec.HTML
    {
        public HTML(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public HTML<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public HTML<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public Hamlet.HEAD<HTML<T>> head() {
            this.closeAttrs();
            return (Hamlet.HEAD<HTML<T>>)Hamlet.this.head_(this, false);
        }
        
        @Override
        public Hamlet.BODY<HTML<T>> body() {
            this.closeAttrs();
            return (Hamlet.BODY<HTML<T>>)Hamlet.this.body_(this, false);
        }
        
        @Override
        public Hamlet.BODY<HTML<T>> body(final String selector) {
            return HamletImpl.setSelector(this.body(), selector);
        }
        
        @Override
        public Hamlet.BASE<HTML<T>> base() {
            this.closeAttrs();
            return (Hamlet.BASE<HTML<T>>)Hamlet.this.base_(this, false);
        }
        
        @Override
        public HTML<T> base(final String href) {
            return this.base().$href(href)._();
        }
        
        @Override
        public Hamlet.TITLE<HTML<T>> title() {
            this.closeAttrs();
            return (Hamlet.TITLE<HTML<T>>)Hamlet.this.title_(this, false);
        }
        
        @Override
        public HTML<T> title(final String cdata) {
            return this.title()._(cdata)._();
        }
        
        @Override
        public Hamlet.STYLE<HTML<T>> style() {
            this.closeAttrs();
            return (Hamlet.STYLE<HTML<T>>)Hamlet.this.style_(this, false);
        }
        
        @Override
        public HTML<T> style(final Object... lines) {
            return this.style().$type("text/css")._(lines)._();
        }
        
        @Override
        public Hamlet.LINK<HTML<T>> link() {
            this.closeAttrs();
            return (Hamlet.LINK<HTML<T>>)Hamlet.this.link_(this, false);
        }
        
        @Override
        public HTML<T> link(final String href) {
            return HamletImpl.setLinkHref(this.link(), href)._();
        }
        
        @Override
        public Hamlet.META<HTML<T>> meta() {
            this.closeAttrs();
            return (Hamlet.META<HTML<T>>)Hamlet.this.meta_(this, false);
        }
        
        @Override
        public HTML<T> meta(final String name, final String content) {
            return this.meta().$name(name).$content(content)._();
        }
        
        @Override
        public HTML<T> meta_http(final String header, final String content) {
            return this.meta().$http_equiv(header).$content(content)._();
        }
        
        @Override
        public Hamlet.SCRIPT<HTML<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<HTML<T>>)Hamlet.this.script_(this, false);
        }
        
        @Override
        public HTML<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.OBJECT<HTML<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<HTML<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<HTML<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.TABLE<HTML<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<HTML<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<HTML<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public HTML<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<HTML<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<HTML<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<HTML<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<HTML<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<HTML<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public HTML<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<HTML<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<HTML<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public HTML<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<HTML<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<HTML<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<HTML<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<HTML<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<HTML<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<HTML<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<HTML<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<HTML<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<HTML<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<HTML<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public HTML<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<HTML<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<HTML<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public HTML<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public HTML<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<HTML<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<HTML<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public HTML<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<HTML<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<HTML<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public HTML<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public HTML<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<HTML<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<HTML<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public HTML<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public HTML<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<HTML<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<HTML<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public HTML<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public HTML<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<HTML<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<HTML<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public HTML<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public HTML<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<HTML<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<HTML<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<HTML<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<HTML<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<HTML<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<HTML<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<HTML<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<HTML<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<HTML<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<HTML<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<HTML<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<HTML<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<HTML<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<HTML<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<HTML<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public Hamlet.INS<HTML<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<HTML<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public HTML<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<HTML<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<HTML<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public HTML<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
    }
    
    public class SCRIPT<T extends _> extends EImp<T> implements HamletSpec.SCRIPT
    {
        public SCRIPT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SCRIPT<T> $type(final String value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public SCRIPT<T> $src(final String value) {
            this.addAttr("src", value);
            return this;
        }
        
        @Override
        public SCRIPT<T> $charset(final String value) {
            this.addAttr("charset", value);
            return this;
        }
        
        @Override
        public SCRIPT<T> $defer(final String value) {
            this.addAttr("defer", value);
            return this;
        }
        
        @Override
        public SCRIPT<T> _(final Object... lines) {
            this._p(false, lines);
            return this;
        }
    }
    
    public class STYLE<T extends _> extends EImp<T> implements HamletSpec.STYLE
    {
        public STYLE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public STYLE<T> $type(final String value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public STYLE<T> $media(final EnumSet<Media> value) {
            this.addMediaAttr("media", value);
            return this;
        }
        
        @Override
        public STYLE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public STYLE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public STYLE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public STYLE<T> _(final Object... lines) {
            this._p(false, lines);
            return this;
        }
    }
    
    public class META<T extends _> extends EImp<T> implements HamletSpec.META
    {
        public META(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public META<T> $http_equiv(final String value) {
            this.addAttr("http-equiv", value);
            return this;
        }
        
        @Override
        public META<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public META<T> $content(final String value) {
            this.addAttr("content", value);
            return this;
        }
        
        @Override
        public META<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public META<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
    }
    
    public class BASE<T extends _> extends EImp<T> implements HamletSpec.BASE
    {
        public BASE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BASE<T> $href(final String value) {
            this.addAttr("href", value);
            return this;
        }
    }
    
    public class TITLE<T extends _> extends EImp<T> implements HamletSpec.TITLE
    {
        public TITLE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TITLE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TITLE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TITLE<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public TITLE<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
    }
    
    public class HEAD<T extends _> extends EImp<T> implements HamletSpec.HEAD
    {
        public HEAD(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public HEAD<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public HEAD<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public Hamlet.BASE<HEAD<T>> base() {
            this.closeAttrs();
            return (Hamlet.BASE<HEAD<T>>)Hamlet.this.base_(this, false);
        }
        
        @Override
        public HEAD<T> base(final String href) {
            return this.base().$href(href)._();
        }
        
        @Override
        public Hamlet.TITLE<HEAD<T>> title() {
            this.closeAttrs();
            return (Hamlet.TITLE<HEAD<T>>)Hamlet.this.title_(this, false);
        }
        
        @Override
        public HEAD<T> title(final String cdata) {
            return this.title()._(cdata)._();
        }
        
        @Override
        public Hamlet.STYLE<HEAD<T>> style() {
            this.closeAttrs();
            return (Hamlet.STYLE<HEAD<T>>)Hamlet.this.style_(this, false);
        }
        
        @Override
        public HEAD<T> style(final Object... lines) {
            return this.style().$type("text/css")._(lines)._();
        }
        
        @Override
        public Hamlet.LINK<HEAD<T>> link() {
            this.closeAttrs();
            return (Hamlet.LINK<HEAD<T>>)Hamlet.this.link_(this, false);
        }
        
        @Override
        public HEAD<T> link(final String href) {
            return HamletImpl.setLinkHref(this.link(), href)._();
        }
        
        @Override
        public Hamlet.META<HEAD<T>> meta() {
            this.closeAttrs();
            return (Hamlet.META<HEAD<T>>)Hamlet.this.meta_(this, false);
        }
        
        @Override
        public HEAD<T> meta(final String name, final String content) {
            return this.meta().$name(name).$content(content)._();
        }
        
        @Override
        public HEAD<T> meta_http(final String header, final String content) {
            return this.meta().$http_equiv(header).$content(content)._();
        }
        
        @Override
        public Hamlet.SCRIPT<HEAD<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<HEAD<T>>)Hamlet.this.script_(this, false);
        }
        
        @Override
        public HEAD<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.OBJECT<HEAD<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<HEAD<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<HEAD<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
    }
    
    public class TD<T extends _> extends EImp<T> implements HamletSpec.TD
    {
        public TD(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TD<T> $headers(final String value) {
            this.addAttr("headers", value);
            return this;
        }
        
        @Override
        public TD<T> $scope(final Scope value) {
            this.addAttr("scope", value);
            return this;
        }
        
        @Override
        public TD<T> $rowspan(final int value) {
            this.addAttr("rowspan", value);
            return this;
        }
        
        @Override
        public TD<T> $colspan(final int value) {
            this.addAttr("colspan", value);
            return this;
        }
        
        @Override
        public TD<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TD<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TD<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TD<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TD<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TD<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TD<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TD<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TD<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TD<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TD<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TD<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TD<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TD<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TD<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TD<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<TD<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<TD<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<TD<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public TD<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<TD<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<TD<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<TD<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<TD<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<TD<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public TD<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<TD<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<TD<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public TD<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<TD<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<TD<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<TD<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<TD<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<TD<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<TD<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<TD<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<TD<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<TD<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<TD<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public TD<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<TD<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<TD<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public TD<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public TD<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<TD<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<TD<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public TD<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<TD<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<TD<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public TD<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public TD<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<TD<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<TD<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public TD<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public TD<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<TD<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<TD<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public TD<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public TD<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<TD<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<TD<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public TD<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public TD<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<TD<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<TD<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<TD<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<TD<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<TD<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<TD<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<TD<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<TD<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<TD<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<TD<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<TD<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<TD<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<TD<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<TD<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<TD<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public TD<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public TD<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<TD<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<TD<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public TD<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public TD<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<TD<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<TD<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public TD<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public TD<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<TD<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<TD<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public TD<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public TD<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public TD<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<TD<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<TD<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public TD<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<TD<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<TD<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public TD<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public TD<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<TD<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<TD<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public TD<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public TD<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<TD<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<TD<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public TD<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public TD<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public TD<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<TD<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<TD<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public TD<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<TD<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<TD<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public TD<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public TD<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<TD<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<TD<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public TD<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public TD<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<TD<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<TD<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public TD<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public TD<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<TD<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<TD<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public TD<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public TD<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<TD<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<TD<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<TD<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public TD<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public TD<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<TD<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<TD<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public TD<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<TD<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<TD<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<TD<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<TD<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<TD<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public TD<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public TD<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<TD<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<TD<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public TD<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public TD<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<TD<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<TD<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<TD<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public TD<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public TD<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<TD<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<TD<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<TD<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<TD<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public TD<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<TD<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<TD<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public TD<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<TD<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<TD<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public TD<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public TD<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<TD<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<TD<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public TD<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<TD<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<TD<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public TD<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<TD<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<TD<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public TD<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<TD<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<TD<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public TD<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<TD<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<TD<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<TD<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<TD<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<TD<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<TD<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<TD<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<TD<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<TD<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public TD<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<TD<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<TD<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<TD<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public TD<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class TH<T extends _> extends EImp<T> implements HamletSpec.TH
    {
        public TH(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TH<T> $headers(final String value) {
            this.addAttr("headers", value);
            return this;
        }
        
        @Override
        public TH<T> $scope(final Scope value) {
            this.addAttr("scope", value);
            return this;
        }
        
        @Override
        public TH<T> $rowspan(final int value) {
            this.addAttr("rowspan", value);
            return this;
        }
        
        @Override
        public TH<T> $colspan(final int value) {
            this.addAttr("colspan", value);
            return this;
        }
        
        @Override
        public TH<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TH<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TH<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TH<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TH<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TH<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TH<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TH<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TH<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TH<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TH<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TH<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TH<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TH<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TH<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TH<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<TH<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<TH<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<TH<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public TH<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<TH<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<TH<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<TH<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<TH<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<TH<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public TH<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<TH<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<TH<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public TH<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<TH<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<TH<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<TH<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<TH<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<TH<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<TH<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<TH<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<TH<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<TH<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<TH<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public TH<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<TH<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<TH<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public TH<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public TH<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<TH<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<TH<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public TH<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<TH<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<TH<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public TH<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public TH<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<TH<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<TH<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public TH<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public TH<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<TH<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<TH<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public TH<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public TH<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<TH<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<TH<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public TH<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public TH<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<TH<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<TH<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<TH<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<TH<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<TH<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<TH<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<TH<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<TH<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<TH<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<TH<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<TH<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<TH<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<TH<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<TH<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<TH<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public TH<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public TH<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<TH<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<TH<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public TH<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public TH<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<TH<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<TH<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public TH<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public TH<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<TH<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<TH<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public TH<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public TH<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public TH<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<TH<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<TH<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public TH<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<TH<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<TH<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public TH<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public TH<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<TH<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<TH<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public TH<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public TH<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<TH<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<TH<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public TH<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public TH<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public TH<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<TH<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<TH<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public TH<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<TH<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<TH<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public TH<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public TH<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<TH<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<TH<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public TH<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public TH<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<TH<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<TH<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public TH<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public TH<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<TH<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<TH<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public TH<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public TH<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<TH<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<TH<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<TH<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public TH<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public TH<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<TH<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<TH<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public TH<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<TH<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<TH<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<TH<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<TH<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<TH<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public TH<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public TH<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<TH<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<TH<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public TH<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public TH<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<TH<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<TH<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<TH<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public TH<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public TH<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<TH<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<TH<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<TH<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<TH<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public TH<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<TH<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<TH<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public TH<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<TH<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<TH<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public TH<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public TH<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<TH<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<TH<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public TH<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<TH<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<TH<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public TH<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<TH<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<TH<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public TH<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<TH<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<TH<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public TH<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<TH<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<TH<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<TH<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<TH<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<TH<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<TH<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<TH<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<TH<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<TH<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public TH<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<TH<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<TH<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<TH<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public TH<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class TR<T extends _> extends EImp<T> implements HamletSpec.TR
    {
        public TR(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TR<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TR<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TR<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TR<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TR<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TR<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TR<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TR<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TR<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TR<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TR<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TR<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TR<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TR<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TR<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TR<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TH<TR<T>> th() {
            this.closeAttrs();
            return (Hamlet.TH<TR<T>>)Hamlet.this.th_(this, false);
        }
        
        @Override
        public TR<T> th(final String cdata) {
            return this.th()._(cdata)._();
        }
        
        @Override
        public TR<T> th(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.th(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.TD<TR<T>> td() {
            this.closeAttrs();
            return (Hamlet.TD<TR<T>>)Hamlet.this.td_(this, false);
        }
        
        @Override
        public TR<T> td(final String cdata) {
            return this.td()._(cdata)._();
        }
        
        @Override
        public TR<T> td(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.td(), selector)._(cdata)._();
        }
    }
    
    public class COL<T extends _> extends EImp<T> implements HamletSpec.COL
    {
        public COL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public COL<T> $span(final int value) {
            this.addAttr("span", value);
            return this;
        }
        
        @Override
        public COL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public COL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public COL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public COL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public COL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public COL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public COL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public COL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public COL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public COL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public COL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public COL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public COL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public COL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public COL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public COL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class COLGROUP<T extends _> extends EImp<T> implements HamletSpec.COLGROUP
    {
        public COLGROUP(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public COLGROUP<T> $span(final int value) {
            this.addAttr("span", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public COLGROUP<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.COL<COLGROUP<T>> col() {
            this.closeAttrs();
            return (Hamlet.COL<COLGROUP<T>>)Hamlet.this.col_(this, false);
        }
        
        @Override
        public COLGROUP<T> col(final String selector) {
            return HamletImpl.setSelector(this.col(), selector)._();
        }
    }
    
    public class TBODY<T extends _> extends EImp<T> implements HamletSpec.TBODY
    {
        public TBODY(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TBODY<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TBODY<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TBODY<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TBODY<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TBODY<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TBODY<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TBODY<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TBODY<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TR<TBODY<T>> tr() {
            this.closeAttrs();
            return (Hamlet.TR<TBODY<T>>)Hamlet.this.tr_(this, false);
        }
        
        @Override
        public Hamlet.TR<TBODY<T>> tr(final String selector) {
            return HamletImpl.setSelector(this.tr(), selector);
        }
    }
    
    public class TFOOT<T extends _> extends EImp<T> implements HamletSpec.TFOOT
    {
        public TFOOT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TFOOT<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TFOOT<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TR<TFOOT<T>> tr() {
            this.closeAttrs();
            return (Hamlet.TR<TFOOT<T>>)Hamlet.this.tr_(this, false);
        }
        
        @Override
        public Hamlet.TR<TFOOT<T>> tr(final String selector) {
            return HamletImpl.setSelector(this.tr(), selector);
        }
    }
    
    public class THEAD<T extends _> extends EImp<T> implements HamletSpec.THEAD
    {
        public THEAD(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public THEAD<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public THEAD<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public THEAD<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public THEAD<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public THEAD<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public THEAD<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public THEAD<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public THEAD<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TR<THEAD<T>> tr() {
            this.closeAttrs();
            return (Hamlet.TR<THEAD<T>>)Hamlet.this.tr_(this, false);
        }
        
        @Override
        public Hamlet.TR<THEAD<T>> tr(final String selector) {
            return HamletImpl.setSelector(this.tr(), selector);
        }
    }
    
    public class CAPTION<T extends _> extends EImp<T> implements HamletSpec.CAPTION
    {
        public CAPTION(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public CAPTION<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public CAPTION<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public CAPTION<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public CAPTION<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<CAPTION<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<CAPTION<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public CAPTION<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<CAPTION<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<CAPTION<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public CAPTION<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<CAPTION<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<CAPTION<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public CAPTION<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public CAPTION<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<CAPTION<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<CAPTION<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public CAPTION<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<CAPTION<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<CAPTION<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public CAPTION<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<CAPTION<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<CAPTION<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public CAPTION<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<CAPTION<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<CAPTION<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public CAPTION<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public CAPTION<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<CAPTION<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<CAPTION<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public CAPTION<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<CAPTION<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<CAPTION<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public CAPTION<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<CAPTION<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<CAPTION<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public CAPTION<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<CAPTION<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<CAPTION<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public CAPTION<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<CAPTION<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<CAPTION<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public CAPTION<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<CAPTION<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<CAPTION<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<CAPTION<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public CAPTION<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public CAPTION<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<CAPTION<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<CAPTION<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public CAPTION<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<CAPTION<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<CAPTION<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<CAPTION<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<CAPTION<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<CAPTION<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public CAPTION<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<CAPTION<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<CAPTION<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public CAPTION<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<CAPTION<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<CAPTION<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<CAPTION<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public CAPTION<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<CAPTION<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<CAPTION<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<CAPTION<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<CAPTION<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public CAPTION<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<CAPTION<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<CAPTION<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public CAPTION<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<CAPTION<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<CAPTION<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public CAPTION<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public CAPTION<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<CAPTION<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<CAPTION<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public CAPTION<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<CAPTION<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<CAPTION<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public CAPTION<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<CAPTION<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<CAPTION<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public CAPTION<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<CAPTION<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<CAPTION<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public CAPTION<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<CAPTION<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<CAPTION<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<CAPTION<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CAPTION<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<CAPTION<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CAPTION<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CAPTION<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CAPTION<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<CAPTION<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public CAPTION<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<CAPTION<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<CAPTION<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<CAPTION<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public CAPTION<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class TABLE<T extends _> extends EImp<T> implements HamletSpec.TABLE
    {
        public TABLE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TABLE<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TABLE<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TABLE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TABLE<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TABLE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TABLE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TABLE<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TABLE<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public TABLE<T> caption(final String cdata) {
            return this.caption()._(cdata)._();
        }
        
        @Override
        public Hamlet.CAPTION<TABLE<T>> caption() {
            this.closeAttrs();
            return (Hamlet.CAPTION<TABLE<T>>)Hamlet.this.caption_(this, false);
        }
        
        @Override
        public Hamlet.COLGROUP<TABLE<T>> colgroup() {
            this.closeAttrs();
            return (Hamlet.COLGROUP<TABLE<T>>)Hamlet.this.colgroup_(this, false);
        }
        
        @Override
        public Hamlet.THEAD<TABLE<T>> thead(final String selector) {
            return HamletImpl.setSelector(this.thead(), selector);
        }
        
        @Override
        public Hamlet.THEAD<TABLE<T>> thead() {
            this.closeAttrs();
            return (Hamlet.THEAD<TABLE<T>>)Hamlet.this.thead_(this, false);
        }
        
        @Override
        public Hamlet.TFOOT<TABLE<T>> tfoot() {
            this.closeAttrs();
            return (Hamlet.TFOOT<TABLE<T>>)Hamlet.this.tfoot_(this, false);
        }
        
        @Override
        public Hamlet.TFOOT<TABLE<T>> tfoot(final String selector) {
            return HamletImpl.setSelector(this.tfoot(), selector);
        }
        
        @Override
        public Hamlet.TBODY<TABLE<T>> tbody() {
            this.closeAttrs();
            return (Hamlet.TBODY<TABLE<T>>)Hamlet.this.tbody_(this, false);
        }
        
        @Override
        public Hamlet.TBODY<TABLE<T>> tbody(final String selector) {
            return HamletImpl.setSelector(this.tbody(), selector);
        }
        
        @Override
        public Hamlet.TR<TABLE<T>> tr() {
            this.closeAttrs();
            return (Hamlet.TR<TABLE<T>>)Hamlet.this.tr_(this, false);
        }
        
        @Override
        public Hamlet.TR<TABLE<T>> tr(final String selector) {
            return HamletImpl.setSelector(this.tr(), selector);
        }
        
        @Override
        public Hamlet.COL<TABLE<T>> col() {
            this.closeAttrs();
            return (Hamlet.COL<TABLE<T>>)Hamlet.this.col_(this, false);
        }
        
        @Override
        public TABLE<T> col(final String selector) {
            return HamletImpl.setSelector(this.col(), selector)._();
        }
    }
    
    public class BUTTON<T extends _> extends EImp<T> implements HamletSpec.BUTTON
    {
        public BUTTON(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BUTTON<T> $type(final ButtonType value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $value(final String value) {
            this.addAttr("value", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public BUTTON<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<BUTTON<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<BUTTON<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<BUTTON<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public BUTTON<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<BUTTON<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<BUTTON<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<BUTTON<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<BUTTON<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<BUTTON<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public BUTTON<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<BUTTON<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<BUTTON<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public BUTTON<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<BUTTON<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<BUTTON<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<BUTTON<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<BUTTON<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<BUTTON<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<BUTTON<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<BUTTON<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<BUTTON<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<BUTTON<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<BUTTON<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public BUTTON<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<BUTTON<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<BUTTON<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public BUTTON<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public BUTTON<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<BUTTON<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<BUTTON<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public BUTTON<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<BUTTON<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<BUTTON<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public BUTTON<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<BUTTON<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<BUTTON<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public BUTTON<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<BUTTON<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<BUTTON<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public BUTTON<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<BUTTON<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<BUTTON<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public BUTTON<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<BUTTON<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<BUTTON<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<BUTTON<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<BUTTON<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<BUTTON<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<BUTTON<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<BUTTON<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<BUTTON<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<BUTTON<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public BUTTON<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public BUTTON<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<BUTTON<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<BUTTON<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public BUTTON<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<BUTTON<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<BUTTON<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public BUTTON<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<BUTTON<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<BUTTON<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public BUTTON<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public BUTTON<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<BUTTON<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<BUTTON<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public BUTTON<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<BUTTON<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<BUTTON<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public BUTTON<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<BUTTON<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<BUTTON<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public BUTTON<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<BUTTON<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<BUTTON<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public BUTTON<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public BUTTON<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<BUTTON<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<BUTTON<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public BUTTON<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<BUTTON<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<BUTTON<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public BUTTON<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<BUTTON<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<BUTTON<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public BUTTON<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<BUTTON<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<BUTTON<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public BUTTON<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<BUTTON<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<BUTTON<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public BUTTON<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<BUTTON<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<BUTTON<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<BUTTON<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public BUTTON<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<BUTTON<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<BUTTON<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<BUTTON<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<BUTTON<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public BUTTON<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<BUTTON<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<BUTTON<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public BUTTON<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<BUTTON<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<BUTTON<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public BUTTON<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<BUTTON<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<BUTTON<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public BUTTON<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<BUTTON<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<BUTTON<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public BUTTON<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<BUTTON<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<BUTTON<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public BUTTON<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.IMG<BUTTON<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<BUTTON<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public BUTTON<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<BUTTON<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<BUTTON<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<BUTTON<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<BUTTON<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<BUTTON<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public BUTTON<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<BUTTON<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<BUTTON<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public BUTTON<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public BUTTON<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public BUTTON<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public BUTTON<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class LEGEND<T extends _> extends EImp<T> implements HamletSpec.LEGEND
    {
        public LEGEND(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public LEGEND<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public LEGEND<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public LEGEND<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public LEGEND<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<LEGEND<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<LEGEND<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public LEGEND<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<LEGEND<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<LEGEND<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public LEGEND<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<LEGEND<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<LEGEND<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public LEGEND<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public LEGEND<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<LEGEND<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<LEGEND<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public LEGEND<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<LEGEND<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<LEGEND<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public LEGEND<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<LEGEND<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<LEGEND<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public LEGEND<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<LEGEND<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<LEGEND<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public LEGEND<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public LEGEND<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<LEGEND<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<LEGEND<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public LEGEND<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<LEGEND<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<LEGEND<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public LEGEND<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<LEGEND<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<LEGEND<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public LEGEND<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<LEGEND<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<LEGEND<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public LEGEND<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<LEGEND<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<LEGEND<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public LEGEND<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<LEGEND<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<LEGEND<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<LEGEND<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public LEGEND<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public LEGEND<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<LEGEND<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<LEGEND<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public LEGEND<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<LEGEND<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<LEGEND<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<LEGEND<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<LEGEND<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<LEGEND<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public LEGEND<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<LEGEND<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<LEGEND<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public LEGEND<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<LEGEND<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<LEGEND<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<LEGEND<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public LEGEND<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<LEGEND<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<LEGEND<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<LEGEND<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<LEGEND<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public LEGEND<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<LEGEND<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<LEGEND<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public LEGEND<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<LEGEND<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<LEGEND<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public LEGEND<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public LEGEND<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<LEGEND<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<LEGEND<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public LEGEND<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<LEGEND<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<LEGEND<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public LEGEND<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<LEGEND<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<LEGEND<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public LEGEND<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<LEGEND<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<LEGEND<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public LEGEND<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<LEGEND<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<LEGEND<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<LEGEND<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LEGEND<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<LEGEND<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LEGEND<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LEGEND<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LEGEND<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<LEGEND<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public LEGEND<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<LEGEND<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<LEGEND<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<LEGEND<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public LEGEND<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class FIELDSET<T extends _> extends EImp<T> implements HamletSpec.FIELDSET
    {
        public FIELDSET(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public FIELDSET<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public FIELDSET<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.LEGEND<FIELDSET<T>> legend() {
            this.closeAttrs();
            return (Hamlet.LEGEND<FIELDSET<T>>)Hamlet.this.legend_(this, false);
        }
        
        @Override
        public FIELDSET<T> legend(final String cdata) {
            return this.legend()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public FIELDSET<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<FIELDSET<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<FIELDSET<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<FIELDSET<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public FIELDSET<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<FIELDSET<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<FIELDSET<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<FIELDSET<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<FIELDSET<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<FIELDSET<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public FIELDSET<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<FIELDSET<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<FIELDSET<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public FIELDSET<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<FIELDSET<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<FIELDSET<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<FIELDSET<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<FIELDSET<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<FIELDSET<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<FIELDSET<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<FIELDSET<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<FIELDSET<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<FIELDSET<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<FIELDSET<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public FIELDSET<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<FIELDSET<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<FIELDSET<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public FIELDSET<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<FIELDSET<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<FIELDSET<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public FIELDSET<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<FIELDSET<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<FIELDSET<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public FIELDSET<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<FIELDSET<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<FIELDSET<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public FIELDSET<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<FIELDSET<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<FIELDSET<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public FIELDSET<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<FIELDSET<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<FIELDSET<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public FIELDSET<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<FIELDSET<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<FIELDSET<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<FIELDSET<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<FIELDSET<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<FIELDSET<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<FIELDSET<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<FIELDSET<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<FIELDSET<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<FIELDSET<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<FIELDSET<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<FIELDSET<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<FIELDSET<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public FIELDSET<FIELDSET<T>> fieldset() {
            this.closeAttrs();
            return (FIELDSET<FIELDSET<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public FIELDSET<FIELDSET<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public Hamlet.B<FIELDSET<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<FIELDSET<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public FIELDSET<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<FIELDSET<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<FIELDSET<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public FIELDSET<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<FIELDSET<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<FIELDSET<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public FIELDSET<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<FIELDSET<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<FIELDSET<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public FIELDSET<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<FIELDSET<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<FIELDSET<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public FIELDSET<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<FIELDSET<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<FIELDSET<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public FIELDSET<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<FIELDSET<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<FIELDSET<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public FIELDSET<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<FIELDSET<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<FIELDSET<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public FIELDSET<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<FIELDSET<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<FIELDSET<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public FIELDSET<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<FIELDSET<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<FIELDSET<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public FIELDSET<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<FIELDSET<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<FIELDSET<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public FIELDSET<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<FIELDSET<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<FIELDSET<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public FIELDSET<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<FIELDSET<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<FIELDSET<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<FIELDSET<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public FIELDSET<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public FIELDSET<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<FIELDSET<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<FIELDSET<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public FIELDSET<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<FIELDSET<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<FIELDSET<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<FIELDSET<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<FIELDSET<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<FIELDSET<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public FIELDSET<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<FIELDSET<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<FIELDSET<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public FIELDSET<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<FIELDSET<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<FIELDSET<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<FIELDSET<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public FIELDSET<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<FIELDSET<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<FIELDSET<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<FIELDSET<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<FIELDSET<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public FIELDSET<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<FIELDSET<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<FIELDSET<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public FIELDSET<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<FIELDSET<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<FIELDSET<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public FIELDSET<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public FIELDSET<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<FIELDSET<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<FIELDSET<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public FIELDSET<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<FIELDSET<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<FIELDSET<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public FIELDSET<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<FIELDSET<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<FIELDSET<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public FIELDSET<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<FIELDSET<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<FIELDSET<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public FIELDSET<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<FIELDSET<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<FIELDSET<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<FIELDSET<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<FIELDSET<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<FIELDSET<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<FIELDSET<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<FIELDSET<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<FIELDSET<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<FIELDSET<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public FIELDSET<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<FIELDSET<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<FIELDSET<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<FIELDSET<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public FIELDSET<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class TEXTAREA<T extends _> extends EImp<T> implements HamletSpec.TEXTAREA
    {
        public TEXTAREA(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public TEXTAREA<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $rows(final int value) {
            this.addAttr("rows", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $cols(final int value) {
            this.addAttr("cols", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $readonly() {
            this.addAttr("readonly", null);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onselect(final String value) {
            this.addAttr("onselect", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onchange(final String value) {
            this.addAttr("onchange", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public TEXTAREA<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public TEXTAREA<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
    }
    
    public class OPTION<T extends _> extends EImp<T> implements HamletSpec.OPTION
    {
        public OPTION(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public OPTION<T> $value(final String value) {
            this.addAttr("value", value);
            return this;
        }
        
        @Override
        public OPTION<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public OPTION<T> $selected() {
            this.addAttr("selected", null);
            return this;
        }
        
        @Override
        public OPTION<T> $label(final String value) {
            this.addAttr("label", value);
            return this;
        }
        
        @Override
        public OPTION<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public OPTION<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public OPTION<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public OPTION<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public OPTION<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public OPTION<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public OPTION<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public OPTION<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public OPTION<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public OPTION<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
    }
    
    public class OPTGROUP<T extends _> extends EImp<T> implements HamletSpec.OPTGROUP
    {
        public OPTGROUP(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public OPTGROUP<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $label(final String value) {
            this.addAttr("label", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public OPTGROUP<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.OPTION<OPTGROUP<T>> option() {
            this.closeAttrs();
            return (Hamlet.OPTION<OPTGROUP<T>>)Hamlet.this.option_(this, false);
        }
        
        @Override
        public OPTGROUP<T> option(final String cdata) {
            return this.option()._(cdata)._();
        }
    }
    
    public class SELECT<T extends _> extends EImp<T> implements HamletSpec.SELECT
    {
        public SELECT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SELECT<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public SELECT<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public SELECT<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onchange(final String value) {
            this.addAttr("onchange", value);
            return this;
        }
        
        @Override
        public Hamlet.OPTGROUP<SELECT<T>> optgroup() {
            this.closeAttrs();
            return (Hamlet.OPTGROUP<SELECT<T>>)Hamlet.this.optgroup_(this, false);
        }
        
        @Override
        public SELECT<T> $size(final int value) {
            this.addAttr("size", value);
            return this;
        }
        
        @Override
        public SELECT<T> $multiple() {
            this.addAttr("multiple", null);
            return this;
        }
        
        @Override
        public SELECT<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SELECT<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SELECT<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SELECT<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SELECT<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SELECT<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SELECT<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SELECT<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.OPTION<SELECT<T>> option() {
            this.closeAttrs();
            return (Hamlet.OPTION<SELECT<T>>)Hamlet.this.option_(this, false);
        }
        
        @Override
        public SELECT<T> option(final String cdata) {
            return this.option()._(cdata)._();
        }
    }
    
    public class INPUT<T extends _> extends EImp<T> implements HamletSpec.INPUT
    {
        public INPUT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public INPUT<T> $type(final InputType value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public INPUT<T> $src(final String value) {
            this.addAttr("src", value);
            return this;
        }
        
        @Override
        public INPUT<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public INPUT<T> $value(final String value) {
            this.addAttr("value", value);
            return this;
        }
        
        @Override
        public INPUT<T> $disabled() {
            this.addAttr("disabled", null);
            return this;
        }
        
        @Override
        public INPUT<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public INPUT<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public INPUT<T> $readonly() {
            this.addAttr("readonly", null);
            return this;
        }
        
        @Override
        public INPUT<T> $onselect(final String value) {
            this.addAttr("onselect", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onchange(final String value) {
            this.addAttr("onchange", value);
            return this;
        }
        
        @Override
        public INPUT<T> $size(final String value) {
            this.addAttr("size", value);
            return this;
        }
        
        @Override
        public INPUT<T> $checked() {
            this.addAttr("checked", null);
            return this;
        }
        
        @Override
        public INPUT<T> $maxlength(final int value) {
            this.addAttr("maxlength", value);
            return this;
        }
        
        @Override
        public INPUT<T> $alt(final String value) {
            this.addAttr("alt", value);
            return this;
        }
        
        @Override
        public INPUT<T> $ismap() {
            this.addAttr("ismap", null);
            return this;
        }
        
        @Override
        public INPUT<T> $accept(final String value) {
            this.addAttr("accept", value);
            return this;
        }
        
        @Override
        public INPUT<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public INPUT<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public INPUT<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public INPUT<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public INPUT<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public INPUT<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public INPUT<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public INPUT<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class LABEL<T extends _> extends EImp<T> implements HamletSpec.LABEL
    {
        public LABEL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public LABEL<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public LABEL<T> $for(final String value) {
            this.addAttr("for", value);
            return this;
        }
        
        @Override
        public LABEL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public LABEL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public LABEL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public LABEL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public LABEL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public LABEL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public LABEL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public LABEL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public LABEL<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public LABEL<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<LABEL<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<LABEL<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public LABEL<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public LABEL<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<LABEL<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<LABEL<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public LABEL<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public LABEL<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<LABEL<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<LABEL<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public LABEL<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public LABEL<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public LABEL<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<LABEL<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<LABEL<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public LABEL<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<LABEL<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<LABEL<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public LABEL<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public LABEL<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<LABEL<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<LABEL<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public LABEL<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public LABEL<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<LABEL<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<LABEL<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public LABEL<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public LABEL<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public LABEL<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<LABEL<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<LABEL<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public LABEL<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<LABEL<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<LABEL<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public LABEL<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public LABEL<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<LABEL<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<LABEL<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public LABEL<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public LABEL<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<LABEL<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<LABEL<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public LABEL<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public LABEL<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<LABEL<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<LABEL<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public LABEL<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public LABEL<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<LABEL<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<LABEL<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<LABEL<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public LABEL<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public LABEL<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<LABEL<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<LABEL<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public LABEL<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<LABEL<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<LABEL<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<LABEL<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<LABEL<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<LABEL<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public LABEL<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public LABEL<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<LABEL<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<LABEL<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public LABEL<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public LABEL<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<LABEL<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<LABEL<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<LABEL<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public LABEL<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public LABEL<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<LABEL<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<LABEL<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<LABEL<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<LABEL<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public LABEL<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<LABEL<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<LABEL<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public LABEL<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<LABEL<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<LABEL<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public LABEL<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public LABEL<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<LABEL<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<LABEL<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public LABEL<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<LABEL<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<LABEL<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public LABEL<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<LABEL<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<LABEL<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public LABEL<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<LABEL<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<LABEL<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<LABEL<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LABEL<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<LABEL<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LABEL<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LABEL<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LABEL<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<LABEL<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public LABEL<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<LABEL<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<LABEL<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<LABEL<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public LABEL<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class FORM<T extends _> extends EImp<T> implements HamletSpec.FORM
    {
        public FORM(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public FORM<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public FORM<T> $accept(final String value) {
            this.addAttr("accept", value);
            return this;
        }
        
        @Override
        public FORM<T> $action(final String value) {
            this.addAttr("action", value);
            return this;
        }
        
        @Override
        public FORM<T> $method(final Method value) {
            this.addAttr("method", value);
            return this;
        }
        
        @Override
        public FORM<T> $enctype(final String value) {
            this.addAttr("enctype", value);
            return this;
        }
        
        @Override
        public FORM<T> $onsubmit(final String value) {
            this.addAttr("onsubmit", value);
            return this;
        }
        
        @Override
        public FORM<T> $onreset(final String value) {
            this.addAttr("onreset", value);
            return this;
        }
        
        @Override
        public FORM<T> $accept_charset(final String value) {
            this.addAttr("accept-charset", value);
            return this;
        }
        
        @Override
        public FORM<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public FORM<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public FORM<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public FORM<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public FORM<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public FORM<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public FORM<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public FORM<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public FORM<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public FORM<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public FORM<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public FORM<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public FORM<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public FORM<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public FORM<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public FORM<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.SCRIPT<FORM<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<FORM<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public FORM<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.TABLE<FORM<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<FORM<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<FORM<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public FORM<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<FORM<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<FORM<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<FORM<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<FORM<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<FORM<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public FORM<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<FORM<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<FORM<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public FORM<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<FORM<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<FORM<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<FORM<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<FORM<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<FORM<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<FORM<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<FORM<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<FORM<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<FORM<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<FORM<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public FORM<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<FORM<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<FORM<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public FORM<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public FORM<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<FORM<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<FORM<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public FORM<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<FORM<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<FORM<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public FORM<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public FORM<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<FORM<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<FORM<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public FORM<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public FORM<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<FORM<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<FORM<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public FORM<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public FORM<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<FORM<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<FORM<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public FORM<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public FORM<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<FORM<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<FORM<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<FORM<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<FORM<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<FORM<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<FORM<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<FORM<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<FORM<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<FORM<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<FORM<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<FORM<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<FORM<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
    }
    
    public class LI<T extends _> extends EImp<T> implements HamletSpec.LI
    {
        public LI(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public LI<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public LI<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public LI<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public LI<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public LI<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public LI<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public LI<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public LI<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public LI<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public LI<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public LI<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public LI<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public LI<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public LI<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public LI<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public LI<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<LI<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<LI<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<LI<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public LI<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<LI<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<LI<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<LI<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<LI<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<LI<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public LI<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<LI<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<LI<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public LI<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<LI<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<LI<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<LI<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<LI<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<LI<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<LI<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<LI<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<LI<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<LI<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<LI<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public LI<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<LI<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<LI<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public LI<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public LI<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<LI<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<LI<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public LI<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<LI<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<LI<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public LI<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public LI<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<LI<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<LI<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public LI<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public LI<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<LI<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<LI<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public LI<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public LI<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<LI<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<LI<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public LI<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public LI<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<LI<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<LI<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<LI<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<LI<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<LI<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<LI<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<LI<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<LI<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<LI<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<LI<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<LI<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<LI<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<LI<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<LI<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<LI<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public LI<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public LI<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<LI<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<LI<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public LI<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public LI<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<LI<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<LI<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public LI<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public LI<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<LI<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<LI<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public LI<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public LI<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public LI<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<LI<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<LI<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public LI<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<LI<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<LI<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public LI<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public LI<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<LI<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<LI<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public LI<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public LI<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<LI<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<LI<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public LI<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public LI<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public LI<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<LI<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<LI<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public LI<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<LI<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<LI<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public LI<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public LI<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<LI<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<LI<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public LI<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public LI<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<LI<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<LI<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public LI<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public LI<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<LI<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<LI<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public LI<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public LI<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<LI<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<LI<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<LI<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public LI<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public LI<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<LI<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<LI<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public LI<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<LI<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<LI<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<LI<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<LI<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<LI<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public LI<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public LI<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<LI<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<LI<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public LI<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public LI<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<LI<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<LI<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<LI<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public LI<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public LI<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<LI<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<LI<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<LI<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<LI<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public LI<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<LI<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<LI<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public LI<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<LI<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<LI<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public LI<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public LI<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<LI<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<LI<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public LI<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<LI<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<LI<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public LI<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<LI<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<LI<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public LI<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<LI<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<LI<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public LI<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<LI<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<LI<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<LI<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LI<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<LI<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<LI<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LI<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<LI<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<LI<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public LI<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<LI<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<LI<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<LI<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public LI<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class UL<T extends _> extends EImp<T> implements HamletSpec.UL
    {
        public UL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public UL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public UL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public UL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public UL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public UL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public UL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public UL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public UL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public UL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public UL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public UL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public UL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public UL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public UL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public UL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public UL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.LI<UL<T>> li() {
            this.closeAttrs();
            return (Hamlet.LI<UL<T>>)Hamlet.this.li_(this, false);
        }
        
        @Override
        public UL<T> li(final String cdata) {
            return this.li()._(cdata)._();
        }
    }
    
    public class OL<T extends _> extends EImp<T> implements HamletSpec.OL
    {
        public OL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public OL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public OL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public OL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public OL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public OL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public OL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public OL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public OL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public OL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public OL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public OL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public OL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public OL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public OL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public OL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public OL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.LI<OL<T>> li() {
            this.closeAttrs();
            return (Hamlet.LI<OL<T>>)Hamlet.this.li_(this, false);
        }
        
        @Override
        public OL<T> li(final String cdata) {
            return this.li()._(cdata)._();
        }
    }
    
    public class DD<T extends _> extends EImp<T> implements HamletSpec.DD
    {
        public DD(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DD<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DD<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DD<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DD<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DD<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DD<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DD<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DD<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DD<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DD<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DD<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DD<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DD<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DD<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DD<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DD<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<DD<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<DD<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<DD<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public DD<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<DD<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<DD<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<DD<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<DD<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<DD<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public DD<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<DD<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<DD<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public DD<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<DD<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<DD<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<DD<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<DD<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<DD<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<DD<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DD<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DD<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DD<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DD<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public DD<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<DD<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<DD<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public DD<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public DD<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<DD<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<DD<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public DD<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<DD<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<DD<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public DD<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public DD<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<DD<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<DD<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public DD<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public DD<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<DD<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<DD<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public DD<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public DD<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<DD<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<DD<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public DD<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public DD<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<DD<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<DD<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<DD<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<DD<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<DD<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<DD<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<DD<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<DD<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<DD<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<DD<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<DD<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<DD<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<DD<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<DD<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<DD<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public DD<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public DD<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<DD<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<DD<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public DD<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public DD<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<DD<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<DD<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public DD<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public DD<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<DD<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<DD<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public DD<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public DD<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public DD<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<DD<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<DD<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public DD<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<DD<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<DD<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public DD<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public DD<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<DD<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<DD<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public DD<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public DD<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<DD<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<DD<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public DD<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public DD<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public DD<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<DD<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<DD<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public DD<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<DD<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<DD<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public DD<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public DD<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<DD<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<DD<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public DD<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public DD<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<DD<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<DD<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public DD<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public DD<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<DD<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<DD<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public DD<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public DD<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<DD<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<DD<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<DD<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public DD<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public DD<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<DD<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<DD<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public DD<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<DD<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<DD<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<DD<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<DD<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<DD<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public DD<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public DD<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<DD<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<DD<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public DD<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public DD<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<DD<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<DD<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<DD<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public DD<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public DD<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<DD<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<DD<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<DD<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<DD<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public DD<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<DD<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<DD<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public DD<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<DD<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<DD<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public DD<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public DD<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<DD<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<DD<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public DD<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<DD<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<DD<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public DD<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<DD<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<DD<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public DD<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<DD<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<DD<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public DD<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<DD<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<DD<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<DD<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DD<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<DD<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DD<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DD<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DD<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<DD<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public DD<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<DD<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<DD<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<DD<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public DD<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class DT<T extends _> extends EImp<T> implements HamletSpec.DT
    {
        public DT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DT<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DT<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DT<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DT<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DT<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DT<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DT<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DT<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DT<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DT<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DT<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DT<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DT<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DT<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DT<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DT<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public DT<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public DT<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<DT<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<DT<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public DT<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public DT<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<DT<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<DT<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public DT<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public DT<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<DT<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<DT<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public DT<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public DT<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public DT<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<DT<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<DT<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public DT<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<DT<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<DT<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public DT<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public DT<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<DT<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<DT<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public DT<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public DT<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<DT<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<DT<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public DT<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public DT<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public DT<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<DT<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<DT<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public DT<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<DT<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<DT<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public DT<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public DT<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<DT<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<DT<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public DT<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public DT<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<DT<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<DT<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public DT<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public DT<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<DT<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<DT<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public DT<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public DT<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<DT<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<DT<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<DT<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public DT<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public DT<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<DT<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<DT<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public DT<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<DT<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<DT<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<DT<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<DT<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<DT<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public DT<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public DT<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<DT<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<DT<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public DT<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public DT<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<DT<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<DT<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<DT<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public DT<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public DT<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<DT<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<DT<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<DT<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<DT<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public DT<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<DT<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<DT<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public DT<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<DT<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<DT<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public DT<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public DT<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<DT<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<DT<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public DT<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<DT<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<DT<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public DT<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<DT<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<DT<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public DT<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<DT<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<DT<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public DT<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<DT<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<DT<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<DT<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DT<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<DT<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DT<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DT<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DT<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<DT<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public DT<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<DT<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<DT<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<DT<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public DT<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class DL<T extends _> extends EImp<T> implements HamletSpec.DL
    {
        public DL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.DT<DL<T>> dt() {
            this.closeAttrs();
            return (Hamlet.DT<DL<T>>)Hamlet.this.dt_(this, false);
        }
        
        @Override
        public DL<T> dt(final String cdata) {
            return this.dt()._(cdata)._();
        }
        
        @Override
        public Hamlet.DD<DL<T>> dd() {
            this.closeAttrs();
            return (Hamlet.DD<DL<T>>)Hamlet.this.dd_(this, false);
        }
        
        @Override
        public DL<T> dd(final String cdata) {
            return this.dd()._(cdata)._();
        }
    }
    
    public class DEL<T extends _> extends EImp<T> implements HamletSpec.DEL
    {
        public DEL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DEL<T> $cite(final String value) {
            this.addAttr("cite", value);
            return this;
        }
        
        @Override
        public DEL<T> $datetime(final String value) {
            this.addAttr("datetime", value);
            return this;
        }
        
        @Override
        public DEL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DEL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DEL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DEL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DEL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DEL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DEL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DEL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DEL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DEL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DEL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DEL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DEL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DEL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DEL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DEL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<DEL<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<DEL<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<DEL<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public DEL<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<DEL<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<DEL<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<DEL<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<DEL<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<DEL<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public DEL<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<DEL<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<DEL<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public DEL<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<DEL<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<DEL<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<DEL<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<DEL<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<DEL<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<DEL<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DEL<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DEL<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DEL<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DEL<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public DEL<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<DEL<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<DEL<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public DEL<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public DEL<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<DEL<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<DEL<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public DEL<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<DEL<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<DEL<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public DEL<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public DEL<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<DEL<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<DEL<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public DEL<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public DEL<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<DEL<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<DEL<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public DEL<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public DEL<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<DEL<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<DEL<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public DEL<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public DEL<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<DEL<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<DEL<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<DEL<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<DEL<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<DEL<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<DEL<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<DEL<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<DEL<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<DEL<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<DEL<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<DEL<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<DEL<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<DEL<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<DEL<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<DEL<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public DEL<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public DEL<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<DEL<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<DEL<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public DEL<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public DEL<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<DEL<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<DEL<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public DEL<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public DEL<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<DEL<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<DEL<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public DEL<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public DEL<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public DEL<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<DEL<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<DEL<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public DEL<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<DEL<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<DEL<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public DEL<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public DEL<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<DEL<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<DEL<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public DEL<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public DEL<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<DEL<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<DEL<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public DEL<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public DEL<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public DEL<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<DEL<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<DEL<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public DEL<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<DEL<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<DEL<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public DEL<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public DEL<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<DEL<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<DEL<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public DEL<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public DEL<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<DEL<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<DEL<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public DEL<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public DEL<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<DEL<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<DEL<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public DEL<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public DEL<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<DEL<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<DEL<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<DEL<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public DEL<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public DEL<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<DEL<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<DEL<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public DEL<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<DEL<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<DEL<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<DEL<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<DEL<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<DEL<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public DEL<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public DEL<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<DEL<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<DEL<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public DEL<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public DEL<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<DEL<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<DEL<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<DEL<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public DEL<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public DEL<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<DEL<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<DEL<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<DEL<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<DEL<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public DEL<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<DEL<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<DEL<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public DEL<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<DEL<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<DEL<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public DEL<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public DEL<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<DEL<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<DEL<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public DEL<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<DEL<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<DEL<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public DEL<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public DEL<DEL<T>> del() {
            this.closeAttrs();
            return (DEL<DEL<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public DEL<T> del(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL.del:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DEL<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.LABEL<DEL<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<DEL<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public DEL<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<DEL<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<DEL<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<DEL<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DEL<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<DEL<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DEL<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DEL<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DEL<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<DEL<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public DEL<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<DEL<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<DEL<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<DEL<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public DEL<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class INS<T extends _> extends EImp<T> implements HamletSpec.INS
    {
        public INS(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public INS<T> $cite(final String value) {
            this.addAttr("cite", value);
            return this;
        }
        
        @Override
        public INS<T> $datetime(final String value) {
            this.addAttr("datetime", value);
            return this;
        }
        
        @Override
        public INS<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public INS<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public INS<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public INS<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public INS<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public INS<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public INS<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public INS<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public INS<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public INS<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public INS<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public INS<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public INS<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public INS<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public INS<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public INS<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<INS<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<INS<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<INS<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public INS<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<INS<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<INS<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<INS<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<INS<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<INS<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public INS<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<INS<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<INS<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public INS<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<INS<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<INS<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<INS<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<INS<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<INS<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<INS<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<INS<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<INS<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<INS<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<INS<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public INS<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<INS<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<INS<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public INS<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public INS<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<INS<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<INS<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public INS<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<INS<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<INS<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public INS<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public INS<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<INS<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<INS<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public INS<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public INS<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<INS<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<INS<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public INS<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public INS<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<INS<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<INS<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public INS<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public INS<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<INS<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<INS<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<INS<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<INS<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<INS<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<INS<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<INS<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<INS<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<INS<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<INS<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<INS<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<INS<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<INS<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<INS<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<INS<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public INS<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public INS<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<INS<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<INS<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public INS<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public INS<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<INS<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<INS<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public INS<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public INS<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<INS<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<INS<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public INS<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public INS<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public INS<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<INS<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<INS<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public INS<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<INS<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<INS<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public INS<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public INS<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<INS<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<INS<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public INS<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public INS<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<INS<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<INS<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public INS<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public INS<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public INS<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<INS<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<INS<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public INS<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<INS<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<INS<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public INS<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public INS<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<INS<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<INS<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public INS<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public INS<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<INS<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<INS<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public INS<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public INS<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<INS<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<INS<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public INS<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public INS<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<INS<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<INS<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<INS<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public INS<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public INS<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<INS<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<INS<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public INS<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<INS<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<INS<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<INS<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<INS<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<INS<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public INS<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public INS<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<INS<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<INS<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public INS<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public INS<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<INS<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<INS<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<INS<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public INS<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public INS<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<INS<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<INS<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<INS<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<INS<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public INS<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<INS<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<INS<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public INS<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<INS<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<INS<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public INS<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public INS<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<INS<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<INS<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public INS<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public INS<INS<T>> ins() {
            this.closeAttrs();
            return (INS<INS<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public INS<T> ins(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS.ins:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$INS<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.DEL<INS<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<INS<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public INS<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<INS<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<INS<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public INS<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<INS<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<INS<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<INS<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<INS<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<INS<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<INS<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<INS<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<INS<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<INS<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public INS<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<INS<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<INS<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<INS<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public INS<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class BLOCKQUOTE<T extends _> extends EImp<T> implements HamletSpec.BLOCKQUOTE
    {
        public BLOCKQUOTE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BLOCKQUOTE<T> $cite(final String value) {
            this.addAttr("cite", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public BLOCKQUOTE<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<BLOCKQUOTE<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<BLOCKQUOTE<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<BLOCKQUOTE<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public BLOCKQUOTE<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<BLOCKQUOTE<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<BLOCKQUOTE<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<BLOCKQUOTE<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<BLOCKQUOTE<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<BLOCKQUOTE<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<BLOCKQUOTE<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<BLOCKQUOTE<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<BLOCKQUOTE<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<BLOCKQUOTE<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<BLOCKQUOTE<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<BLOCKQUOTE<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<BLOCKQUOTE<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<BLOCKQUOTE<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<BLOCKQUOTE<T>> blockquote() {
            this.closeAttrs();
            return (BLOCKQUOTE<BLOCKQUOTE<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<BLOCKQUOTE<T>> bq() {
            this.closeAttrs();
            return (BLOCKQUOTE<BLOCKQUOTE<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<BLOCKQUOTE<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<BLOCKQUOTE<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public BLOCKQUOTE<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<BLOCKQUOTE<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<BLOCKQUOTE<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<BLOCKQUOTE<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<BLOCKQUOTE<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public BLOCKQUOTE<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<BLOCKQUOTE<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<BLOCKQUOTE<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public BLOCKQUOTE<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<BLOCKQUOTE<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<BLOCKQUOTE<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public BLOCKQUOTE<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<BLOCKQUOTE<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<BLOCKQUOTE<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public BLOCKQUOTE<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public BLOCKQUOTE<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<BLOCKQUOTE<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<BLOCKQUOTE<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<BLOCKQUOTE<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<BLOCKQUOTE<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<BLOCKQUOTE<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<BLOCKQUOTE<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<BLOCKQUOTE<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<BLOCKQUOTE<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<BLOCKQUOTE<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<BLOCKQUOTE<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<BLOCKQUOTE<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<BLOCKQUOTE<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<BLOCKQUOTE<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<BLOCKQUOTE<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<BLOCKQUOTE<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public Hamlet.SCRIPT<BLOCKQUOTE<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<BLOCKQUOTE<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public BLOCKQUOTE<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
    }
    
    public class Q<T extends _> extends EImp<T> implements HamletSpec.Q
    {
        public Q(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public Q<T> $cite(final String value) {
            this.addAttr("cite", value);
            return this;
        }
        
        @Override
        public Q<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public Q<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public Q<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public Q<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public Q<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public Q<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public Q<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public Q<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public Q<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public Q<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public Q<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public Q<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public Q<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public Q<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public Q<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public Q<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Q<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public Q<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<Q<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<Q<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public Q<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public Q<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<Q<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<Q<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public Q<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public Q<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<Q<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<Q<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public Q<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public Q<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public Q<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<Q<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<Q<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public Q<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<Q<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<Q<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public Q<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public Q<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<Q<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<Q<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public Q<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public Q<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<Q<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<Q<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public Q<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public Q<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public Q<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<Q<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<Q<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public Q<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<Q<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<Q<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public Q<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public Q<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<Q<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<Q<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public Q<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public Q<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<Q<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<Q<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public Q<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public Q<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<Q<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<Q<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public Q<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public Q<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<Q<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<Q<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<Q<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public Q<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public Q<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<Q<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<Q<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public Q<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<Q<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<Q<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<Q<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<Q<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<Q<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public Q<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public Q<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<Q<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<Q<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public Q<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public Q<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<Q<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<Q<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<Q<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public Q<T> q(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q.q:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Q<T> q(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q.q:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$Q<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Q<Q<T>> q() {
            this.closeAttrs();
            return (Q<Q<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<Q<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<Q<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public Q<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<Q<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<Q<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public Q<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<Q<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<Q<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public Q<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public Q<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<Q<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<Q<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public Q<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<Q<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<Q<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public Q<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<Q<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<Q<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public Q<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<Q<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<Q<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public Q<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<Q<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<Q<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<Q<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<Q<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<Q<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<Q<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<Q<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<Q<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<Q<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public Q<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<Q<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<Q<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<Q<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public Q<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class PRE<T extends _> extends EImp<T> implements HamletSpec.PRE
    {
        public PRE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public PRE<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public PRE<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public PRE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public PRE<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public PRE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public PRE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public PRE<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public PRE<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public PRE<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public PRE<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public PRE<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public PRE<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public PRE<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public PRE<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public PRE<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public PRE<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public PRE<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public PRE<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<PRE<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<PRE<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public PRE<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public PRE<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<PRE<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<PRE<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public PRE<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public PRE<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public PRE<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<PRE<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<PRE<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public PRE<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<PRE<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<PRE<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public PRE<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public PRE<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<PRE<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<PRE<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public PRE<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public PRE<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<PRE<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<PRE<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public PRE<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public PRE<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public PRE<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<PRE<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<PRE<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public PRE<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<PRE<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<PRE<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public PRE<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public PRE<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<PRE<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<PRE<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public PRE<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public PRE<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<PRE<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<PRE<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public PRE<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public PRE<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<PRE<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<PRE<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public PRE<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public PRE<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<PRE<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<PRE<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<PRE<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public PRE<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public PRE<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.MAP<PRE<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<PRE<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<PRE<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public PRE<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public PRE<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<PRE<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<PRE<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<PRE<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<PRE<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public PRE<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<PRE<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<PRE<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public PRE<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<PRE<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<PRE<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public PRE<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public PRE<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<PRE<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<PRE<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public PRE<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<PRE<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<PRE<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public PRE<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<PRE<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<PRE<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public PRE<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<PRE<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<PRE<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public PRE<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<PRE<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<PRE<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<PRE<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<PRE<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<PRE<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<PRE<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<PRE<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<PRE<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<PRE<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public PRE<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<PRE<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<PRE<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<PRE<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public PRE<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H6<T extends _> extends EImp<T> implements HamletSpec.H6
    {
        public H6(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H6<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H6<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H6<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H6<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H6<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H6<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H6<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H6<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H6<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H6<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H6<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H6<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H6<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H6<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H6<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H6<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H6<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H6<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H6<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H6<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H6<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H6<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H6<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H6<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H6<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H6<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H6<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H6<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H6<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H6<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H6<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H6<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H6<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H6<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H6<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H6<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H6<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H6<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H6<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H6<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H6<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H6<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H6<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H6<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H6<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H6<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H6<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H6<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H6<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H6<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H6<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H6<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H6<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H6<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H6<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H6<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H6<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H6<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H6<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H6<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H6<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H6<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H6<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H6<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H6<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H6<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H6<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H6<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H6<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H6<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H6<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H6<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H6<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H6<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H6<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H6<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H6<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H6<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H6<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H6<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H6<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H6<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H6<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H6<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H6<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H6<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H6<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H6<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H6<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H6<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H6<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H6<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H6<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H6<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H6<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H6<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H6<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H6<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H6<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H6<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H6<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H6<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H6<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H6<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H6<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H6<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H6<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H6<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H6<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H6<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H6<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H6<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H6<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H6<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H6<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H6<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H6<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H6<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H6<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H6<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H6<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H6<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H6<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H6<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H6<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H6<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H6<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H6<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H5<T extends _> extends EImp<T> implements HamletSpec.H5
    {
        public H5(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H5<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H5<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H5<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H5<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H5<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H5<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H5<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H5<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H5<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H5<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H5<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H5<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H5<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H5<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H5<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H5<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H5<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H5<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H5<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H5<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H5<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H5<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H5<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H5<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H5<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H5<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H5<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H5<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H5<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H5<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H5<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H5<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H5<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H5<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H5<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H5<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H5<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H5<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H5<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H5<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H5<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H5<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H5<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H5<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H5<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H5<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H5<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H5<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H5<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H5<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H5<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H5<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H5<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H5<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H5<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H5<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H5<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H5<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H5<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H5<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H5<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H5<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H5<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H5<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H5<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H5<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H5<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H5<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H5<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H5<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H5<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H5<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H5<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H5<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H5<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H5<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H5<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H5<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H5<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H5<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H5<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H5<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H5<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H5<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H5<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H5<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H5<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H5<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H5<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H5<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H5<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H5<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H5<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H5<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H5<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H5<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H5<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H5<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H5<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H5<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H5<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H5<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H5<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H5<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H5<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H5<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H5<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H5<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H5<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H5<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H5<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H5<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H5<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H5<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H5<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H5<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H5<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H5<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H5<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H5<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H5<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H5<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H5<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H5<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H5<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H5<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H5<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H5<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H4<T extends _> extends EImp<T> implements HamletSpec.H4
    {
        public H4(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H4<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H4<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H4<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H4<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H4<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H4<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H4<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H4<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H4<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H4<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H4<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H4<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H4<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H4<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H4<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H4<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H4<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H4<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H4<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H4<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H4<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H4<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H4<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H4<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H4<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H4<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H4<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H4<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H4<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H4<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H4<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H4<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H4<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H4<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H4<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H4<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H4<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H4<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H4<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H4<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H4<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H4<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H4<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H4<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H4<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H4<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H4<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H4<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H4<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H4<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H4<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H4<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H4<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H4<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H4<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H4<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H4<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H4<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H4<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H4<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H4<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H4<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H4<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H4<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H4<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H4<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H4<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H4<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H4<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H4<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H4<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H4<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H4<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H4<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H4<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H4<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H4<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H4<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H4<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H4<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H4<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H4<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H4<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H4<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H4<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H4<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H4<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H4<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H4<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H4<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H4<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H4<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H4<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H4<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H4<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H4<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H4<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H4<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H4<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H4<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H4<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H4<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H4<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H4<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H4<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H4<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H4<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H4<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H4<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H4<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H4<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H4<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H4<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H4<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H4<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H4<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H4<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H4<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H4<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H4<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H4<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H4<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H4<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H4<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H4<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H4<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H4<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H4<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H3<T extends _> extends EImp<T> implements HamletSpec.H3
    {
        public H3(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H3<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H3<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H3<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H3<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H3<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H3<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H3<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H3<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H3<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H3<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H3<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H3<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H3<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H3<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H3<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H3<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H3<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H3<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H3<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H3<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H3<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H3<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H3<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H3<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H3<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H3<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H3<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H3<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H3<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H3<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H3<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H3<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H3<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H3<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H3<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H3<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H3<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H3<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H3<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H3<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H3<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H3<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H3<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H3<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H3<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H3<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H3<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H3<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H3<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H3<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H3<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H3<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H3<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H3<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H3<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H3<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H3<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H3<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H3<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H3<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H3<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H3<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H3<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H3<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H3<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H3<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H3<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H3<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H3<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H3<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H3<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H3<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H3<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H3<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H3<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H3<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H3<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H3<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H3<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H3<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H3<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H3<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H3<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H3<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H3<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H3<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H3<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H3<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H3<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H3<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H3<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H3<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H3<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H3<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H3<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H3<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H3<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H3<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H3<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H3<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H3<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H3<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H3<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H3<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H3<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H3<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H3<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H3<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H3<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H3<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H3<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H3<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H3<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H3<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H3<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H3<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H3<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H3<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H3<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H3<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H3<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H3<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H3<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H3<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H3<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H3<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H3<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H3<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H2<T extends _> extends EImp<T> implements HamletSpec.H2
    {
        public H2(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H2<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H2<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H2<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H2<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H2<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H2<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H2<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H2<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H2<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H2<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H2<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H2<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H2<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H2<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H2<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H2<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H2<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H2<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H2<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H2<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H2<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H2<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H2<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H2<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H2<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H2<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H2<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H2<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H2<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H2<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H2<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H2<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H2<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H2<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H2<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H2<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H2<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H2<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H2<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H2<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H2<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H2<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H2<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H2<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H2<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H2<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H2<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H2<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H2<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H2<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H2<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H2<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H2<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H2<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H2<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H2<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H2<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H2<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H2<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H2<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H2<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H2<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H2<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H2<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H2<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H2<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H2<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H2<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H2<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H2<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H2<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H2<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H2<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H2<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H2<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H2<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H2<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H2<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H2<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H2<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H2<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H2<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H2<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H2<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H2<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H2<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H2<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H2<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H2<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H2<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H2<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H2<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H2<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H2<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H2<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H2<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H2<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H2<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H2<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H2<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H2<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H2<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H2<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H2<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H2<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H2<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H2<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H2<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H2<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H2<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H2<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H2<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H2<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H2<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H2<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H2<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H2<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H2<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H2<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H2<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H2<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H2<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H2<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H2<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H2<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H2<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H2<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H2<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class H1<T extends _> extends EImp<T> implements HamletSpec.H1
    {
        public H1(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public H1<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public H1<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public H1<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public H1<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public H1<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public H1<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public H1<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public H1<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public H1<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public H1<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public H1<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public H1<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public H1<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public H1<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public H1<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public H1<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public H1<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public H1<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<H1<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<H1<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public H1<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public H1<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<H1<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<H1<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public H1<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public H1<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<H1<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<H1<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public H1<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public H1<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public H1<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<H1<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<H1<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public H1<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<H1<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<H1<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public H1<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public H1<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<H1<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<H1<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public H1<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public H1<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<H1<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<H1<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public H1<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public H1<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public H1<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<H1<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<H1<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public H1<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<H1<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<H1<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public H1<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public H1<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<H1<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<H1<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public H1<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public H1<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<H1<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<H1<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public H1<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public H1<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<H1<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<H1<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public H1<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public H1<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<H1<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<H1<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<H1<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public H1<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public H1<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<H1<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<H1<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public H1<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<H1<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<H1<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<H1<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<H1<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<H1<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public H1<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public H1<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<H1<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<H1<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public H1<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public H1<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<H1<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<H1<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<H1<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public H1<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public H1<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<H1<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<H1<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<H1<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<H1<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public H1<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<H1<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<H1<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public H1<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<H1<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<H1<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public H1<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public H1<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<H1<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<H1<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public H1<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<H1<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<H1<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public H1<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<H1<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<H1<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public H1<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<H1<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<H1<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public H1<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<H1<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<H1<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<H1<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H1<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<H1<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<H1<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H1<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<H1<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<H1<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public H1<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<H1<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<H1<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<H1<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public H1<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class P<T extends _> extends EImp<T> implements HamletSpec.P
    {
        public P(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public P<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public P<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public P<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public P<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public P<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public P<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public P<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public P<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public P<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public P<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public P<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public P<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public P<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public P<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public P<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public P<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public P<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public P<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<P<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<P<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public P<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public P<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<P<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<P<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public P<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public P<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<P<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<P<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public P<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public P<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public P<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<P<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<P<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public P<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<P<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<P<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public P<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public P<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<P<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<P<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public P<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public P<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<P<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<P<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public P<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public P<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public P<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<P<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<P<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public P<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<P<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<P<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public P<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public P<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<P<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<P<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public P<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public P<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<P<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<P<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public P<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public P<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<P<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<P<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public P<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public P<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<P<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<P<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<P<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public P<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public P<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<P<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<P<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public P<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<P<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<P<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<P<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<P<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<P<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public P<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public P<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<P<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<P<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public P<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public P<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<P<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<P<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<P<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public P<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public P<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<P<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<P<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<P<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<P<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public P<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<P<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<P<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public P<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<P<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<P<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public P<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public P<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<P<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<P<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public P<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<P<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<P<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public P<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<P<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<P<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public P<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<P<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<P<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public P<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<P<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<P<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<P<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<P<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<P<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<P<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<P<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<P<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<P<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public P<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<P<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<P<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<P<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public P<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class HR<T extends _> extends EImp<T> implements HamletSpec.HR
    {
        public HR(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public HR<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public HR<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public HR<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public HR<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public HR<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public HR<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public HR<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public HR<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public HR<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public HR<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public HR<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public HR<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public HR<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public HR<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public HR<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public HR<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class PARAM<T extends _> extends EImp<T> implements HamletSpec.PARAM
    {
        public PARAM(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public PARAM<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public PARAM<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public PARAM<T> $value(final String value) {
            this.addAttr("value", value);
            return this;
        }
    }
    
    public class OBJECT<T extends _> extends EImp<T> implements HamletSpec.OBJECT
    {
        public OBJECT(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public OBJECT<T> $type(final String value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $data(final String value) {
            this.addAttr("data", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $height(final String value) {
            this.addAttr("height", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $height(final int value) {
            this.addAttr("height", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $width(final int value) {
            this.addAttr("width", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $width(final String value) {
            this.addAttr("width", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $usemap(final String value) {
            this.addAttr("usemap", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public OBJECT<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.PARAM<OBJECT<T>> param() {
            this.closeAttrs();
            return (Hamlet.PARAM<OBJECT<T>>)Hamlet.this.param_(this, false);
        }
        
        @Override
        public OBJECT<T> param(final String name, final String value) {
            return this.param().$name(name).$value(value)._();
        }
        
        @Override
        public Hamlet.TABLE<OBJECT<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<OBJECT<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<OBJECT<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public OBJECT<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<OBJECT<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<OBJECT<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<OBJECT<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<OBJECT<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<OBJECT<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public OBJECT<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<OBJECT<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<OBJECT<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public OBJECT<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<OBJECT<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<OBJECT<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<OBJECT<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<OBJECT<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<OBJECT<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<OBJECT<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<OBJECT<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<OBJECT<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<OBJECT<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<OBJECT<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public OBJECT<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<OBJECT<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<OBJECT<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public OBJECT<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public OBJECT<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<OBJECT<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<OBJECT<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public OBJECT<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<OBJECT<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<OBJECT<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public OBJECT<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<OBJECT<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<OBJECT<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public OBJECT<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<OBJECT<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<OBJECT<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public OBJECT<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<OBJECT<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<OBJECT<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public OBJECT<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<OBJECT<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<OBJECT<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<OBJECT<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<OBJECT<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<OBJECT<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<OBJECT<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<OBJECT<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<OBJECT<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<OBJECT<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<OBJECT<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<OBJECT<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<OBJECT<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<OBJECT<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<OBJECT<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<OBJECT<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public OBJECT<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public OBJECT<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<OBJECT<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<OBJECT<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public OBJECT<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<OBJECT<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<OBJECT<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public OBJECT<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<OBJECT<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<OBJECT<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public OBJECT<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public OBJECT<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<OBJECT<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<OBJECT<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public OBJECT<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<OBJECT<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<OBJECT<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public OBJECT<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<OBJECT<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<OBJECT<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public OBJECT<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<OBJECT<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<OBJECT<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public OBJECT<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public OBJECT<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<OBJECT<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<OBJECT<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public OBJECT<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<OBJECT<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<OBJECT<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public OBJECT<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<OBJECT<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<OBJECT<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public OBJECT<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<OBJECT<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<OBJECT<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public OBJECT<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<OBJECT<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<OBJECT<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public OBJECT<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<OBJECT<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<OBJECT<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<OBJECT<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public OBJECT<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public OBJECT<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<OBJECT<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<OBJECT<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public OBJECT<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public OBJECT<OBJECT<T>> object() {
            this.closeAttrs();
            return (OBJECT<OBJECT<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public OBJECT<OBJECT<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<OBJECT<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<OBJECT<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public OBJECT<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<OBJECT<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<OBJECT<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public OBJECT<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<OBJECT<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<OBJECT<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<OBJECT<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public OBJECT<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<OBJECT<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<OBJECT<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<OBJECT<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<OBJECT<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public OBJECT<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<OBJECT<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<OBJECT<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public OBJECT<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<OBJECT<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<OBJECT<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public OBJECT<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public OBJECT<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<OBJECT<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<OBJECT<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public OBJECT<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<OBJECT<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<OBJECT<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public OBJECT<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<OBJECT<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<OBJECT<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public OBJECT<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<OBJECT<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<OBJECT<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public OBJECT<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<OBJECT<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<OBJECT<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<OBJECT<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<OBJECT<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<OBJECT<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<OBJECT<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<OBJECT<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<OBJECT<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<OBJECT<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public OBJECT<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<OBJECT<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<OBJECT<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<OBJECT<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public OBJECT<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class IMG<T extends _> extends EImp<T> implements HamletSpec.IMG
    {
        public IMG(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public IMG<T> $src(final String value) {
            this.addAttr("src", value);
            return this;
        }
        
        @Override
        public IMG<T> $alt(final String value) {
            this.addAttr("alt", value);
            return this;
        }
        
        @Override
        public IMG<T> $ismap() {
            this.addAttr("ismap", null);
            return this;
        }
        
        @Override
        public IMG<T> $height(final String value) {
            this.addAttr("height", value);
            return this;
        }
        
        @Override
        public IMG<T> $height(final int value) {
            this.addAttr("height", value);
            return this;
        }
        
        @Override
        public IMG<T> $width(final int value) {
            this.addAttr("width", value);
            return this;
        }
        
        @Override
        public IMG<T> $width(final String value) {
            this.addAttr("width", value);
            return this;
        }
        
        @Override
        public IMG<T> $usemap(final String value) {
            this.addAttr("usemap", value);
            return this;
        }
        
        @Override
        public IMG<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public IMG<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public IMG<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public IMG<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public IMG<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public IMG<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public IMG<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public IMG<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public IMG<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public IMG<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public IMG<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public IMG<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public IMG<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public IMG<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public IMG<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public IMG<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class LINK<T extends _> extends EImp<T> implements HamletSpec.LINK
    {
        public LINK(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public LINK<T> $rel(final EnumSet<LinkType> value) {
            this.addRelAttr("rel", value);
            return this;
        }
        
        @Override
        public LINK<T> $rel(final String value) {
            this.addAttr("rel", value);
            return this;
        }
        
        @Override
        public LINK<T> $href(final String value) {
            this.addAttr("href", value);
            return this;
        }
        
        @Override
        public LINK<T> $type(final String value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public LINK<T> $media(final EnumSet<Media> value) {
            this.addMediaAttr("media", value);
            return this;
        }
        
        @Override
        public LINK<T> $media(final String value) {
            this.addAttr("media", value);
            return this;
        }
        
        @Override
        public LINK<T> $hreflang(final String value) {
            this.addAttr("hreflang", value);
            return this;
        }
        
        @Override
        public LINK<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public LINK<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public LINK<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public LINK<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public LINK<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public LINK<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public LINK<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public LINK<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public LINK<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public LINK<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public LINK<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public LINK<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public LINK<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public LINK<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public LINK<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public LINK<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class AREA<T extends _> extends EImp<T> implements HamletSpec.AREA
    {
        public AREA(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public AREA<T> $href(final String value) {
            this.addAttr("href", value);
            return this;
        }
        
        @Override
        public AREA<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public AREA<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public AREA<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public AREA<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public AREA<T> $alt(final String value) {
            this.addAttr("alt", value);
            return this;
        }
        
        @Override
        public AREA<T> $shape(final Shape value) {
            this.addAttr("shape", value);
            return this;
        }
        
        @Override
        public AREA<T> $coords(final String value) {
            this.addAttr("coords", value);
            return this;
        }
        
        @Override
        public AREA<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public AREA<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public AREA<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public AREA<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public AREA<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public AREA<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public AREA<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public AREA<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public AREA<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public AREA<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public AREA<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public AREA<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public AREA<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public AREA<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public AREA<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public AREA<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
    }
    
    public class MAP<T extends _> extends EImp<T> implements HamletSpec.MAP
    {
        public MAP(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public MAP<T> $name(final String value) {
            this.addAttr("name", value);
            return this;
        }
        
        @Override
        public Hamlet.AREA<MAP<T>> area() {
            this.closeAttrs();
            return (Hamlet.AREA<MAP<T>>)Hamlet.this.area_(this, false);
        }
        
        @Override
        public Hamlet.AREA<MAP<T>> area(final String selector) {
            return HamletImpl.setSelector(this.area(), selector);
        }
        
        @Override
        public MAP<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public MAP<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public MAP<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public MAP<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public MAP<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public MAP<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public MAP<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public MAP<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public MAP<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public MAP<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public MAP<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public MAP<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public MAP<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public MAP<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public MAP<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public MAP<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<MAP<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<MAP<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<MAP<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public MAP<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<MAP<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<MAP<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<MAP<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<MAP<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<MAP<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public MAP<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<MAP<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<MAP<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public MAP<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<MAP<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<MAP<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<MAP<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<MAP<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<MAP<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<MAP<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<MAP<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<MAP<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<MAP<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<MAP<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public MAP<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<MAP<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<MAP<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public MAP<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public MAP<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<MAP<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<MAP<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public MAP<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<MAP<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<MAP<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public MAP<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public MAP<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<MAP<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<MAP<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public MAP<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public MAP<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<MAP<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<MAP<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public MAP<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public MAP<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<MAP<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<MAP<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public MAP<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public MAP<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<MAP<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<MAP<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<MAP<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<MAP<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<MAP<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<MAP<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<MAP<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<MAP<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<MAP<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<MAP<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<MAP<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<MAP<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<MAP<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<MAP<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<MAP<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
    }
    
    public class A<T extends _> extends EImp<T> implements HamletSpec.A
    {
        public A(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public A<T> $rel(final EnumSet<LinkType> value) {
            this.addRelAttr("rel", value);
            return this;
        }
        
        @Override
        public A<T> $rel(final String value) {
            this.addAttr("rel", value);
            return this;
        }
        
        @Override
        public A<T> $href(final String value) {
            this.addAttr("href", value);
            return this;
        }
        
        @Override
        public A<T> $type(final String value) {
            this.addAttr("type", value);
            return this;
        }
        
        @Override
        public A<T> $tabindex(final int value) {
            this.addAttr("tabindex", value);
            return this;
        }
        
        @Override
        public A<T> $accesskey(final String value) {
            this.addAttr("accesskey", value);
            return this;
        }
        
        @Override
        public A<T> $onfocus(final String value) {
            this.addAttr("onfocus", value);
            return this;
        }
        
        @Override
        public A<T> $onblur(final String value) {
            this.addAttr("onblur", value);
            return this;
        }
        
        @Override
        public A<T> $hreflang(final String value) {
            this.addAttr("hreflang", value);
            return this;
        }
        
        @Override
        public A<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public A<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public A<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public A<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public A<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public A<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public A<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public A<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public A<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public A<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public A<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public A<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public A<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public A<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public A<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public A<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public A<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public A<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<A<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<A<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public A<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public A<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<A<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<A<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public A<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public A<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<A<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<A<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public A<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public A<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public A<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<A<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<A<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public A<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<A<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<A<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public A<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public A<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<A<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<A<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public A<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public A<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<A<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<A<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public A<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public A<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public A<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<A<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<A<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public A<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<A<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<A<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public A<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public A<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<A<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<A<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public A<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public A<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<A<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<A<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public A<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public A<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<A<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<A<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public A<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public A<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.IMG<A<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<A<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public A<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<A<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<A<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<A<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.MAP<A<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<A<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<A<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public A<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public A<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<A<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<A<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<A<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<A<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public A<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<A<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<A<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public A<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<A<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<A<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public A<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public A<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<A<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<A<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public A<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<A<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<A<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public A<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<A<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<A<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public A<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.SUB<A<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<A<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public A<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public A<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<A<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<A<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public A<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public A<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<A<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<A<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public A<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<A<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<A<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<A<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<A<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<A<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<A<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<A<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<A<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<A<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public A<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<A<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<A<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<A<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public A<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class DIV<T extends _> extends EImp<T> implements HamletSpec.DIV
    {
        public DIV(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DIV<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DIV<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DIV<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DIV<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DIV<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DIV<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DIV<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DIV<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DIV<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DIV<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DIV<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DIV<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DIV<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DIV<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DIV<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DIV<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<DIV<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<DIV<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<DIV<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public DIV<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<DIV<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<DIV<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<DIV<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<DIV<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<DIV<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public DIV<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<DIV<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<DIV<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public DIV<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<DIV<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<DIV<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<DIV<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public DIV<DIV<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public DIV<DIV<T>> div() {
            this.closeAttrs();
            return (DIV<DIV<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DIV<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DIV<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<DIV<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<DIV<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public DIV<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<DIV<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<DIV<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public DIV<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public DIV<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<DIV<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<DIV<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public DIV<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<DIV<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<DIV<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public DIV<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public DIV<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<DIV<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<DIV<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public DIV<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public DIV<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<DIV<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<DIV<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public DIV<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public DIV<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<DIV<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<DIV<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public DIV<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public DIV<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<DIV<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<DIV<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<DIV<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<DIV<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<DIV<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<DIV<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<DIV<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<DIV<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<DIV<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<DIV<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<DIV<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<DIV<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<DIV<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<DIV<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<DIV<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public DIV<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public DIV<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<DIV<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<DIV<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public DIV<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public DIV<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<DIV<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<DIV<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public DIV<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public DIV<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<DIV<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<DIV<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public DIV<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public DIV<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public DIV<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<DIV<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<DIV<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public DIV<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<DIV<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<DIV<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public DIV<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public DIV<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<DIV<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<DIV<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public DIV<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public DIV<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<DIV<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<DIV<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public DIV<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public DIV<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public DIV<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<DIV<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<DIV<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public DIV<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<DIV<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<DIV<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public DIV<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public DIV<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<DIV<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<DIV<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public DIV<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public DIV<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<DIV<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<DIV<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public DIV<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public DIV<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<DIV<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<DIV<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public DIV<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public DIV<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<DIV<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<DIV<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<DIV<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public DIV<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public DIV<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<DIV<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<DIV<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public DIV<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<DIV<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<DIV<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<DIV<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<DIV<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<DIV<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public DIV<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public DIV<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<DIV<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<DIV<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public DIV<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public DIV<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<DIV<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<DIV<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<DIV<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public DIV<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public DIV<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<DIV<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<DIV<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<DIV<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<DIV<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public DIV<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<DIV<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<DIV<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public DIV<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<DIV<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<DIV<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public DIV<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public DIV<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<DIV<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<DIV<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public DIV<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<DIV<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<DIV<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public DIV<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<DIV<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<DIV<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public DIV<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<DIV<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<DIV<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public DIV<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<DIV<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<DIV<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<DIV<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DIV<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<DIV<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DIV<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DIV<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DIV<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<DIV<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public DIV<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<DIV<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<DIV<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<DIV<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public DIV<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class ADDRESS<T extends _> extends EImp<T> implements HamletSpec.ADDRESS
    {
        public ADDRESS(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public ADDRESS<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public ADDRESS<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public ADDRESS<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<ADDRESS<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<ADDRESS<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public ADDRESS<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<ADDRESS<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<ADDRESS<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public ADDRESS<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<ADDRESS<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<ADDRESS<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public ADDRESS<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<ADDRESS<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<ADDRESS<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public ADDRESS<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<ADDRESS<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<ADDRESS<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public ADDRESS<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<ADDRESS<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<ADDRESS<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public ADDRESS<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<ADDRESS<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<ADDRESS<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public ADDRESS<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<ADDRESS<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<ADDRESS<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public ADDRESS<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<ADDRESS<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<ADDRESS<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public ADDRESS<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<ADDRESS<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<ADDRESS<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public ADDRESS<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<ADDRESS<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<ADDRESS<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public ADDRESS<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<ADDRESS<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<ADDRESS<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public ADDRESS<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<ADDRESS<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<ADDRESS<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<ADDRESS<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public ADDRESS<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public ADDRESS<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<ADDRESS<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<ADDRESS<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public ADDRESS<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<ADDRESS<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<ADDRESS<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<ADDRESS<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<ADDRESS<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<ADDRESS<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public ADDRESS<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<ADDRESS<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<ADDRESS<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public ADDRESS<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<ADDRESS<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<ADDRESS<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<ADDRESS<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public ADDRESS<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<ADDRESS<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<ADDRESS<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<ADDRESS<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<ADDRESS<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public ADDRESS<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<ADDRESS<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<ADDRESS<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public ADDRESS<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<ADDRESS<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<ADDRESS<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public ADDRESS<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public ADDRESS<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<ADDRESS<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<ADDRESS<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public ADDRESS<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<ADDRESS<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<ADDRESS<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public ADDRESS<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<ADDRESS<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<ADDRESS<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public ADDRESS<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<ADDRESS<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<ADDRESS<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public ADDRESS<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<ADDRESS<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<ADDRESS<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<ADDRESS<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ADDRESS<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<ADDRESS<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ADDRESS<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ADDRESS<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ADDRESS<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<ADDRESS<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public ADDRESS<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<ADDRESS<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<ADDRESS<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<ADDRESS<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public ADDRESS<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class BODY<T extends _> extends EImp<T> implements HamletSpec.BODY
    {
        public BODY(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BODY<T> $onload(final String value) {
            this.addAttr("onload", value);
            return this;
        }
        
        @Override
        public BODY<T> $onunload(final String value) {
            this.addAttr("onunload", value);
            return this;
        }
        
        @Override
        public BODY<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public BODY<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public BODY<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public BODY<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public BODY<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public BODY<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public BODY<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public BODY<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public BODY<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public BODY<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public BODY<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public BODY<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public BODY<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public BODY<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public BODY<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public BODY<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public Hamlet.TABLE<BODY<T>> table() {
            this.closeAttrs();
            return (Hamlet.TABLE<BODY<T>>)Hamlet.this.table_(this, false);
        }
        
        @Override
        public Hamlet.TABLE<BODY<T>> table(final String selector) {
            return HamletImpl.setSelector(this.table(), selector);
        }
        
        @Override
        public BODY<T> address(final String cdata) {
            return this.address()._(cdata)._();
        }
        
        @Override
        public Hamlet.ADDRESS<BODY<T>> address() {
            this.closeAttrs();
            return (Hamlet.ADDRESS<BODY<T>>)Hamlet.this.address_(this, false);
        }
        
        @Override
        public Hamlet.P<BODY<T>> p(final String selector) {
            return HamletImpl.setSelector(this.p(), selector);
        }
        
        @Override
        public Hamlet.P<BODY<T>> p() {
            this.closeAttrs();
            return (Hamlet.P<BODY<T>>)Hamlet.this.p_(this, false);
        }
        
        @Override
        public BODY<T> _(final Class<? extends SubView> cls) {
            this._v(cls);
            return this;
        }
        
        @Override
        public Hamlet.HR<BODY<T>> hr() {
            this.closeAttrs();
            return (Hamlet.HR<BODY<T>>)Hamlet.this.hr_(this, false);
        }
        
        @Override
        public BODY<T> hr(final String selector) {
            return HamletImpl.setSelector(this.hr(), selector)._();
        }
        
        @Override
        public Hamlet.DL<BODY<T>> dl(final String selector) {
            return HamletImpl.setSelector(this.dl(), selector);
        }
        
        @Override
        public Hamlet.DL<BODY<T>> dl() {
            this.closeAttrs();
            return (Hamlet.DL<BODY<T>>)Hamlet.this.dl_(this, false);
        }
        
        @Override
        public Hamlet.DIV<BODY<T>> div(final String selector) {
            return HamletImpl.setSelector(this.div(), selector);
        }
        
        @Override
        public Hamlet.DIV<BODY<T>> div() {
            this.closeAttrs();
            return (Hamlet.DIV<BODY<T>>)Hamlet.this.div_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<BODY<T>> blockquote() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<BODY<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public Hamlet.BLOCKQUOTE<BODY<T>> bq() {
            this.closeAttrs();
            return (Hamlet.BLOCKQUOTE<BODY<T>>)Hamlet.this.blockquote_(this, false);
        }
        
        @Override
        public BODY<T> h1(final String cdata) {
            return this.h1()._(cdata)._();
        }
        
        @Override
        public Hamlet.H1<BODY<T>> h1() {
            this.closeAttrs();
            return (Hamlet.H1<BODY<T>>)Hamlet.this.h1_(this, false);
        }
        
        @Override
        public BODY<T> h1(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h1(), selector)._(cdata)._();
        }
        
        @Override
        public BODY<T> h2(final String cdata) {
            return this.h2()._(cdata)._();
        }
        
        @Override
        public Hamlet.H2<BODY<T>> h2() {
            this.closeAttrs();
            return (Hamlet.H2<BODY<T>>)Hamlet.this.h2_(this, false);
        }
        
        @Override
        public BODY<T> h2(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h2(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H3<BODY<T>> h3() {
            this.closeAttrs();
            return (Hamlet.H3<BODY<T>>)Hamlet.this.h3_(this, false);
        }
        
        @Override
        public BODY<T> h3(final String cdata) {
            return this.h3()._(cdata)._();
        }
        
        @Override
        public BODY<T> h3(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h3(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H4<BODY<T>> h4() {
            this.closeAttrs();
            return (Hamlet.H4<BODY<T>>)Hamlet.this.h4_(this, false);
        }
        
        @Override
        public BODY<T> h4(final String cdata) {
            return this.h4()._(cdata)._();
        }
        
        @Override
        public BODY<T> h4(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h4(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H5<BODY<T>> h5() {
            this.closeAttrs();
            return (Hamlet.H5<BODY<T>>)Hamlet.this.h5_(this, false);
        }
        
        @Override
        public BODY<T> h5(final String cdata) {
            return this.h5()._(cdata)._();
        }
        
        @Override
        public BODY<T> h5(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h5(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.H6<BODY<T>> h6() {
            this.closeAttrs();
            return (Hamlet.H6<BODY<T>>)Hamlet.this.h6_(this, false);
        }
        
        @Override
        public BODY<T> h6(final String cdata) {
            return this.h6()._(cdata)._();
        }
        
        @Override
        public BODY<T> h6(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.h6(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.UL<BODY<T>> ul() {
            this.closeAttrs();
            return (Hamlet.UL<BODY<T>>)Hamlet.this.ul_(this, false);
        }
        
        @Override
        public Hamlet.UL<BODY<T>> ul(final String selector) {
            return HamletImpl.setSelector(this.ul(), selector);
        }
        
        @Override
        public Hamlet.OL<BODY<T>> ol() {
            this.closeAttrs();
            return (Hamlet.OL<BODY<T>>)Hamlet.this.ol_(this, false);
        }
        
        @Override
        public Hamlet.OL<BODY<T>> ol(final String selector) {
            return HamletImpl.setSelector(this.ol(), selector);
        }
        
        @Override
        public Hamlet.PRE<BODY<T>> pre() {
            this.closeAttrs();
            return (Hamlet.PRE<BODY<T>>)Hamlet.this.pre_(this, false);
        }
        
        @Override
        public Hamlet.PRE<BODY<T>> pre(final String selector) {
            return HamletImpl.setSelector(this.pre(), selector);
        }
        
        @Override
        public Hamlet.FORM<BODY<T>> form() {
            this.closeAttrs();
            return (Hamlet.FORM<BODY<T>>)Hamlet.this.form_(this, false);
        }
        
        @Override
        public Hamlet.FORM<BODY<T>> form(final String selector) {
            return HamletImpl.setSelector(this.form(), selector);
        }
        
        @Override
        public Hamlet.FIELDSET<BODY<T>> fieldset() {
            this.closeAttrs();
            return (Hamlet.FIELDSET<BODY<T>>)Hamlet.this.fieldset_(this, false);
        }
        
        @Override
        public Hamlet.FIELDSET<BODY<T>> fieldset(final String selector) {
            return HamletImpl.setSelector(this.fieldset(), selector);
        }
        
        @Override
        public Hamlet.SCRIPT<BODY<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<BODY<T>>)Hamlet.this.script_(this, false);
        }
        
        @Override
        public BODY<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<BODY<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<BODY<T>>)Hamlet.this.ins_(this, false);
        }
        
        @Override
        public BODY<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<BODY<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<BODY<T>>)Hamlet.this.del_(this, false);
        }
        
        @Override
        public BODY<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
    }
    
    public class BR<T extends _> extends EImp<T> implements HamletSpec.BR
    {
        public BR(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BR<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public BR<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public BR<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public BR<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
    }
    
    public class BDO<T extends _> extends EImp<T> implements HamletSpec.BDO
    {
        public BDO(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public BDO<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public BDO<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public BDO<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public BDO<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public BDO<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public BDO<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public BDO<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public BDO<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<BDO<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<BDO<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public BDO<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public BDO<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<BDO<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<BDO<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public BDO<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public BDO<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<BDO<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<BDO<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public BDO<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public BDO<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public BDO<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<BDO<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<BDO<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public BDO<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<BDO<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<BDO<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public BDO<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public BDO<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<BDO<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<BDO<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public BDO<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public BDO<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<BDO<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<BDO<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public BDO<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public BDO<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public BDO<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<BDO<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<BDO<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public BDO<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<BDO<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<BDO<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public BDO<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public BDO<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<BDO<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<BDO<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public BDO<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public BDO<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<BDO<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<BDO<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public BDO<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public BDO<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<BDO<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<BDO<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public BDO<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public BDO<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<BDO<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<BDO<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<BDO<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public BDO<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public BDO<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<BDO<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<BDO<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public BDO<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<BDO<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<BDO<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<BDO<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<BDO<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<BDO<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public BDO<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public BDO<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<BDO<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<BDO<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public BDO<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public BDO<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<BDO<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<BDO<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<BDO<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public BDO<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public BDO<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<BDO<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<BDO<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<BDO<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<BDO<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public BDO<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public BDO<BDO<T>> bdo() {
            this.closeAttrs();
            return (BDO<BDO<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public BDO<T> bdo(final Dir dir, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO.bdo:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO;
            //     4: aload_1         /* dir */
            //     5: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO.$dir:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$Dir;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO;
            //     8: iconst_1       
            //     9: anewarray       Ljava/lang/Object;
            //    12: dup            
            //    13: iconst_0       
            //    14: aload_2         /* cdata */
            //    15: aastore        
            //    16: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO;
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    22: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO;
            //    25: areturn        
            //    Signature:
            //  (Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$Dir;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$BDO<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2463)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.SPAN<BDO<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<BDO<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public BDO<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public BDO<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<BDO<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<BDO<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public BDO<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<BDO<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<BDO<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public BDO<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<BDO<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<BDO<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public BDO<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<BDO<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<BDO<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public BDO<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<BDO<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<BDO<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<BDO<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<BDO<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<BDO<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<BDO<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<BDO<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<BDO<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<BDO<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public BDO<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<BDO<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<BDO<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<BDO<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public BDO<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class SPAN<T extends _> extends EImp<T> implements HamletSpec.SPAN
    {
        public SPAN(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SPAN<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SPAN<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SPAN<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SPAN<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SPAN<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SPAN<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SPAN<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SPAN<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public SPAN<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public SPAN<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<SPAN<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<SPAN<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public SPAN<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public SPAN<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<SPAN<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<SPAN<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public SPAN<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public SPAN<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<SPAN<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<SPAN<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public SPAN<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public SPAN<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public SPAN<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<SPAN<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<SPAN<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public SPAN<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<SPAN<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<SPAN<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public SPAN<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public SPAN<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<SPAN<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<SPAN<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public SPAN<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public SPAN<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<SPAN<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<SPAN<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public SPAN<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public SPAN<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public SPAN<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<SPAN<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<SPAN<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public SPAN<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<SPAN<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<SPAN<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public SPAN<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public SPAN<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<SPAN<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<SPAN<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public SPAN<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public SPAN<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<SPAN<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<SPAN<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public SPAN<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public SPAN<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<SPAN<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<SPAN<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public SPAN<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public SPAN<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<SPAN<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<SPAN<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<SPAN<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public SPAN<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public SPAN<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<SPAN<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<SPAN<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public SPAN<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<SPAN<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<SPAN<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<SPAN<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<SPAN<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<SPAN<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public SPAN<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public SPAN<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<SPAN<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<SPAN<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public SPAN<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public SPAN<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<SPAN<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<SPAN<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<SPAN<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public SPAN<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public SPAN<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<SPAN<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<SPAN<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<SPAN<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<SPAN<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public SPAN<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<SPAN<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<SPAN<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public SPAN<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public SPAN<SPAN<T>> span() {
            this.closeAttrs();
            return (SPAN<SPAN<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public SPAN<T> span(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN.span:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SPAN<T> span(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN.span:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SPAN<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.SCRIPT<SPAN<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<SPAN<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public SPAN<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<SPAN<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<SPAN<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public SPAN<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<SPAN<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<SPAN<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public SPAN<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<SPAN<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<SPAN<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public SPAN<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<SPAN<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<SPAN<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<SPAN<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SPAN<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<SPAN<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SPAN<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SPAN<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SPAN<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<SPAN<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public SPAN<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<SPAN<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<SPAN<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<SPAN<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public SPAN<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class SUP<T extends _> extends EImp<T> implements HamletSpec.SUP
    {
        public SUP(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SUP<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SUP<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SUP<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SUP<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SUP<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SUP<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SUP<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SUP<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SUP<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SUP<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SUP<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SUP<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SUP<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SUP<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SUP<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SUP<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public SUP<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public SUP<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<SUP<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<SUP<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public SUP<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public SUP<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<SUP<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<SUP<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public SUP<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public SUP<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<SUP<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<SUP<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public SUP<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public SUP<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public SUP<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<SUP<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<SUP<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public SUP<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<SUP<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<SUP<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public SUP<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public SUP<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<SUP<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<SUP<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public SUP<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public SUP<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<SUP<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<SUP<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public SUP<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public SUP<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public SUP<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<SUP<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<SUP<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public SUP<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<SUP<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<SUP<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public SUP<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public SUP<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<SUP<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<SUP<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public SUP<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public SUP<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<SUP<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<SUP<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public SUP<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public SUP<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<SUP<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<SUP<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public SUP<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public SUP<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<SUP<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<SUP<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<SUP<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public SUP<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public SUP<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<SUP<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<SUP<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public SUP<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<SUP<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<SUP<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<SUP<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<SUP<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<SUP<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public SUP<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public SUP<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public SUP<SUP<T>> sup() {
            this.closeAttrs();
            return (SUP<SUP<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public SUP<T> sup(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP.sup:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SUP<T> sup(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP.sup:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUP<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.MAP<SUP<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<SUP<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<SUP<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public SUP<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public SUP<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<SUP<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<SUP<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<SUP<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<SUP<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public SUP<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<SUP<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<SUP<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public SUP<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<SUP<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<SUP<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public SUP<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public SUP<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<SUP<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<SUP<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public SUP<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<SUP<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<SUP<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public SUP<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<SUP<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<SUP<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public SUP<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<SUP<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<SUP<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public SUP<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<SUP<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<SUP<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<SUP<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SUP<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<SUP<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SUP<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SUP<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SUP<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<SUP<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public SUP<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<SUP<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<SUP<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<SUP<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public SUP<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class SUB<T extends _> extends EImp<T> implements HamletSpec.SUB
    {
        public SUB(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SUB<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SUB<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SUB<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SUB<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SUB<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SUB<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SUB<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SUB<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SUB<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SUB<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SUB<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SUB<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SUB<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SUB<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SUB<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SUB<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public SUB<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public SUB<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<SUB<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<SUB<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public SUB<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public SUB<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<SUB<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<SUB<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public SUB<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public SUB<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<SUB<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<SUB<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public SUB<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public SUB<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public SUB<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<SUB<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<SUB<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public SUB<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<SUB<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<SUB<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public SUB<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public SUB<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<SUB<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<SUB<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public SUB<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public SUB<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<SUB<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<SUB<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public SUB<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public SUB<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public SUB<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<SUB<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<SUB<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public SUB<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<SUB<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<SUB<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public SUB<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public SUB<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<SUB<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<SUB<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public SUB<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public SUB<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<SUB<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<SUB<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public SUB<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public SUB<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<SUB<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<SUB<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public SUB<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public SUB<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<SUB<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<SUB<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<SUB<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public SUB<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public SUB<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<SUB<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<SUB<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public SUB<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<SUB<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<SUB<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<SUB<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public SUB<SUB<T>> sub() {
            this.closeAttrs();
            return (SUB<SUB<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public SUB<T> sub(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB.sub:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SUB<T> sub(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB.sub:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SUB<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.SUP<SUB<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<SUB<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public SUB<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public SUB<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<SUB<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<SUB<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<SUB<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public SUB<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public SUB<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<SUB<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<SUB<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<SUB<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<SUB<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public SUB<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<SUB<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<SUB<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public SUB<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<SUB<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<SUB<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public SUB<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public SUB<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<SUB<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<SUB<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public SUB<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<SUB<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<SUB<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public SUB<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<SUB<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<SUB<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public SUB<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<SUB<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<SUB<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public SUB<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<SUB<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<SUB<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<SUB<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SUB<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<SUB<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SUB<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SUB<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SUB<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<SUB<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public SUB<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<SUB<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<SUB<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<SUB<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public SUB<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class ACRONYM<T extends _> extends EImp<T> implements HamletSpec.ACRONYM
    {
        public ACRONYM(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public ACRONYM<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public ACRONYM<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public ACRONYM<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<ACRONYM<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<ACRONYM<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public ACRONYM<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<ACRONYM<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<ACRONYM<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public ACRONYM<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<ACRONYM<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<ACRONYM<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public ACRONYM<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<ACRONYM<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<ACRONYM<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public ACRONYM<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<ACRONYM<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<ACRONYM<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public ACRONYM<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<ACRONYM<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<ACRONYM<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public ACRONYM<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<ACRONYM<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<ACRONYM<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public ACRONYM<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<ACRONYM<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<ACRONYM<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public ACRONYM<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<ACRONYM<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<ACRONYM<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public ACRONYM<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<ACRONYM<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<ACRONYM<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public ACRONYM<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<ACRONYM<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<ACRONYM<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public ACRONYM<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<ACRONYM<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<ACRONYM<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public ACRONYM<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<ACRONYM<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<ACRONYM<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<ACRONYM<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public ACRONYM<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public ACRONYM<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<ACRONYM<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<ACRONYM<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public ACRONYM<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<ACRONYM<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<ACRONYM<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<ACRONYM<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<ACRONYM<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<ACRONYM<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public ACRONYM<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<ACRONYM<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<ACRONYM<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public ACRONYM<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<ACRONYM<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<ACRONYM<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<ACRONYM<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public ACRONYM<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<ACRONYM<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<ACRONYM<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<ACRONYM<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<ACRONYM<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public ACRONYM<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<ACRONYM<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<ACRONYM<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public ACRONYM<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<ACRONYM<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<ACRONYM<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public ACRONYM<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public ACRONYM<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<ACRONYM<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<ACRONYM<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public ACRONYM<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<ACRONYM<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<ACRONYM<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public ACRONYM<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<ACRONYM<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<ACRONYM<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public ACRONYM<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<ACRONYM<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<ACRONYM<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public ACRONYM<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<ACRONYM<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<ACRONYM<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<ACRONYM<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ACRONYM<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<ACRONYM<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ACRONYM<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ACRONYM<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ACRONYM<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<ACRONYM<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public ACRONYM<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<ACRONYM<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<ACRONYM<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<ACRONYM<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public ACRONYM<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class ABBR<T extends _> extends EImp<T> implements HamletSpec.ABBR
    {
        public ABBR(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public ABBR<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public ABBR<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public ABBR<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public ABBR<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public ABBR<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public ABBR<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public ABBR<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public ABBR<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public ABBR<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public ABBR<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<ABBR<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<ABBR<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public ABBR<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public ABBR<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<ABBR<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<ABBR<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public ABBR<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public ABBR<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<ABBR<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<ABBR<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public ABBR<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public ABBR<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public ABBR<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<ABBR<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<ABBR<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public ABBR<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<ABBR<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<ABBR<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public ABBR<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public ABBR<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<ABBR<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<ABBR<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public ABBR<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public ABBR<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<ABBR<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<ABBR<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public ABBR<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public ABBR<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public ABBR<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<ABBR<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<ABBR<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public ABBR<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<ABBR<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<ABBR<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public ABBR<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public ABBR<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<ABBR<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<ABBR<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public ABBR<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public ABBR<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<ABBR<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<ABBR<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public ABBR<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public ABBR<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public ABBR<ABBR<T>> abbr() {
            this.closeAttrs();
            return (ABBR<ABBR<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public ABBR<T> abbr(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR.abbr:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public ABBR<T> abbr(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR.abbr:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$ABBR<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.A<ABBR<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<ABBR<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<ABBR<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public ABBR<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public ABBR<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<ABBR<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<ABBR<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public ABBR<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<ABBR<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<ABBR<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<ABBR<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<ABBR<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<ABBR<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public ABBR<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public ABBR<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<ABBR<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<ABBR<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public ABBR<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public ABBR<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<ABBR<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<ABBR<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<ABBR<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public ABBR<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public ABBR<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<ABBR<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<ABBR<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<ABBR<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<ABBR<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public ABBR<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<ABBR<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<ABBR<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public ABBR<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<ABBR<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<ABBR<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public ABBR<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public ABBR<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<ABBR<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<ABBR<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public ABBR<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<ABBR<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<ABBR<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public ABBR<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<ABBR<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<ABBR<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public ABBR<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<ABBR<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<ABBR<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public ABBR<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<ABBR<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<ABBR<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<ABBR<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ABBR<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<ABBR<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<ABBR<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ABBR<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<ABBR<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<ABBR<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public ABBR<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<ABBR<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<ABBR<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<ABBR<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public ABBR<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class CITE<T extends _> extends EImp<T> implements HamletSpec.CITE
    {
        public CITE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public CITE<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public CITE<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public CITE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public CITE<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public CITE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public CITE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public CITE<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public CITE<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public CITE<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public CITE<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public CITE<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public CITE<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public CITE<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public CITE<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public CITE<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public CITE<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public CITE<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public CITE<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<CITE<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<CITE<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public CITE<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public CITE<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<CITE<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<CITE<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public CITE<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public CITE<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<CITE<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<CITE<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public CITE<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public CITE<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public CITE<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<CITE<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<CITE<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public CITE<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<CITE<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<CITE<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public CITE<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public CITE<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<CITE<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<CITE<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public CITE<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public CITE<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<CITE<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<CITE<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public CITE<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public CITE<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public CITE<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<CITE<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<CITE<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public CITE<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<CITE<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<CITE<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public CITE<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public CITE<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<CITE<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<CITE<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public CITE<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public CITE<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public CITE<CITE<T>> cite() {
            this.closeAttrs();
            return (CITE<CITE<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public CITE<T> cite(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE.cite:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public CITE<T> cite(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE.cite:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CITE<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.ABBR<CITE<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<CITE<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public CITE<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public CITE<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<CITE<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<CITE<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<CITE<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public CITE<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public CITE<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<CITE<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<CITE<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public CITE<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<CITE<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<CITE<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<CITE<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<CITE<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<CITE<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public CITE<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public CITE<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<CITE<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<CITE<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public CITE<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public CITE<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<CITE<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<CITE<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<CITE<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public CITE<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public CITE<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<CITE<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<CITE<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<CITE<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<CITE<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public CITE<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<CITE<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<CITE<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public CITE<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<CITE<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<CITE<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public CITE<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public CITE<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<CITE<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<CITE<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public CITE<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<CITE<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<CITE<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public CITE<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<CITE<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<CITE<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public CITE<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<CITE<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<CITE<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public CITE<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<CITE<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<CITE<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<CITE<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CITE<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<CITE<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CITE<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CITE<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CITE<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<CITE<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public CITE<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<CITE<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<CITE<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<CITE<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public CITE<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class VAR<T extends _> extends EImp<T> implements HamletSpec.VAR
    {
        public VAR(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public VAR<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public VAR<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public VAR<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public VAR<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public VAR<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public VAR<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public VAR<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public VAR<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public VAR<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public VAR<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public VAR<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public VAR<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public VAR<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public VAR<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public VAR<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public VAR<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public VAR<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public VAR<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<VAR<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<VAR<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public VAR<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public VAR<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<VAR<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<VAR<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public VAR<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public VAR<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<VAR<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<VAR<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public VAR<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public VAR<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public VAR<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<VAR<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<VAR<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public VAR<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<VAR<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<VAR<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public VAR<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public VAR<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<VAR<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<VAR<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public VAR<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public VAR<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<VAR<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<VAR<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public VAR<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public VAR<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public VAR<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<VAR<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<VAR<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public VAR<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<VAR<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<VAR<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public VAR<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public VAR<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public VAR<VAR<T>> var() {
            this.closeAttrs();
            return (VAR<VAR<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public VAR<T> var(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR.var:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public VAR<T> var(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR.var:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$VAR<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.CITE<VAR<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<VAR<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public VAR<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public VAR<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<VAR<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<VAR<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public VAR<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public VAR<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<VAR<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<VAR<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<VAR<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public VAR<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public VAR<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<VAR<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<VAR<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public VAR<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<VAR<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<VAR<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<VAR<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<VAR<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<VAR<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public VAR<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public VAR<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<VAR<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<VAR<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public VAR<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public VAR<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<VAR<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<VAR<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<VAR<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public VAR<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public VAR<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<VAR<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<VAR<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<VAR<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<VAR<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public VAR<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<VAR<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<VAR<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public VAR<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<VAR<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<VAR<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public VAR<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public VAR<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<VAR<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<VAR<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public VAR<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<VAR<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<VAR<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public VAR<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<VAR<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<VAR<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public VAR<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<VAR<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<VAR<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public VAR<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<VAR<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<VAR<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<VAR<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<VAR<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<VAR<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<VAR<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<VAR<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<VAR<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<VAR<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public VAR<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<VAR<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<VAR<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<VAR<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public VAR<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class KBD<T extends _> extends EImp<T> implements HamletSpec.KBD
    {
        public KBD(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public KBD<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public KBD<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public KBD<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public KBD<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public KBD<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public KBD<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public KBD<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public KBD<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public KBD<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public KBD<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public KBD<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public KBD<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public KBD<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public KBD<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public KBD<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public KBD<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public KBD<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public KBD<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<KBD<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<KBD<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public KBD<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public KBD<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<KBD<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<KBD<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public KBD<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public KBD<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<KBD<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<KBD<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public KBD<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public KBD<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public KBD<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<KBD<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<KBD<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public KBD<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<KBD<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<KBD<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public KBD<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public KBD<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<KBD<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<KBD<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public KBD<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public KBD<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<KBD<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<KBD<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public KBD<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public KBD<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public KBD<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<KBD<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<KBD<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public KBD<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public KBD<KBD<T>> kbd() {
            this.closeAttrs();
            return (KBD<KBD<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public KBD<T> kbd(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD.kbd:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public KBD<T> kbd(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD.kbd:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$KBD<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.VAR<KBD<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<KBD<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public KBD<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public KBD<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<KBD<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<KBD<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public KBD<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public KBD<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<KBD<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<KBD<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public KBD<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public KBD<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<KBD<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<KBD<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<KBD<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public KBD<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public KBD<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<KBD<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<KBD<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public KBD<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<KBD<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<KBD<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<KBD<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<KBD<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<KBD<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public KBD<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public KBD<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<KBD<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<KBD<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public KBD<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public KBD<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<KBD<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<KBD<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<KBD<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public KBD<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public KBD<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<KBD<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<KBD<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<KBD<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<KBD<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public KBD<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<KBD<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<KBD<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public KBD<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<KBD<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<KBD<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public KBD<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public KBD<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<KBD<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<KBD<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public KBD<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<KBD<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<KBD<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public KBD<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<KBD<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<KBD<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public KBD<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<KBD<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<KBD<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public KBD<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<KBD<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<KBD<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<KBD<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<KBD<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<KBD<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<KBD<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<KBD<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<KBD<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<KBD<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public KBD<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<KBD<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<KBD<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<KBD<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public KBD<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class SAMP<T extends _> extends EImp<T> implements HamletSpec.SAMP
    {
        public SAMP(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SAMP<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SAMP<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SAMP<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SAMP<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SAMP<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SAMP<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SAMP<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SAMP<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public SAMP<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public SAMP<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<SAMP<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<SAMP<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public SAMP<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public SAMP<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<SAMP<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<SAMP<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public SAMP<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public SAMP<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<SAMP<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<SAMP<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public SAMP<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public SAMP<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public SAMP<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<SAMP<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<SAMP<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public SAMP<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<SAMP<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<SAMP<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public SAMP<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public SAMP<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<SAMP<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<SAMP<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public SAMP<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public SAMP<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<SAMP<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<SAMP<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public SAMP<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public SAMP<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public SAMP<T> samp(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP.samp:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SAMP<SAMP<T>> samp() {
            this.closeAttrs();
            return (SAMP<SAMP<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public SAMP<T> samp(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP.samp:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SAMP<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.KBD<SAMP<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<SAMP<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public SAMP<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public SAMP<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<SAMP<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<SAMP<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public SAMP<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public SAMP<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<SAMP<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<SAMP<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public SAMP<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public SAMP<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<SAMP<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<SAMP<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public SAMP<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public SAMP<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<SAMP<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<SAMP<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<SAMP<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public SAMP<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public SAMP<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<SAMP<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<SAMP<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public SAMP<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<SAMP<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<SAMP<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<SAMP<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<SAMP<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<SAMP<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public SAMP<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public SAMP<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<SAMP<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<SAMP<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public SAMP<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public SAMP<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<SAMP<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<SAMP<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<SAMP<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public SAMP<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public SAMP<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<SAMP<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<SAMP<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<SAMP<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<SAMP<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public SAMP<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<SAMP<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<SAMP<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public SAMP<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<SAMP<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<SAMP<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public SAMP<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public SAMP<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<SAMP<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<SAMP<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public SAMP<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<SAMP<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<SAMP<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public SAMP<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<SAMP<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<SAMP<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public SAMP<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<SAMP<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<SAMP<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public SAMP<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<SAMP<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<SAMP<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<SAMP<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SAMP<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<SAMP<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SAMP<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SAMP<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SAMP<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<SAMP<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public SAMP<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<SAMP<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<SAMP<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<SAMP<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public SAMP<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class CODE<T extends _> extends EImp<T> implements HamletSpec.CODE
    {
        public CODE(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public CODE<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public CODE<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public CODE<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public CODE<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public CODE<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public CODE<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public CODE<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public CODE<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public CODE<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public CODE<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public CODE<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public CODE<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public CODE<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public CODE<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public CODE<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public CODE<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public CODE<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public CODE<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<CODE<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<CODE<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public CODE<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public CODE<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<CODE<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<CODE<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public CODE<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public CODE<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<CODE<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<CODE<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public CODE<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public CODE<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public CODE<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<CODE<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<CODE<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public CODE<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<CODE<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<CODE<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public CODE<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public CODE<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<CODE<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<CODE<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public CODE<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public CODE<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public CODE<CODE<T>> code() {
            this.closeAttrs();
            return (CODE<CODE<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public CODE<T> code(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE.code:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public CODE<T> code(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE.code:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$CODE<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public CODE<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<CODE<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<CODE<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public CODE<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<CODE<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<CODE<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public CODE<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public CODE<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<CODE<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<CODE<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public CODE<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public CODE<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<CODE<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<CODE<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public CODE<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public CODE<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<CODE<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<CODE<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public CODE<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public CODE<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<CODE<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<CODE<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<CODE<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public CODE<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public CODE<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<CODE<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<CODE<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public CODE<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<CODE<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<CODE<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<CODE<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<CODE<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<CODE<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public CODE<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public CODE<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<CODE<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<CODE<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public CODE<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public CODE<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<CODE<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<CODE<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<CODE<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public CODE<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public CODE<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<CODE<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<CODE<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<CODE<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<CODE<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public CODE<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<CODE<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<CODE<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public CODE<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<CODE<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<CODE<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public CODE<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public CODE<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<CODE<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<CODE<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public CODE<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<CODE<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<CODE<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public CODE<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<CODE<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<CODE<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public CODE<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<CODE<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<CODE<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public CODE<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<CODE<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<CODE<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<CODE<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CODE<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<CODE<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<CODE<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CODE<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<CODE<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<CODE<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public CODE<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<CODE<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<CODE<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<CODE<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public CODE<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class DFN<T extends _> extends EImp<T> implements HamletSpec.DFN
    {
        public DFN(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public DFN<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public DFN<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public DFN<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public DFN<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public DFN<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public DFN<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public DFN<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public DFN<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public DFN<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public DFN<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public DFN<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public DFN<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public DFN<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public DFN<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public DFN<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public DFN<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public DFN<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public DFN<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<DFN<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<DFN<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public DFN<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public DFN<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<DFN<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<DFN<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public DFN<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public DFN<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<DFN<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<DFN<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public DFN<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public DFN<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public DFN<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<DFN<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<DFN<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public DFN<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<DFN<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<DFN<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public DFN<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public DFN<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public DFN<DFN<T>> dfn() {
            this.closeAttrs();
            return (DFN<DFN<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public DFN<T> dfn(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN.dfn:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public DFN<T> dfn(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN.dfn:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$DFN<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.CODE<DFN<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<DFN<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public DFN<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public DFN<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public DFN<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<DFN<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<DFN<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public DFN<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<DFN<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<DFN<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public DFN<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public DFN<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<DFN<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<DFN<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public DFN<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public DFN<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<DFN<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<DFN<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public DFN<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public DFN<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<DFN<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<DFN<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public DFN<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public DFN<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<DFN<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<DFN<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<DFN<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public DFN<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public DFN<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<DFN<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<DFN<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public DFN<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<DFN<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<DFN<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<DFN<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<DFN<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<DFN<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public DFN<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public DFN<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<DFN<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<DFN<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public DFN<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public DFN<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<DFN<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<DFN<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<DFN<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public DFN<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public DFN<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<DFN<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<DFN<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<DFN<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<DFN<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public DFN<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<DFN<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<DFN<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public DFN<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<DFN<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<DFN<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public DFN<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public DFN<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<DFN<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<DFN<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public DFN<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<DFN<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<DFN<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public DFN<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<DFN<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<DFN<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public DFN<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<DFN<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<DFN<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public DFN<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<DFN<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<DFN<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<DFN<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DFN<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<DFN<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<DFN<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DFN<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<DFN<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<DFN<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public DFN<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<DFN<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<DFN<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<DFN<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public DFN<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class STRONG<T extends _> extends EImp<T> implements HamletSpec.STRONG
    {
        public STRONG(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public STRONG<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public STRONG<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public STRONG<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public STRONG<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public STRONG<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public STRONG<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public STRONG<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public STRONG<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public STRONG<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public STRONG<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<STRONG<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<STRONG<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public STRONG<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public STRONG<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<STRONG<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<STRONG<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public STRONG<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public STRONG<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<STRONG<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<STRONG<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public STRONG<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public STRONG<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public STRONG<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<STRONG<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<STRONG<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public STRONG<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public STRONG<STRONG<T>> strong() {
            this.closeAttrs();
            return (STRONG<STRONG<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public STRONG<T> strong(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG.strong:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public STRONG<T> strong(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG.strong:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$STRONG<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.DFN<STRONG<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<STRONG<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public STRONG<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public STRONG<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<STRONG<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<STRONG<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public STRONG<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public STRONG<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public STRONG<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<STRONG<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<STRONG<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public STRONG<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<STRONG<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<STRONG<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public STRONG<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public STRONG<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<STRONG<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<STRONG<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public STRONG<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public STRONG<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<STRONG<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<STRONG<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public STRONG<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public STRONG<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<STRONG<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<STRONG<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public STRONG<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public STRONG<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<STRONG<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<STRONG<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<STRONG<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public STRONG<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public STRONG<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<STRONG<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<STRONG<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public STRONG<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<STRONG<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<STRONG<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<STRONG<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<STRONG<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<STRONG<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public STRONG<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public STRONG<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<STRONG<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<STRONG<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public STRONG<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public STRONG<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<STRONG<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<STRONG<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<STRONG<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public STRONG<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public STRONG<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<STRONG<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<STRONG<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<STRONG<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<STRONG<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public STRONG<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<STRONG<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<STRONG<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public STRONG<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<STRONG<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<STRONG<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public STRONG<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public STRONG<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<STRONG<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<STRONG<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public STRONG<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<STRONG<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<STRONG<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public STRONG<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<STRONG<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<STRONG<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public STRONG<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<STRONG<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<STRONG<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public STRONG<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<STRONG<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<STRONG<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<STRONG<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<STRONG<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<STRONG<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<STRONG<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<STRONG<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<STRONG<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<STRONG<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public STRONG<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<STRONG<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<STRONG<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<STRONG<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public STRONG<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class EM<T extends _> extends EImp<T> implements HamletSpec.EM
    {
        public EM(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public EM<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public EM<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public EM<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public EM<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public EM<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public EM<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public EM<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public EM<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public EM<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public EM<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public EM<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public EM<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public EM<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public EM<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public EM<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public EM<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public EM<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public EM<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<EM<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<EM<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public EM<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public EM<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<EM<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<EM<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public EM<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public EM<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<EM<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<EM<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public EM<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public EM<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public EM<T> em(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM.em:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public EM<EM<T>> em() {
            this.closeAttrs();
            return (EM<EM<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public EM<T> em(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM.em:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$EM<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.STRONG<EM<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<EM<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public EM<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public EM<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<EM<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<EM<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public EM<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public EM<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<EM<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<EM<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public EM<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public EM<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public EM<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<EM<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<EM<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public EM<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<EM<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<EM<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public EM<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public EM<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<EM<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<EM<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public EM<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public EM<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<EM<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<EM<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public EM<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public EM<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<EM<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<EM<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public EM<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public EM<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<EM<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<EM<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<EM<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public EM<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public EM<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<EM<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<EM<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public EM<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<EM<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<EM<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<EM<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<EM<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<EM<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public EM<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public EM<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<EM<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<EM<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public EM<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public EM<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<EM<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<EM<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<EM<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public EM<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public EM<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<EM<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<EM<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<EM<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<EM<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public EM<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<EM<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<EM<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public EM<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<EM<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<EM<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public EM<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public EM<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<EM<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<EM<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public EM<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<EM<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<EM<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public EM<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<EM<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<EM<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public EM<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<EM<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<EM<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public EM<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<EM<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<EM<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<EM<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<EM<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<EM<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<EM<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<EM<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<EM<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<EM<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public EM<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<EM<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<EM<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<EM<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public EM<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class SMALL<T extends _> extends EImp<T> implements HamletSpec.SMALL
    {
        public SMALL(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public SMALL<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public SMALL<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public SMALL<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public SMALL<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public SMALL<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public SMALL<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public SMALL<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public SMALL<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public SMALL<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public SMALL<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<SMALL<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<SMALL<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public SMALL<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public SMALL<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.I<SMALL<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<SMALL<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public SMALL<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public SMALL<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public SMALL<SMALL<T>> small() {
            this.closeAttrs();
            return (SMALL<SMALL<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public SMALL<T> small(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL.small:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SMALL<T> small(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL.small:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$SMALL<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public SMALL<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<SMALL<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<SMALL<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public SMALL<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<SMALL<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<SMALL<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public SMALL<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public SMALL<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<SMALL<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<SMALL<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public SMALL<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public SMALL<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<SMALL<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<SMALL<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public SMALL<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public SMALL<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public SMALL<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<SMALL<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<SMALL<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public SMALL<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<SMALL<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<SMALL<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public SMALL<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public SMALL<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<SMALL<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<SMALL<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public SMALL<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public SMALL<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<SMALL<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<SMALL<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public SMALL<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public SMALL<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<SMALL<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<SMALL<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public SMALL<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public SMALL<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<SMALL<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<SMALL<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<SMALL<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public SMALL<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public SMALL<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<SMALL<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<SMALL<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public SMALL<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<SMALL<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<SMALL<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<SMALL<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<SMALL<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<SMALL<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public SMALL<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public SMALL<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<SMALL<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<SMALL<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public SMALL<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public SMALL<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<SMALL<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<SMALL<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<SMALL<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public SMALL<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public SMALL<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<SMALL<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<SMALL<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<SMALL<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<SMALL<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public SMALL<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<SMALL<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<SMALL<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public SMALL<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<SMALL<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<SMALL<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public SMALL<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public SMALL<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<SMALL<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<SMALL<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public SMALL<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<SMALL<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<SMALL<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public SMALL<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<SMALL<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<SMALL<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public SMALL<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<SMALL<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<SMALL<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public SMALL<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<SMALL<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<SMALL<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<SMALL<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SMALL<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<SMALL<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<SMALL<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SMALL<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<SMALL<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<SMALL<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public SMALL<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<SMALL<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<SMALL<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<SMALL<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public SMALL<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class B<T extends _> extends EImp<T> implements HamletSpec.B
    {
        public B(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public B<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public B<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public B<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public B<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public B<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public B<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public B<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public B<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public B<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public B<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public B<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public B<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public B<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public B<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public B<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public B<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public B<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public B<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public B<B<T>> b() {
            this.closeAttrs();
            return (B<B<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public B<T> b(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B.b:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public B<T> b(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B.b:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$B._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$B<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.I<B<T>> i() {
            this.closeAttrs();
            return (Hamlet.I<B<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public B<T> i(final String cdata) {
            return this.i()._(cdata)._();
        }
        
        @Override
        public B<T> i(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.i(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SMALL<B<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<B<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public B<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public B<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public B<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<B<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<B<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public B<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<B<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<B<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public B<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public B<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<B<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<B<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public B<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public B<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<B<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<B<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public B<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public B<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public B<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<B<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<B<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public B<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<B<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<B<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public B<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public B<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<B<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<B<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public B<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public B<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<B<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<B<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public B<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public B<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<B<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<B<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public B<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public B<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<B<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<B<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<B<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public B<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public B<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<B<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<B<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public B<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<B<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<B<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<B<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<B<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<B<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public B<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public B<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<B<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<B<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public B<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public B<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<B<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<B<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<B<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public B<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public B<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<B<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<B<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<B<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<B<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public B<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<B<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<B<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public B<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<B<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<B<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public B<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public B<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<B<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<B<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public B<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<B<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<B<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public B<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<B<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<B<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public B<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<B<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<B<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public B<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<B<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<B<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<B<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<B<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<B<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<B<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<B<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<B<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<B<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public B<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<B<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<B<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<B<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public B<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
    
    public class I<T extends _> extends EImp<T> implements HamletSpec.I
    {
        public I(final String name, final T parent, final EnumSet<EOpt> opts) {
            super(name, parent, opts);
        }
        
        @Override
        public I<T> $id(final String value) {
            this.addAttr("id", value);
            return this;
        }
        
        @Override
        public I<T> $class(final String value) {
            this.addAttr("class", value);
            return this;
        }
        
        @Override
        public I<T> $title(final String value) {
            this.addAttr("title", value);
            return this;
        }
        
        @Override
        public I<T> $style(final String value) {
            this.addAttr("style", value);
            return this;
        }
        
        @Override
        public I<T> $lang(final String value) {
            this.addAttr("lang", value);
            return this;
        }
        
        @Override
        public I<T> $dir(final Dir value) {
            this.addAttr("dir", value);
            return this;
        }
        
        @Override
        public I<T> $onclick(final String value) {
            this.addAttr("onclick", value);
            return this;
        }
        
        @Override
        public I<T> $ondblclick(final String value) {
            this.addAttr("ondblclick", value);
            return this;
        }
        
        @Override
        public I<T> $onmousedown(final String value) {
            this.addAttr("onmousedown", value);
            return this;
        }
        
        @Override
        public I<T> $onmouseup(final String value) {
            this.addAttr("onmouseup", value);
            return this;
        }
        
        @Override
        public I<T> $onmouseover(final String value) {
            this.addAttr("onmouseover", value);
            return this;
        }
        
        @Override
        public I<T> $onmousemove(final String value) {
            this.addAttr("onmousemove", value);
            return this;
        }
        
        @Override
        public I<T> $onmouseout(final String value) {
            this.addAttr("onmouseout", value);
            return this;
        }
        
        @Override
        public I<T> $onkeypress(final String value) {
            this.addAttr("onkeypress", value);
            return this;
        }
        
        @Override
        public I<T> $onkeydown(final String value) {
            this.addAttr("onkeydown", value);
            return this;
        }
        
        @Override
        public I<T> $onkeyup(final String value) {
            this.addAttr("onkeyup", value);
            return this;
        }
        
        @Override
        public I<T> _(final Object... lines) {
            this._p(true, lines);
            return this;
        }
        
        @Override
        public I<T> _r(final Object... lines) {
            this._p(false, lines);
            return this;
        }
        
        @Override
        public Hamlet.B<I<T>> b() {
            this.closeAttrs();
            return (Hamlet.B<I<T>>)Hamlet.this.b_(this, true);
        }
        
        @Override
        public I<T> b(final String cdata) {
            return this.b()._(cdata)._();
        }
        
        @Override
        public I<T> b(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.b(), selector)._(cdata)._();
        }
        
        @Override
        public I<I<T>> i() {
            this.closeAttrs();
            return (I<I<T>>)Hamlet.this.i_(this, true);
        }
        
        @Override
        public I<T> i(final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I.i:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //     4: iconst_1       
            //     5: anewarray       Ljava/lang/Object;
            //     8: dup            
            //     9: iconst_0       
            //    10: aload_1         /* cdata */
            //    11: aastore        
            //    12: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //    15: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    18: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //    21: areturn        
            //    Signature:
            //  (Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitMethod(TypeSubstitutionVisitor.java:276)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2591)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.invalidateDependentExpressions(TypeAnalysis.java:759)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1011)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public I<T> i(final String selector, final String cdata) {
            // 
            // This method could not be decompiled.
            // 
            // Original Bytecode:
            // 
            //     1: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I.i:()Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //     4: aload_1         /* selector */
            //     5: invokestatic    org/apache/hadoop/yarn/webapp/hamlet/HamletImpl.setSelector:(Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$CoreAttrs;
            //     8: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //    11: iconst_1       
            //    12: anewarray       Ljava/lang/Object;
            //    15: dup            
            //    16: iconst_0       
            //    17: aload_2         /* cdata */
            //    18: aastore        
            //    19: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I._:([Ljava/lang/Object;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //    22: invokevirtual   org/apache/hadoop/yarn/webapp/hamlet/Hamlet$I._:()Lorg/apache/hadoop/yarn/webapp/hamlet/HamletSpec$_;
            //    25: checkcast       Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I;
            //    28: areturn        
            //    Signature:
            //  (Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/yarn/webapp/hamlet/Hamlet$I<TT;>;
            // 
            // The error that occurred was:
            // 
            // java.lang.UnsupportedOperationException: The requested operation is not supported.
            //     at com.strobel.util.ContractUtils.unsupported(ContractUtils.java:27)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:276)
            //     at com.strobel.assembler.metadata.TypeReference.getRawType(TypeReference.java:271)
            //     at com.strobel.assembler.metadata.TypeReference.makeGenericType(TypeReference.java:150)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:187)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:173)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visitParameterizedType(TypeSubstitutionVisitor.java:25)
            //     at com.strobel.assembler.metadata.ParameterizedType.accept(ParameterizedType.java:103)
            //     at com.strobel.assembler.metadata.TypeSubstitutionVisitor.visit(TypeSubstitutionVisitor.java:39)
            //     at com.strobel.assembler.metadata.MetadataHelper.substituteGenericArguments(MetadataHelper.java:1100)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2676)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2669)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1656)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypesForVariables(TypeAnalysis.java:586)
            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:397)
            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:576)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
            // 
            throw new IllegalStateException("An error occurred while decompiling this method.");
        }
        
        @Override
        public Hamlet.SMALL<I<T>> small() {
            this.closeAttrs();
            return (Hamlet.SMALL<I<T>>)Hamlet.this.small_(this, true);
        }
        
        @Override
        public I<T> small(final String cdata) {
            return this.small()._(cdata)._();
        }
        
        @Override
        public I<T> small(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.small(), selector)._(cdata)._();
        }
        
        @Override
        public I<T> em(final String cdata) {
            return this.em()._(cdata)._();
        }
        
        @Override
        public Hamlet.EM<I<T>> em() {
            this.closeAttrs();
            return (Hamlet.EM<I<T>>)Hamlet.this.em_(this, true);
        }
        
        @Override
        public I<T> em(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.em(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.STRONG<I<T>> strong() {
            this.closeAttrs();
            return (Hamlet.STRONG<I<T>>)Hamlet.this.strong_(this, true);
        }
        
        @Override
        public I<T> strong(final String cdata) {
            return this.strong()._(cdata)._();
        }
        
        @Override
        public I<T> strong(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.strong(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.DFN<I<T>> dfn() {
            this.closeAttrs();
            return (Hamlet.DFN<I<T>>)Hamlet.this.dfn_(this, true);
        }
        
        @Override
        public I<T> dfn(final String cdata) {
            return this.dfn()._(cdata)._();
        }
        
        @Override
        public I<T> dfn(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.dfn(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CODE<I<T>> code() {
            this.closeAttrs();
            return (Hamlet.CODE<I<T>>)Hamlet.this.code_(this, true);
        }
        
        @Override
        public I<T> code(final String cdata) {
            return this.code()._(cdata)._();
        }
        
        @Override
        public I<T> code(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.code(), selector)._(cdata)._();
        }
        
        @Override
        public I<T> samp(final String cdata) {
            return this.samp()._(cdata)._();
        }
        
        @Override
        public Hamlet.SAMP<I<T>> samp() {
            this.closeAttrs();
            return (Hamlet.SAMP<I<T>>)Hamlet.this.samp_(this, true);
        }
        
        @Override
        public I<T> samp(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.samp(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.KBD<I<T>> kbd() {
            this.closeAttrs();
            return (Hamlet.KBD<I<T>>)Hamlet.this.kbd_(this, true);
        }
        
        @Override
        public I<T> kbd(final String cdata) {
            return this.kbd()._(cdata)._();
        }
        
        @Override
        public I<T> kbd(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.kbd(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.VAR<I<T>> var() {
            this.closeAttrs();
            return (Hamlet.VAR<I<T>>)Hamlet.this.var_(this, true);
        }
        
        @Override
        public I<T> var(final String cdata) {
            return this.var()._(cdata)._();
        }
        
        @Override
        public I<T> var(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.var(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.CITE<I<T>> cite() {
            this.closeAttrs();
            return (Hamlet.CITE<I<T>>)Hamlet.this.cite_(this, true);
        }
        
        @Override
        public I<T> cite(final String cdata) {
            return this.cite()._(cdata)._();
        }
        
        @Override
        public I<T> cite(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.cite(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.ABBR<I<T>> abbr() {
            this.closeAttrs();
            return (Hamlet.ABBR<I<T>>)Hamlet.this.abbr_(this, true);
        }
        
        @Override
        public I<T> abbr(final String cdata) {
            return this.abbr()._(cdata)._();
        }
        
        @Override
        public I<T> abbr(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.abbr(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.A<I<T>> a() {
            this.closeAttrs();
            return (Hamlet.A<I<T>>)Hamlet.this.a_(this, true);
        }
        
        @Override
        public Hamlet.A<I<T>> a(final String selector) {
            return HamletImpl.setSelector(this.a(), selector);
        }
        
        @Override
        public I<T> a(final String href, final String anchorText) {
            return this.a().$href(href)._(anchorText)._();
        }
        
        @Override
        public I<T> a(final String selector, final String href, final String anchorText) {
            return HamletImpl.setSelector(this.a(), selector).$href(href)._(anchorText)._();
        }
        
        @Override
        public Hamlet.IMG<I<T>> img() {
            this.closeAttrs();
            return (Hamlet.IMG<I<T>>)Hamlet.this.img_(this, true);
        }
        
        @Override
        public I<T> img(final String src) {
            return this.img().$src(src)._();
        }
        
        @Override
        public Hamlet.OBJECT<I<T>> object() {
            this.closeAttrs();
            return (Hamlet.OBJECT<I<T>>)Hamlet.this.object_(this, true);
        }
        
        @Override
        public Hamlet.OBJECT<I<T>> object(final String selector) {
            return HamletImpl.setSelector(this.object(), selector);
        }
        
        @Override
        public Hamlet.SUB<I<T>> sub() {
            this.closeAttrs();
            return (Hamlet.SUB<I<T>>)Hamlet.this.sub_(this, true);
        }
        
        @Override
        public I<T> sub(final String cdata) {
            return this.sub()._(cdata)._();
        }
        
        @Override
        public I<T> sub(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sub(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SUP<I<T>> sup() {
            this.closeAttrs();
            return (Hamlet.SUP<I<T>>)Hamlet.this.sup_(this, true);
        }
        
        @Override
        public I<T> sup(final String cdata) {
            return this.sup()._(cdata)._();
        }
        
        @Override
        public I<T> sup(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.sup(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.MAP<I<T>> map() {
            this.closeAttrs();
            return (Hamlet.MAP<I<T>>)Hamlet.this.map_(this, true);
        }
        
        @Override
        public Hamlet.MAP<I<T>> map(final String selector) {
            return HamletImpl.setSelector(this.map(), selector);
        }
        
        @Override
        public I<T> q(final String cdata) {
            return this.q()._(cdata)._();
        }
        
        @Override
        public I<T> q(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.q(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.Q<I<T>> q() {
            this.closeAttrs();
            return (Hamlet.Q<I<T>>)Hamlet.this.q_(this, true);
        }
        
        @Override
        public Hamlet.BR<I<T>> br() {
            this.closeAttrs();
            return (Hamlet.BR<I<T>>)Hamlet.this.br_(this, true);
        }
        
        @Override
        public I<T> br(final String selector) {
            return HamletImpl.setSelector(this.br(), selector)._();
        }
        
        @Override
        public Hamlet.BDO<I<T>> bdo() {
            this.closeAttrs();
            return (Hamlet.BDO<I<T>>)Hamlet.this.bdo_(this, true);
        }
        
        @Override
        public I<T> bdo(final Dir dir, final String cdata) {
            return this.bdo().$dir(dir)._(cdata)._();
        }
        
        @Override
        public Hamlet.SPAN<I<T>> span() {
            this.closeAttrs();
            return (Hamlet.SPAN<I<T>>)Hamlet.this.span_(this, true);
        }
        
        @Override
        public I<T> span(final String cdata) {
            return this.span()._(cdata)._();
        }
        
        @Override
        public I<T> span(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.span(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.SCRIPT<I<T>> script() {
            this.closeAttrs();
            return (Hamlet.SCRIPT<I<T>>)Hamlet.this.script_(this, true);
        }
        
        @Override
        public I<T> script(final String src) {
            return HamletImpl.setScriptSrc(this.script(), src)._();
        }
        
        @Override
        public Hamlet.INS<I<T>> ins() {
            this.closeAttrs();
            return (Hamlet.INS<I<T>>)Hamlet.this.ins_(this, true);
        }
        
        @Override
        public I<T> ins(final String cdata) {
            return this.ins()._(cdata)._();
        }
        
        @Override
        public Hamlet.DEL<I<T>> del() {
            this.closeAttrs();
            return (Hamlet.DEL<I<T>>)Hamlet.this.del_(this, true);
        }
        
        @Override
        public I<T> del(final String cdata) {
            return this.del()._(cdata)._();
        }
        
        @Override
        public Hamlet.LABEL<I<T>> label() {
            this.closeAttrs();
            return (Hamlet.LABEL<I<T>>)Hamlet.this.label_(this, true);
        }
        
        @Override
        public I<T> label(final String forId, final String cdata) {
            return this.label().$for(forId)._(cdata)._();
        }
        
        @Override
        public Hamlet.INPUT<I<T>> input(final String selector) {
            return HamletImpl.setSelector(this.input(), selector);
        }
        
        @Override
        public Hamlet.INPUT<I<T>> input() {
            this.closeAttrs();
            return (Hamlet.INPUT<I<T>>)Hamlet.this.input_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<I<T>> select() {
            this.closeAttrs();
            return (Hamlet.SELECT<I<T>>)Hamlet.this.select_(this, true);
        }
        
        @Override
        public Hamlet.SELECT<I<T>> select(final String selector) {
            return HamletImpl.setSelector(this.select(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<I<T>> textarea(final String selector) {
            return HamletImpl.setSelector(this.textarea(), selector);
        }
        
        @Override
        public Hamlet.TEXTAREA<I<T>> textarea() {
            this.closeAttrs();
            return (Hamlet.TEXTAREA<I<T>>)Hamlet.this.textarea_(this, true);
        }
        
        @Override
        public I<T> textarea(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.textarea(), selector)._(cdata)._();
        }
        
        @Override
        public Hamlet.BUTTON<I<T>> button() {
            this.closeAttrs();
            return (Hamlet.BUTTON<I<T>>)Hamlet.this.button_(this, true);
        }
        
        @Override
        public Hamlet.BUTTON<I<T>> button(final String selector) {
            return HamletImpl.setSelector(this.button(), selector);
        }
        
        @Override
        public I<T> button(final String selector, final String cdata) {
            return HamletImpl.setSelector(this.button(), selector)._(cdata)._();
        }
    }
}
