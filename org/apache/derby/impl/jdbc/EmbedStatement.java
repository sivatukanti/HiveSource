// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.derby.impl.jdbc;

import java.util.Arrays;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.util.InterruptStatus;
import java.sql.SQLException;
import org.apache.derby.iapi.sql.ParameterValueSet;
import java.util.Vector;
import java.sql.SQLWarning;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import java.sql.ResultSet;
import java.sql.Connection;
import org.apache.derby.iapi.jdbc.EngineStatement;

public class EmbedStatement extends ConnectionChild implements EngineStatement
{
    private final Connection applicationConnection;
    protected EngineStatement applicationStatement;
    long updateCount;
    EmbedResultSet results;
    private ResultSet autoGeneratedKeysResultSet;
    private String cursorName;
    private final boolean forMetaData;
    final int resultSetType;
    final int resultSetConcurrency;
    private final int resultSetHoldability;
    final LanguageConnectionContext lcc;
    private SQLWarning warnings;
    String SQLText;
    private int fetchSize;
    private int fetchDirection;
    int MaxFieldSize;
    long timeoutMillis;
    private boolean active;
    Vector batchStatements;
    long maxRows;
    private ParameterValueSet pvs;
    protected boolean isPoolable;
    private boolean closeOnCompletion;
    private boolean closingResultSets;
    private EmbedResultSet[] dynamicResults;
    private int currentDynamicResultSet;
    
    public EmbedStatement(final EmbedConnection embedConnection, final boolean forMetaData, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        super(embedConnection);
        this.updateCount = -1L;
        this.fetchSize = 1;
        this.fetchDirection = 1000;
        this.active = true;
        this.isPoolable = false;
        this.closeOnCompletion = false;
        this.closingResultSets = false;
        this.forMetaData = forMetaData;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.lcc = this.getEmbedConnection().getLanguageConnection();
        this.applicationConnection = this.getEmbedConnection().getApplicationConnection();
        this.applicationStatement = this;
    }
    
    public ResultSet executeQuery(final String s) throws SQLException {
        this.execute(s, true, false, 2, null, null);
        return this.results;
    }
    
    public int executeUpdate(final String s) throws SQLException {
        return (int)this.executeLargeUpdate(s);
    }
    
    public long executeLargeUpdate(final String s) throws SQLException {
        this.execute(s, false, true, 2, null, null);
        return this.updateCount;
    }
    
    public int executeUpdate(final String s, final int n) throws SQLException {
        return (int)this.executeLargeUpdate(s, n);
    }
    
    public long executeLargeUpdate(final String s, final int n) throws SQLException {
        this.execute(s, false, true, n, null, null);
        return this.updateCount;
    }
    
    public int executeUpdate(final String s, final int[] array) throws SQLException {
        return (int)this.executeLargeUpdate(s, array);
    }
    
    public long executeLargeUpdate(final String s, final int[] array) throws SQLException {
        this.execute(s, false, true, (array == null || array.length == 0) ? 2 : 1, array, null);
        return this.updateCount;
    }
    
    public int executeUpdate(final String s, final String[] array) throws SQLException {
        return (int)this.executeLargeUpdate(s, array);
    }
    
    public long executeLargeUpdate(final String s, final String[] array) throws SQLException {
        this.execute(s, false, true, (array == null || array.length == 0) ? 2 : 1, null, array);
        return this.updateCount;
    }
    
    final void checkIfInMiddleOfBatch() throws SQLException {
        if (this.batchStatements != null) {
            throw this.newSQLException("XJ068.S");
        }
    }
    
    public boolean isClosed() throws SQLException {
        if (this.active) {
            try {
                this.checkExecStatus();
            }
            catch (SQLException ex) {}
        }
        return !this.active;
    }
    
    public final void close() throws SQLException {
        if (!this.active) {
            return;
        }
        synchronized (this.getConnectionSynchronization()) {
            this.closeActions();
            this.active = false;
            this.clearResultSets();
            this.cursorName = null;
            this.warnings = null;
            this.SQLText = null;
            this.batchStatements = null;
        }
    }
    
    protected void finalize() throws Throwable {
        super.finalize();
        if (this.results != null && this.results.singleUseActivation != null) {
            this.results.singleUseActivation.markUnused();
        }
    }
    
    void closeActions() throws SQLException {
    }
    
    public int getMaxFieldSize() throws SQLException {
        this.checkStatus();
        return this.MaxFieldSize;
    }
    
    public void setMaxFieldSize(final int n) throws SQLException {
        this.checkStatus();
        if (n < 0) {
            throw this.newSQLException("XJ066.S", new Integer(n));
        }
        this.MaxFieldSize = n;
    }
    
    public int getMaxRows() throws SQLException {
        return (int)this.getLargeMaxRows();
    }
    
    public long getLargeMaxRows() throws SQLException {
        this.checkStatus();
        return this.maxRows;
    }
    
    public void setMaxRows(final int n) throws SQLException {
        this.setLargeMaxRows(n);
    }
    
    public void setLargeMaxRows(final long n) throws SQLException {
        this.checkStatus();
        if (n < 0L) {
            throw this.newSQLException("XJ063.S", new Long(n));
        }
        this.maxRows = n;
    }
    
    public void setEscapeProcessing(final boolean b) throws SQLException {
        this.checkStatus();
    }
    
    public final int getQueryTimeout() throws SQLException {
        this.checkStatus();
        return (int)(this.timeoutMillis / 1000L);
    }
    
    public final void setQueryTimeout(final int value) throws SQLException {
        this.checkStatus();
        if (value < 0) {
            throw this.newSQLException("XJ074.S", new Integer(value));
        }
        this.timeoutMillis = value * 1000L;
    }
    
    public void cancel() throws SQLException {
        throw Util.notImplemented("cancel");
    }
    
    public SQLWarning getWarnings() throws SQLException {
        this.checkStatus();
        return this.warnings;
    }
    
    public void clearWarnings() throws SQLException {
        this.checkStatus();
        this.warnings = null;
    }
    
    public void setCursorName(final String cursorName) throws SQLException {
        this.checkStatus();
        this.cursorName = cursorName;
    }
    
    public boolean execute(final String s) throws SQLException {
        return this.execute(s, false, false, 2, null, null);
    }
    
    private boolean execute(final String sqlText, final boolean b, final boolean b2, final int n, final int[] array, final String[] array2) throws SQLException {
        synchronized (this.getConnectionSynchronization()) {
            this.checkExecStatus();
            if (sqlText == null) {
                throw this.newSQLException("XJ067.S");
            }
            this.checkIfInMiddleOfBatch();
            this.clearResultSets();
            this.setupContextStack();
            this.SQLText = sqlText;
            try {
                Activation activation;
                try {
                    activation = this.lcc.prepareInternalStatement(this.lcc.getDefaultSchema(), sqlText, this.resultSetConcurrency == 1007, false).getActivation(this.lcc, this.resultSetType == 1004);
                    this.checkRequiresCallableStatement(activation);
                    InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
                }
                catch (Throwable t) {
                    throw this.handleException(t);
                }
                activation.setSingleExecution();
                if (n == 1) {
                    activation.setAutoGeneratedKeysResultsetInfo(array, array2);
                }
                return this.executeStatement(activation, b, b2);
            }
            finally {
                this.restoreContextStack();
            }
        }
    }
    
    public boolean execute(final String s, final int n) throws SQLException {
        return this.execute(s, false, false, n, null, null);
    }
    
    public boolean execute(final String s, final int[] array) throws SQLException {
        return this.execute(s, false, true, (array == null || array.length == 0) ? 2 : 1, array, null);
    }
    
    public boolean execute(final String s, final String[] array) throws SQLException {
        return this.execute(s, false, true, (array == null || array.length == 0) ? 2 : 1, null, array);
    }
    
    public final ResultSet getResultSet() throws SQLException {
        this.checkStatus();
        return this.results;
    }
    
    public final int getUpdateCount() throws SQLException {
        this.checkStatus();
        return (int)this.updateCount;
    }
    
    public final long getLargeUpdateCount() throws SQLException {
        this.checkStatus();
        return this.updateCount;
    }
    
    public final boolean getMoreResults() throws SQLException {
        return this.getMoreResults(3);
    }
    
    public final int getResultSetType() throws SQLException {
        this.checkStatus();
        return this.resultSetType;
    }
    
    public void setFetchDirection(final int n) throws SQLException {
        this.checkStatus();
        if (n == 1000 || n == 1001 || n == 1002) {
            this.fetchDirection = n;
            return;
        }
        throw this.newSQLException("XJ064.S", new Integer(n));
    }
    
    public int getFetchDirection() throws SQLException {
        this.checkStatus();
        return this.fetchDirection;
    }
    
    public void setFetchSize(final int n) throws SQLException {
        this.checkStatus();
        if (n < 0 || (this.getMaxRows() != 0 && n > this.getMaxRows())) {
            throw this.newSQLException("XJ065.S", new Integer(n));
        }
        if (n > 0) {
            this.fetchSize = n;
        }
    }
    
    public int getFetchSize() throws SQLException {
        this.checkStatus();
        return this.fetchSize;
    }
    
    public int getResultSetConcurrency() throws SQLException {
        this.checkStatus();
        return this.resultSetConcurrency;
    }
    
    public final int getResultSetHoldability() throws SQLException {
        this.checkStatus();
        return this.resultSetHoldability;
    }
    
    public void addBatch(final String e) throws SQLException {
        this.checkStatus();
        synchronized (this.getConnectionSynchronization()) {
            if (this.batchStatements == null) {
                this.batchStatements = new Vector();
            }
            this.batchStatements.add(e);
        }
    }
    
    public final void clearBatch() throws SQLException {
        this.checkStatus();
        synchronized (this.getConnectionSynchronization()) {
            this.batchStatements = null;
        }
    }
    
    public int[] executeBatch() throws SQLException {
        return Util.squashLongs(this.executeLargeBatch());
    }
    
    public long[] executeLargeBatch() throws SQLException {
        this.checkExecStatus();
        synchronized (this.getConnectionSynchronization()) {
            this.setupContextStack();
            int i = 0;
            this.clearResultSets();
            final Vector batchStatements = this.batchStatements;
            this.batchStatements = null;
            int size;
            if (batchStatements == null) {
                size = 0;
            }
            else {
                size = batchStatements.size();
            }
            final long[] array = new long[size];
            SQLException handleException;
            try {
                while (i < size) {
                    InterruptStatus.throwIf(this.lcc);
                    if (this.executeBatchElement(batchStatements.get(i))) {
                        throw this.newSQLException("XJ04B.S");
                    }
                    array[i] = this.getLargeUpdateCount();
                    ++i;
                }
                InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
                final long[] array2 = array;
                this.restoreContextStack();
                return array2;
            }
            catch (StandardException ex) {
                handleException = this.handleException(ex);
                this.restoreContextStack();
            }
            catch (SQLException ex2) {
                handleException = ex2;
                this.restoreContextStack();
            }
            finally {
                this.restoreContextStack();
            }
            final long[] array3 = new long[i];
            System.arraycopy(array, 0, array3, 0, i);
            Util.newBatchUpdateException(handleException.getMessage(), handleException.getSQLState(), handleException.getErrorCode(), array3, handleException);
        }
    }
    
    boolean executeBatchElement(final Object o) throws SQLException, StandardException {
        return this.execute((String)o, false, true, 2, null, null);
    }
    
    public final Connection getConnection() throws SQLException {
        this.checkStatus();
        final Connection applicationConnection = this.getEmbedConnection().getApplicationConnection();
        if (applicationConnection != this.applicationConnection || applicationConnection == null) {
            throw Util.noCurrentConnection();
        }
        return applicationConnection;
    }
    
    public final boolean getMoreResults(final int n) throws SQLException {
        this.checkExecStatus();
        synchronized (this.getConnectionSynchronization()) {
            if (this.dynamicResults == null) {
                this.clearResultSets();
                this.closeMeOnCompletion();
                return false;
            }
            int n2 = 0;
            switch (n) {
                default: {
                    n2 = 0;
                    break;
                }
                case 1: {
                    n2 = this.currentDynamicResultSet;
                    break;
                }
                case 2: {
                    n2 = this.dynamicResults.length;
                    break;
                }
            }
            SQLException ex = null;
            for (int n3 = n2; n3 <= this.currentDynamicResultSet && n3 < this.dynamicResults.length; ++n3) {
                final EmbedResultSet set = this.dynamicResults[n3];
                if (set != null) {
                    try {
                        set.close();
                    }
                    catch (SQLException nextException) {
                        if (ex == null) {
                            ex = nextException;
                        }
                        else {
                            ex.setNextException(nextException);
                        }
                    }
                    finally {
                        this.dynamicResults[n3] = null;
                    }
                }
            }
            if (ex != null) {
                throw ex;
            }
            this.updateCount = -1L;
            while (++this.currentDynamicResultSet < this.dynamicResults.length) {
                final EmbedResultSet results = this.dynamicResults[this.currentDynamicResultSet];
                if (results != null) {
                    if (!results.isClosed) {
                        this.results = results;
                        return true;
                    }
                    this.dynamicResults[this.currentDynamicResultSet] = null;
                }
            }
            this.results = null;
            return false;
        }
    }
    
    public final ResultSet getGeneratedKeys() throws SQLException {
        this.checkStatus();
        if (this.autoGeneratedKeysResultSet == null) {
            return null;
        }
        this.execute("VALUES IDENTITY_VAL_LOCAL()", true, false, 2, null, null);
        return this.results;
    }
    
    boolean executeStatement(final Activation singleUseActivation, final boolean b, final boolean b2) throws SQLException {
        synchronized (this.getConnectionSynchronization()) {
            this.setupContextStack();
            this.pvs = singleUseActivation.getParameterValueSet();
            boolean b3;
            try {
                this.clearWarnings();
                if (!this.forMetaData) {
                    this.commitIfNeeded();
                    this.needCommit();
                }
                else if (this.lcc.getActivationCount() <= 1) {
                    this.commitIfNeeded();
                    this.needCommit();
                }
                final ExecPreparedStatement preparedStatement = singleUseActivation.getPreparedStatement();
                if (this.cursorName != null) {
                    singleUseActivation.setCursorName(this.cursorName);
                }
                singleUseActivation.setResultSetHoldability(this.getExecuteHoldable());
                singleUseActivation.reset();
                singleUseActivation.setMaxRows(this.maxRows);
                final org.apache.derby.iapi.sql.ResultSet execute = preparedStatement.execute(singleUseActivation, this.forMetaData, this.timeoutMillis);
                this.addWarning(preparedStatement.getCompileTimeWarnings());
                this.addWarning(singleUseActivation.getWarnings());
                if (execute.returnsRows()) {
                    if (b2) {
                        throw StandardException.newException("X0Y79.S");
                    }
                    final EmbedResultSet embedResultSet = this.factory.newEmbedResultSet(this.getEmbedConnection(), execute, this.forMetaData, this, preparedStatement.isAtomic());
                    this.results = embedResultSet;
                    if (singleUseActivation.isSingleExecution()) {
                        embedResultSet.singleUseActivation = singleUseActivation;
                    }
                    this.updateCount = -1L;
                    b3 = true;
                }
                else {
                    if (singleUseActivation.getAutoGeneratedKeysResultsetMode() && execute.getAutoGeneratedKeysResultset() != null) {
                        execute.getAutoGeneratedKeysResultset().open();
                        this.autoGeneratedKeysResultSet = this.factory.newEmbedResultSet(this.getEmbedConnection(), execute.getAutoGeneratedKeysResultset(), false, this, preparedStatement.isAtomic());
                    }
                    this.updateCount = execute.modifiedRowCount();
                    this.results = null;
                    int processDynamicResults = 0;
                    if (singleUseActivation.getDynamicResults() != null) {
                        processDynamicResults = this.processDynamicResults(singleUseActivation.getDynamicResults(), singleUseActivation.getMaxDynamicResults());
                    }
                    execute.close();
                    if (b && processDynamicResults != 1) {
                        throw StandardException.newException("X0Y78.S");
                    }
                    if (b2 && processDynamicResults > 0) {
                        throw StandardException.newException("X0Y79.S");
                    }
                    if (processDynamicResults == 0) {
                        if (singleUseActivation.isSingleExecution()) {
                            singleUseActivation.close();
                        }
                        if (!this.forMetaData) {
                            this.commitIfNeeded();
                        }
                        else if (this.lcc.getActivationCount() <= 1) {
                            this.commitIfNeeded();
                        }
                    }
                    b3 = (processDynamicResults > 0);
                }
                InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
            }
            catch (Throwable t) {
                if (singleUseActivation.isSingleExecution()) {
                    try {
                        singleUseActivation.close();
                    }
                    catch (Throwable t2) {}
                }
                throw this.handleException(t);
            }
            finally {
                this.restoreContextStack();
            }
            return b3;
        }
    }
    
    final void addWarning(final SQLWarning sqlWarning) {
        if (sqlWarning != null) {
            if (this.warnings == null) {
                this.warnings = sqlWarning;
            }
            else {
                this.warnings.setNextException(sqlWarning);
            }
        }
    }
    
    public String getSQLText() {
        return this.SQLText;
    }
    
    public ParameterValueSet getParameterValueSet() {
        return this.pvs;
    }
    
    final void checkStatus() throws SQLException {
        if (this.active) {
            return;
        }
        final Connection applicationConnection = this.getEmbedConnection().getApplicationConnection();
        if (applicationConnection == null || applicationConnection.isClosed()) {
            throw Util.noCurrentConnection();
        }
        throw this.newSQLException("XJ012.S", "Statement");
    }
    
    final void checkExecStatus() throws SQLException {
        if (!this.getConnection().isClosed()) {
            return;
        }
        this.active = false;
        throw Util.noCurrentConnection();
    }
    
    void clearResultSets() throws SQLException {
        try {
            this.closingResultSets = true;
            this.clearResultSetsMinion();
        }
        finally {
            this.closingResultSets = false;
        }
    }
    
    private void clearResultSetsMinion() throws SQLException {
        SQLException ex = null;
        try {
            if (this.results != null) {
                this.results.close();
                this.results = null;
            }
        }
        catch (SQLException ex2) {
            ex = ex2;
        }
        try {
            if (this.autoGeneratedKeysResultSet != null) {
                this.autoGeneratedKeysResultSet.close();
                this.autoGeneratedKeysResultSet = null;
            }
        }
        catch (SQLException nextException) {
            if (ex == null) {
                ex = nextException;
            }
            else {
                ex.setNextException(nextException);
            }
        }
        if (this.dynamicResults != null) {
            for (int i = 0; i < this.dynamicResults.length; ++i) {
                final EmbedResultSet set = this.dynamicResults[i];
                if (set != null) {
                    try {
                        set.close();
                    }
                    catch (SQLException nextException2) {
                        if (ex == null) {
                            ex = nextException2;
                        }
                        else {
                            ex.setNextException(nextException2);
                        }
                    }
                }
            }
            this.dynamicResults = null;
        }
        this.updateCount = -1L;
        if (ex != null) {
            throw ex;
        }
    }
    
    void checkRequiresCallableStatement(final Activation activation) throws SQLException {
        final ParameterValueSet parameterValueSet = activation.getParameterValueSet();
        if (parameterValueSet == null) {
            return;
        }
        if (parameterValueSet.checkNoDeclaredOutputParameters()) {
            try {
                activation.close();
            }
            catch (StandardException ex) {}
            throw this.newSQLException("XJ009.S", this.SQLText);
        }
    }
    
    public void transferBatch(final EmbedStatement embedStatement) throws SQLException {
        synchronized (this.getConnectionSynchronization()) {
            embedStatement.batchStatements = this.batchStatements;
            this.batchStatements = null;
        }
    }
    
    public final void setApplicationStatement(final EngineStatement applicationStatement) {
        this.applicationStatement = applicationStatement;
    }
    
    private int processDynamicResults(final ResultSet[][] array, final int n) throws SQLException {
        final EmbedResultSet[] array2 = new EmbedResultSet[array.length];
        int toIndex = 0;
        for (int i = 0; i < array.length; ++i) {
            final ResultSet[] array3 = array[i];
            final ResultSet set = array3[0];
            array3[0] = null;
            final EmbedResultSet processDynamicResult = processDynamicResult(this.getEmbedConnection(), set, this);
            if (processDynamicResult != null) {
                array2[toIndex++] = processDynamicResult;
            }
        }
        if (toIndex != 0) {
            if (toIndex != 1) {
                Arrays.sort(array2, 0, toIndex);
            }
            this.dynamicResults = array2;
            if (toIndex > n) {
                this.addWarning(StandardException.newWarning("0100E"));
                for (int j = n; j < toIndex; ++j) {
                    array2[j].close();
                    array2[j] = null;
                }
                toIndex = n;
            }
            this.updateCount = -1L;
            this.results = array2[0];
            this.currentDynamicResultSet = 0;
        }
        return toIndex;
    }
    
    static EmbedResultSet processDynamicResult(final EmbedConnection embedConnection, final ResultSet set, final EmbedStatement dynamicResultSet) {
        if (set == null) {
            return null;
        }
        if (!(set instanceof EmbedResultSet)) {
            return null;
        }
        final EmbedResultSet set2 = (EmbedResultSet)set;
        if (set2.getEmbedConnection().rootConnection != embedConnection.rootConnection) {
            return null;
        }
        try {
            set2.checkIfClosed("");
        }
        catch (SQLException ex) {
            return null;
        }
        set2.setDynamicResultSet(dynamicResultSet);
        return set2;
    }
    
    void resultSetClosing(final EmbedResultSet set) throws SQLException {
        if (!this.getEmbedConnection().autoCommit) {
            return;
        }
        if (this.dynamicResults != null) {
            for (int i = 0; i < this.dynamicResults.length; ++i) {
                final EmbedResultSet set2 = this.dynamicResults[i];
                if (set2 != null) {
                    if (!set2.isClosed) {
                        if (set2 != set) {
                            return;
                        }
                    }
                }
            }
        }
        this.commitIfAutoCommit();
    }
    
    private boolean getExecuteHoldable() throws SQLException {
        return this.resultSetHoldability != 2 && (this.applicationStatement == this || this.applicationStatement.getResultSetHoldability() == 1);
    }
    
    public boolean isPoolable() throws SQLException {
        this.checkStatus();
        return this.isPoolable;
    }
    
    public void setPoolable(final boolean isPoolable) throws SQLException {
        this.checkStatus();
        this.isPoolable = isPoolable;
    }
    
    public void closeOnCompletion() throws SQLException {
        this.checkStatus();
        this.closeOnCompletion = true;
    }
    
    public boolean isCloseOnCompletion() throws SQLException {
        this.checkStatus();
        return this.closeOnCompletion;
    }
    
    void closeMeOnCompletion() {
        if (this.active && !this.closingResultSets && this.closeOnCompletion) {
            try {
                if (this.isOpen(this.results)) {
                    return;
                }
                if (this.autoGeneratedKeysResultSet != null) {
                    return;
                }
                if (this.dynamicResults != null) {
                    for (int length = this.dynamicResults.length, i = 0; i < length; ++i) {
                        if (this.isOpen(this.dynamicResults[i])) {
                            return;
                        }
                    }
                }
                this.close();
            }
            catch (SQLException ex) {
                Util.logSQLException(ex);
            }
        }
    }
    
    private boolean isOpen(final EmbedResultSet set) throws SQLException {
        return set != null && !set.isClosed();
    }
}
