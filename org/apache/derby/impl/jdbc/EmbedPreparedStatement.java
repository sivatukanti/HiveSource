// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.derby.impl.jdbc;

import java.net.URL;
import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.types.VariableSizeDataValue;
import java.math.BigInteger;
import java.sql.Clob;
import java.sql.Blob;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.sql.ParameterValueSet;
import java.util.Vector;
import org.apache.derby.iapi.types.RawToBinaryFormatStream;
import org.apache.derby.iapi.types.ReaderToUTF8Stream;
import org.apache.derby.iapi.types.StringDataValue;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.sql.Timestamp;
import java.sql.Time;
import java.util.Calendar;
import java.sql.Date;
import java.math.BigDecimal;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.derby.iapi.util.InterruptStatus;
import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import org.apache.derby.iapi.jdbc.EnginePreparedStatement;

public class EmbedPreparedStatement extends EmbedStatement implements EnginePreparedStatement
{
    protected ResultSetMetaData rMetaData;
    private String gcDuringGetMetaData;
    protected org.apache.derby.iapi.sql.PreparedStatement preparedStatement;
    private Activation activation;
    private Boolean usePreTenFiveHdrFormat;
    private BrokeredConnectionControl bcc;
    
    public EmbedPreparedStatement(final EmbedConnection embedConnection, final String sqlText, final boolean b, final int n, final int n2, final int n3, final int n4, final int[] array, final String[] array2) throws SQLException {
        super(embedConnection, b, n, n2, n3);
        this.bcc = null;
        this.isPoolable = true;
        if (sqlText == null) {
            throw this.newSQLException("XJ067.S");
        }
        this.SQLText = sqlText;
        try {
            this.preparedStatement = this.lcc.prepareInternalStatement(this.lcc.getDefaultSchema(), sqlText, n2 == 1007, b);
            this.addWarning(this.preparedStatement.getCompileTimeWarnings());
            this.checkRequiresCallableStatement(this.activation = this.preparedStatement.getActivation(this.lcc, n == 1004));
            if (n4 == 1) {
                this.activation.setAutoGeneratedKeysResultsetInfo(array, array2);
            }
            InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
        }
        catch (Throwable t) {
            throw this.handleException(t);
        }
    }
    
    protected void finalize() throws Throwable {
        super.finalize();
        if (this.activation != null) {
            this.activation.markUnused();
        }
    }
    
    public final boolean execute(final String s) throws SQLException {
        throw this.newSQLException("XJ016.S", "execute(String)");
    }
    
    public final boolean execute(final String s, final int n) throws SQLException {
        throw this.newSQLException("XJ016.S", "execute(String, int)");
    }
    
    public final boolean execute(final String s, final int[] array) throws SQLException {
        throw this.newSQLException("XJ016.S", "execute(String, int[])");
    }
    
    public final boolean execute(final String s, final String[] array) throws SQLException {
        throw this.newSQLException("XJ016.S", "execute(String, String[])");
    }
    
    public final ResultSet executeQuery(final String s) throws SQLException {
        throw this.newSQLException("XJ016.S", "executeQuery(String)");
    }
    
    public final int executeUpdate(final String s) throws SQLException {
        throw this.newSQLException("XJ016.S", "executeUpdate(String)");
    }
    
    public final int executeUpdate(final String s, final int n) throws SQLException {
        throw this.newSQLException("XJ016.S", "executeUpdate(String, int)");
    }
    
    public final int executeUpdate(final String s, final int[] array) throws SQLException {
        throw this.newSQLException("XJ016.S", "executeUpdate(String, int[])");
    }
    
    public final int executeUpdate(final String s, final String[] array) throws SQLException {
        throw this.newSQLException("XJ016.S", "executeUpdate(String, String[])");
    }
    
    public final void addBatch(final String s) throws SQLException {
        throw this.newSQLException("XJ016.S", "addBatch(String)");
    }
    
    void closeActions() throws SQLException {
        if (this.bcc != null) {
            this.bcc.onStatementClose((PreparedStatement)this.applicationStatement);
        }
        this.preparedStatement = null;
        try {
            this.setupContextStack();
        }
        catch (SQLException ex) {
            return;
        }
        try {
            this.activation.close();
            this.activation = null;
            InterruptStatus.restoreIntrFlagIfSeen();
        }
        catch (Throwable t) {
            throw this.handleException(t);
        }
        finally {
            this.restoreContextStack();
        }
    }
    
    public final ResultSet executeQuery() throws SQLException {
        try {
            this.executeStatement(this.activation, true, false);
        }
        catch (SQLException ex) {
            this.checkStatementValidity(ex);
        }
        return this.results;
    }
    
    public final int executeUpdate() throws SQLException {
        return (int)this.executeLargeUpdate();
    }
    
    public final long executeLargeUpdate() throws SQLException {
        try {
            this.executeStatement(this.activation, false, true);
        }
        catch (SQLException ex) {
            this.checkStatementValidity(ex);
        }
        return this.updateCount;
    }
    
    public void setNull(final int n, final int n2) throws SQLException {
        Util.checkForSupportedDataType(n2);
        this.checkStatus();
        if (!DataTypeDescriptor.isJDBCTypeEquivalent(this.getParameterJDBCType(n), n2)) {
            throw this.dataTypeConversion(n, Util.typeName(n2));
        }
        try {
            this.getParms().getParameterForSet(n - 1).setToNull();
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    public void setBoolean(final int n, final boolean value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    public void setByte(final int n, final byte value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setShort(final int n, final short value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setInt(final int n, final int value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setLong(final int n, final long value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public final void setBigDecimal(final int n, final BigDecimal bigDecimal) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setBigDecimal(bigDecimal);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setFloat(final int n, final float value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setDouble(final int n, final double value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setString(final int n, final String value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setBytes(final int n, final byte[] value) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(value);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public void setDate(final int n, final Date date) throws SQLException {
        this.setDate(n, date, null);
    }
    
    public void setTime(final int n, final Time time) throws SQLException {
        this.setTime(n, time, null);
    }
    
    public void setTimestamp(final int n, final Timestamp timestamp) throws SQLException {
        this.setTimestamp(n, timestamp, null);
    }
    
    public final void setAsciiStream(final int n, final InputStream in, final long n2) throws SQLException {
        this.checkAsciiStreamConditions(n);
        Reader reader = null;
        if (in != null) {
            try {
                reader = new InputStreamReader(in, "ISO-8859-1");
            }
            catch (UnsupportedEncodingException ex) {
                throw new SQLException(ex.getMessage());
            }
        }
        this.setCharacterStreamInternal(n, reader, false, n2);
    }
    
    public final void setAsciiStream(final int n, final InputStream inputStream, final int n2) throws SQLException {
        this.setAsciiStream(n, inputStream, (long)n2);
    }
    
    public void setUnicodeStream(final int n, final InputStream inputStream, final int n2) throws SQLException {
        throw Util.notImplemented("setUnicodeStream");
    }
    
    public final void setCharacterStream(final int n, final Reader reader, final long n2) throws SQLException {
        this.checkCharacterStreamConditions(n);
        this.setCharacterStreamInternal(n, reader, false, n2);
    }
    
    public final void setCharacterStream(final int n, final Reader reader, final int n2) throws SQLException {
        this.setCharacterStream(n, reader, (long)n2);
    }
    
    private final void checkCharacterStreamConditions(final int n) throws SQLException {
        this.checkStatus();
        if (!DataTypeDescriptor.isCharacterStreamAssignable(this.getParameterJDBCType(n))) {
            throw this.dataTypeConversion(n, "java.io.Reader");
        }
    }
    
    private final void checkAsciiStreamConditions(final int n) throws SQLException {
        this.checkStatus();
        if (!DataTypeDescriptor.isAsciiStreamAssignable(this.getParameterJDBCType(n))) {
            throw this.dataTypeConversion(n, "java.io.InputStream(ASCII)");
        }
    }
    
    private void setCharacterStreamInternal(final int n, final Reader reader, final boolean b, final long n2) throws SQLException {
        if (!b && n2 < 0L) {
            throw this.newSQLException("XJ025.S");
        }
        final int parameterJDBCType = this.getParameterJDBCType(n);
        if (reader == null) {
            this.setNull(n, parameterJDBCType);
            return;
        }
        if (!b && n2 > 2147483647L) {
            throw this.newSQLException("22003", this.getParameterSQLType(n));
        }
        try {
            final StringDataValue stringDataValue = (StringDataValue)this.getParms().getParameter(n - 1);
            stringDataValue.setStreamHeaderFormat(this.usePreTenFiveHdrFormat());
            final int maximumWidth = this.preparedStatement.getParameterTypes()[n - 1].getMaximumWidth();
            int n3 = -1;
            ReaderToUTF8Stream readerToUTF8Stream;
            if (!b) {
                n3 = (int)n2;
                int n4 = 0;
                if (parameterJDBCType == 2005 && n3 > maximumWidth) {
                    n4 = n3 - maximumWidth;
                    n3 = maximumWidth;
                }
                readerToUTF8Stream = new ReaderToUTF8Stream(reader, n3, n4, this.getParameterSQLType(n), stringDataValue.getStreamHeaderGenerator());
            }
            else {
                readerToUTF8Stream = new ReaderToUTF8Stream(reader, maximumWidth, this.getParameterSQLType(n), stringDataValue.getStreamHeaderGenerator());
            }
            this.getParms().getParameterForSet(n - 1).setValue(readerToUTF8Stream, n3);
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    private Boolean usePreTenFiveHdrFormat() throws StandardException {
        if (this.usePreTenFiveHdrFormat == null) {
            this.usePreTenFiveHdrFormat = !this.lcc.getDataDictionary().checkVersion(170, null);
        }
        return this.usePreTenFiveHdrFormat;
    }
    
    public void setBinaryStream(final int n, final InputStream inputStream) throws SQLException {
        this.checkBinaryStreamConditions(n);
        this.setBinaryStreamInternal(n, inputStream, true, -1L);
    }
    
    public final void setBinaryStream(final int n, final InputStream inputStream, final long n2) throws SQLException {
        this.checkBinaryStreamConditions(n);
        this.setBinaryStreamInternal(n, inputStream, false, n2);
    }
    
    public final void setBinaryStream(final int n, final InputStream inputStream, final int n2) throws SQLException {
        this.setBinaryStream(n, inputStream, (long)n2);
    }
    
    private void setBinaryStreamInternal(final int n, final InputStream inputStream, final boolean b, long n2) throws SQLException {
        if (!b && n2 < 0L) {
            throw this.newSQLException("XJ025.S");
        }
        final int parameterJDBCType = this.getParameterJDBCType(n);
        if (inputStream == null) {
            this.setNull(n, parameterJDBCType);
            return;
        }
        if (!b && n2 > 2147483647L) {
            throw this.newSQLException("22003", this.getEmbedParameterSetMetaData().getParameterTypeName(n));
        }
        try {
            RawToBinaryFormatStream rawToBinaryFormatStream;
            if (b) {
                n2 = -1L;
                final DataTypeDescriptor[] parameterTypes = this.preparedStatement.getParameterTypes();
                rawToBinaryFormatStream = new RawToBinaryFormatStream(inputStream, parameterTypes[n - 1].getMaximumWidth(), parameterTypes[n - 1].getTypeName());
            }
            else {
                rawToBinaryFormatStream = new RawToBinaryFormatStream(inputStream, (int)n2);
            }
            this.getParms().getParameterForSet(n - 1).setValue(rawToBinaryFormatStream, (int)n2);
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    private final void checkBinaryStreamConditions(final int n) throws SQLException {
        this.checkStatus();
        if (!DataTypeDescriptor.isBinaryStreamAssignable(this.getParameterJDBCType(n))) {
            throw this.dataTypeConversion(n, "java.io.InputStream");
        }
    }
    
    public void setNull(final int n, final int n2, final String s) throws SQLException {
        this.setNull(n, n2);
    }
    
    public void addBatch() throws SQLException {
        this.checkStatus();
        synchronized (this.getConnectionSynchronization()) {
            if (this.batchStatements == null) {
                this.batchStatements = new Vector();
            }
            this.batchStatements.add(this.getParms().getClone());
            this.clearParameters();
        }
    }
    
    boolean executeBatchElement(final Object o) throws SQLException, StandardException {
        final ParameterValueSet set = (ParameterValueSet)o;
        for (int parameterCount = set.getParameterCount(), i = 0; i < parameterCount; ++i) {
            set.getParameter(i).setInto(this, i + 1);
        }
        return super.executeStatement(this.activation, false, true);
    }
    
    public void clearParameters() throws SQLException {
        this.checkStatus();
        final ParameterValueSet parms = this.getParms();
        if (parms != null) {
            parms.clearParameters();
        }
    }
    
    public ResultSetMetaData getMetaData() throws SQLException {
        this.checkExecStatus();
        synchronized (this.getConnectionSynchronization()) {
            final ExecPreparedStatement execPreparedStatement = (ExecPreparedStatement)this.preparedStatement;
            this.setupContextStack();
            try {
                GeneratedClass activationClass = null;
                ResultDescription resultDescription = null;
                synchronized (execPreparedStatement) {
                    while (true) {
                        if (!execPreparedStatement.upToDate()) {
                            execPreparedStatement.rePrepare(this.lcc);
                        }
                        else {
                            activationClass = execPreparedStatement.getActivationClass();
                            resultDescription = execPreparedStatement.getResultDescription();
                            if (activationClass != null) {
                                break;
                            }
                            continue;
                        }
                    }
                }
                if (this.gcDuringGetMetaData == null || !this.gcDuringGetMetaData.equals(activationClass.getName())) {
                    this.rMetaData = null;
                    this.gcDuringGetMetaData = activationClass.getName();
                }
                if (this.rMetaData == null && resultDescription != null) {
                    final String statementType = resultDescription.getStatementType();
                    if (statementType.equals("INSERT") || statementType.equals("UPDATE") || statementType.equals("DELETE")) {
                        this.rMetaData = null;
                    }
                    else {
                        this.rMetaData = this.newEmbedResultSetMetaData(resultDescription);
                    }
                }
                InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
            }
            catch (Throwable t) {
                throw this.handleException(t);
            }
            finally {
                this.restoreContextStack();
            }
        }
        return this.rMetaData;
    }
    
    public final void setObject(final int n, final Object o, final int n2, final int n3) throws SQLException {
        if (o == null) {
            this.setNull(n, n2);
            return;
        }
        Util.checkForSupportedDataType(n2);
        final int parameterJDBCType = this.getParameterJDBCType(n);
        if (parameterJDBCType != 2000 && !DataTypeDescriptor.isJDBCTypeEquivalent(parameterJDBCType, n2)) {
            throw this.dataTypeConversion(n, Util.typeName(n2));
        }
        this.setObject(n, o);
        if (parameterJDBCType == 3 || parameterJDBCType == 2) {
            this.setScale(n, n3);
        }
    }
    
    public final void setObject(final int n, final Object o, final int n2) throws SQLException {
        this.setObject(n, o, n2, 0);
    }
    
    public final void setObject(final int n, final Object o) throws SQLException {
        this.checkStatus();
        final int parameterJDBCType = this.getParameterJDBCType(n);
        if (o == null) {
            this.setNull(n, parameterJDBCType);
            return;
        }
        if (parameterJDBCType == 2000) {
            try {
                this.getParms().setParameterAsObject(n - 1, o);
                return;
            }
            catch (Throwable t) {
                throw EmbedResultSet.noStateChangeException(t);
            }
        }
        if (o instanceof String) {
            this.setString(n, (String)o);
            return;
        }
        if (o instanceof Boolean) {
            this.setBoolean(n, (boolean)o);
            return;
        }
        if (o instanceof Byte) {
            this.setByte(n, (byte)o);
            return;
        }
        if (o instanceof Short) {
            this.setShort(n, (short)o);
            return;
        }
        if (o instanceof Integer) {
            this.setInt(n, (int)o);
            return;
        }
        if (o instanceof Long) {
            this.setLong(n, (long)o);
            return;
        }
        if (o instanceof Float) {
            this.setFloat(n, (float)o);
            return;
        }
        if (o instanceof Double) {
            this.setDouble(n, (double)o);
            return;
        }
        if (o instanceof byte[]) {
            this.setBytes(n, (byte[])o);
            return;
        }
        if (o instanceof Date) {
            this.setDate(n, (Date)o);
            return;
        }
        if (o instanceof Time) {
            this.setTime(n, (Time)o);
            return;
        }
        if (o instanceof Timestamp) {
            this.setTimestamp(n, (Timestamp)o);
            return;
        }
        if (o instanceof Blob) {
            this.setBlob(n, (Blob)o);
            return;
        }
        if (o instanceof Clob) {
            this.setClob(n, (Clob)o);
            return;
        }
        if (o instanceof java.util.Date) {
            this.setTimestamp(n, new Timestamp(((java.util.Date)o).getTime()));
            return;
        }
        if (o instanceof Calendar) {
            this.setTimestamp(n, new Timestamp(((Calendar)o).getTime().getTime()));
            return;
        }
        if (o instanceof BigDecimal) {
            this.setBigDecimal(n, (BigDecimal)o);
            return;
        }
        if (o instanceof BigInteger) {
            this.setBigDecimal(n, new BigDecimal((BigInteger)o));
            return;
        }
        throw this.dataTypeConversion(n, o.getClass().getName());
    }
    
    public final boolean execute() throws SQLException {
        boolean executeStatement = false;
        try {
            executeStatement = this.executeStatement(this.activation, false, false);
        }
        catch (SQLException ex) {
            this.checkStatementValidity(ex);
        }
        return executeStatement;
    }
    
    public final void setDate(final int n, final Date date, final Calendar calendar) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(date, calendar);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public final void setTime(final int n, final Time time, final Calendar calendar) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(time, calendar);
        }
        catch (Throwable t) {
            throw EmbedResultSet.noStateChangeException(t);
        }
    }
    
    public final void setTimestamp(final int n, final Timestamp timestamp, final Calendar calendar) throws SQLException {
        this.checkStatus();
        try {
            this.getParms().getParameterForSet(n - 1).setValue(timestamp, calendar);
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    public void setBlob(final int n, final Blob blob) throws SQLException {
        this.checkBlobConditions(n);
        if (blob == null) {
            this.setNull(n, 2004);
        }
        else {
            this.setBinaryStreamInternal(n, blob.getBinaryStream(), false, blob.length());
        }
    }
    
    private final void checkClobConditions(final int n) throws SQLException {
        this.checkStatus();
        if (this.getParameterJDBCType(n) != 2005) {
            throw this.dataTypeConversion(n, "java.sql.Clob");
        }
    }
    
    public void setClob(final int n, final Clob clob) throws SQLException {
        this.checkClobConditions(n);
        if (clob == null) {
            this.setNull(n, 2005);
        }
        else {
            this.setCharacterStreamInternal(n, clob.getCharacterStream(), false, clob.length());
        }
    }
    
    public final ParameterValueSet getParms() {
        return this.activation.getParameterValueSet();
    }
    
    protected final DataTypeDescriptor[] getTypes(final int value) throws SQLException {
        final DataTypeDescriptor[] parameterTypes = this.preparedStatement.getParameterTypes();
        if (parameterTypes == null) {
            throw this.newSQLException("07009");
        }
        if (value < 1 || value > parameterTypes.length) {
            throw this.newSQLException("XCL13.S", new Integer(value), new Integer(parameterTypes.length));
        }
        return parameterTypes;
    }
    
    protected int getParameterJDBCType(final int n) throws SQLException {
        final DataTypeDescriptor[] types = this.getTypes(n);
        return (types[n - 1] == null) ? 1111 : types[n - 1].getTypeId().getJDBCTypeId();
    }
    
    protected final String getParameterSQLType(final int n) throws SQLException {
        return this.getTypes(n)[n - 1].getTypeName();
    }
    
    private void setScale(final int n, final int value) throws SQLException {
        this.checkStatus();
        if (value < 0) {
            throw this.newSQLException("XJ044.S", new Integer(value));
        }
        try {
            final DataValueDescriptor parameter = this.getParms().getParameter(n - 1);
            final int length = parameter.getLength();
            ((VariableSizeDataValue)parameter).setWidth(-1, value, false);
            if (parameter.getLength() < length) {
                this.activation.addWarning(StandardException.newWarning("01505", parameter.getString()));
            }
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    private EngineParameterMetaData getEmbedParameterSetMetaData() throws SQLException {
        this.checkExecStatus();
        return new EmbedParameterSetMetaData(this.getParms(), this.preparedStatement.getParameterTypes());
    }
    
    public final void setURL(final int n, final URL url) throws SQLException {
        throw Util.notImplemented();
    }
    
    protected EmbedResultSetMetaData newEmbedResultSetMetaData(final ResultDescription resultDescription) {
        return this.factory.newEmbedResultSetMetaData(resultDescription.getColumnInfo());
    }
    
    public String toString() {
        if (this.activation != null) {
            return this.activation.getPreparedStatement().getObjectName();
        }
        return super.toString();
    }
    
    public void transferParameters(final EmbedPreparedStatement embedPreparedStatement) throws SQLException {
        try {
            embedPreparedStatement.activation.setParameters(this.getParms(), this.preparedStatement.getParameterTypes());
        }
        catch (StandardException ex) {
            throw EmbedResultSet.noStateChangeException(ex);
        }
    }
    
    boolean executeStatement(final Activation activation, final boolean b, final boolean b2) throws SQLException {
        this.checkExecStatus();
        this.checkIfInMiddleOfBatch();
        this.clearResultSets();
        return super.executeStatement(activation, b, b2);
    }
    
    final SQLException dataTypeConversion(final int n, final String s) throws SQLException {
        return this.newSQLException("22005", this.getEmbedParameterSetMetaData().getParameterTypeName(n), s);
    }
    
    public void setBrokeredConnectionControl(final BrokeredConnectionControl bcc) {
        this.bcc = bcc;
    }
    
    private void checkStatementValidity(final SQLException ex) throws SQLException {
        if (this.bcc != null && this.isClosed()) {
            this.bcc.onStatementErrorOccurred((PreparedStatement)this.applicationStatement, ex);
        }
        throw ex;
    }
    
    public void setAsciiStream(final int n, final InputStream in) throws SQLException {
        this.checkAsciiStreamConditions(n);
        Reader reader = null;
        if (in != null) {
            try {
                reader = new InputStreamReader(in, "ISO-8859-1");
            }
            catch (UnsupportedEncodingException ex) {
                throw new SQLException(ex.getMessage());
            }
        }
        this.setCharacterStreamInternal(n, reader, true, -1L);
    }
    
    public void setCharacterStream(final int n, final Reader reader) throws SQLException {
        this.checkCharacterStreamConditions(n);
        this.setCharacterStreamInternal(n, reader, true, -1L);
    }
    
    public void setClob(final int n, final Reader reader) throws SQLException {
        this.checkClobConditions(n);
        this.setCharacterStreamInternal(n, reader, true, -1L);
    }
    
    public void setClob(final int n, final Reader reader, final long n2) throws SQLException {
        this.checkClobConditions(n);
        this.setCharacterStreamInternal(n, reader, false, n2);
    }
    
    public void setBlob(final int n, final InputStream inputStream) throws SQLException {
        this.checkBlobConditions(n);
        this.setBinaryStreamInternal(n, inputStream, true, -1L);
    }
    
    public void setBlob(final int n, final InputStream inputStream, final long n2) throws SQLException {
        this.checkBlobConditions(n);
        this.setBinaryStreamInternal(n, inputStream, false, n2);
    }
    
    private final void checkBlobConditions(final int n) throws SQLException {
        this.checkStatus();
        if (this.getParameterJDBCType(n) != 2004) {
            throw this.dataTypeConversion(n, "java.sql.Blob");
        }
    }
    
    public final long getVersionCounter() throws SQLException {
        return this.preparedStatement.getVersionCounter();
    }
}
