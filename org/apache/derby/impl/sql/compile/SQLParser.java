// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.derby.impl.sql.compile;

import java.util.Enumeration;
import java.util.StringTokenizer;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.compile.Visitor;
import org.apache.derby.iapi.types.XML;
import org.apache.derby.iapi.sql.compile.Node;
import org.apache.derby.iapi.util.IdUtil;
import org.apache.derby.iapi.types.DataTypeUtilities;
import org.apache.derby.catalog.TypeDescriptor;
import java.util.Properties;
import org.apache.derby.iapi.util.ReuseFactory;
import org.apache.derby.iapi.types.DataValueDescriptor;
import java.util.List;
import org.apache.derby.iapi.util.StringUtil;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.error.StandardException;
import java.util.Vector;
import java.util.ArrayList;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.compile.NodeFactory;

public class SQLParser implements SQLParserConstants
{
    private static final String[] SAVEPOINT_CLAUSE_NAMES;
    private static final String[] ROUTINE_CLAUSE_NAMES;
    private static final int[] JAVA_ROUTINE_CLAUSES;
    private static final String[] TEMPORARY_TABLE_CLAUSE_NAMES;
    private static final int DEFAULT_STRING_COLUMN_LENGTH = 1;
    private static final int ON_OR_USING_CLAUSE_SIZE = 2;
    private static final int ON_CLAUSE = 0;
    private static final int USING_CLAUSE = 1;
    private static final int OPTIONAL_TABLE_CLAUSES_SIZE = 3;
    private static final int OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES = 0;
    private static final int OPTIONAL_TABLE_CLAUSES_DERIVED_RCL = 1;
    private static final int OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME = 2;
    private static final int MAX_UTF8_LENGTH = 65535;
    private static final int NO_SET_OP = 0;
    private static final int UNION_OP = 1;
    private static final int UNION_ALL_OP = 2;
    private static final int EXCEPT_OP = 3;
    private static final int EXCEPT_ALL_OP = 4;
    private static final int INTERSECT_OP = 5;
    private static final int INTERSECT_ALL_OP = 6;
    private static final int IDX_DATA_TYPE = 0;
    private static final int IDX_START_WITH_OPTION = 1;
    private static final int IDX_INCREMENT_BY_OPTION = 2;
    private static final int IDX_MAX_VALUE_OPTION = 3;
    private static final int IDX_MIN_VALUE_OPTION = 4;
    private static final int IDX_CYCLE_OPTION = 5;
    private static final int IDX_OPTION_COUNT = 6;
    private static final int OFFSET_CLAUSE = 0;
    private static final int FETCH_FIRST_CLAUSE = 1;
    private static final int OFFSET_CLAUSE_COUNT = 2;
    private Object[] paramDefaults;
    private String statementSQLText;
    private NodeFactory nodeFactory;
    private ContextManager cm;
    private CompilerContext compilerContext;
    private int parameterNumber;
    private ArrayList parameterList;
    private Boolean lastTokenDelimitedIdentifier;
    private Boolean nextToLastTokenDelimitedIdentifier;
    private Token lastIdentifierToken;
    private Token nextToLastIdentifierToken;
    static final String SINGLEQUOTES = "''";
    static final String DOUBLEQUOTES = "\"\"";
    static final String DEFAULT_INDEX_TYPE = "BTREE";
    private static final String[] ESCAPED_SYSFUN_FUNCTIONS;
    public SQLParserTokenManager token_source;
    public Token token;
    public Token jj_nt;
    private Token jj_scanpos;
    private Token jj_lastpos;
    private int jj_la;
    public boolean lookingAhead;
    private boolean jj_semLA;
    private int jj_gen;
    private final int[] jj_la1;
    private static int[] jj_la1_0;
    private static int[] jj_la1_1;
    private static int[] jj_la1_2;
    private static int[] jj_la1_3;
    private static int[] jj_la1_4;
    private static int[] jj_la1_5;
    private static int[] jj_la1_6;
    private static int[] jj_la1_7;
    private static int[] jj_la1_8;
    private static int[] jj_la1_9;
    private static int[] jj_la1_10;
    private static int[] jj_la1_11;
    private static int[] jj_la1_12;
    private static int[] jj_la1_13;
    private static int[] jj_la1_14;
    private static int[] jj_la1_15;
    private final JJCalls[] jj_2_rtns;
    private boolean jj_rescan;
    private int jj_gc;
    private final LookaheadSuccess jj_ls;
    private Vector jj_expentries;
    private int[] jj_expentry;
    private int jj_kind;
    private int[] jj_lasttokens;
    private int jj_endpos;
    
    final void setCompilerContext(final CompilerContext compilerContext) {
        this.compilerContext = compilerContext;
        this.cm = compilerContext.getContextManager();
    }
    
    private final NodeFactory getNodeFactory() throws StandardException {
        if (this.nodeFactory == null) {
            this.nodeFactory = this.getCompilerContext().getNodeFactory();
        }
        return this.nodeFactory;
    }
    
    private final CompilerContext getCompilerContext() {
        return this.compilerContext;
    }
    
    private DataTypeDescriptor getDataTypeServices(final int n, final int n2, final int n3, final int n4) throws StandardException {
        return new DataTypeDescriptor(TypeId.getBuiltInTypeId(n), n2, n3, true, n4);
    }
    
    private DataTypeDescriptor getJavaClassDataTypeDescriptor(final TableName tableName) throws StandardException {
        return new DataTypeDescriptor(TypeId.getUserDefinedTypeId(tableName.getSchemaName(), tableName.getTableName(), null), true);
    }
    
    private LanguageConnectionContext getLanguageConnectionContext() {
        return (LanguageConnectionContext)this.getContextManager().getContext("LanguageConnectionContext");
    }
    
    private boolean checkVersion(final int n, final String s) throws StandardException {
        return this.getLanguageConnectionContext().getDataDictionary().checkVersion(n, s);
    }
    
    private void checkSqlStandardAccess(final String s) throws StandardException {
        if (this.getLanguageConnectionContext().usesSqlAuthorization()) {
            return;
        }
        throw StandardException.newException("42Z60", s, "derby.database.sqlAuthorization", "TRUE");
    }
    
    private void forbidNextValueFor() {
        final CompilerContext compilerContext = this.getCompilerContext();
        compilerContext.setReliability(compilerContext.getReliability() | 0x4000);
    }
    
    private void checkInternalFeature(final String s) throws StandardException {
        if ((this.getCompilerContext().getReliability() & 0x400) != 0x0) {
            throw StandardException.newException("42X01", s);
        }
    }
    
    private void checkTypeLimits(final int n, final int n2) throws StandardException {
        boolean b = true;
        switch (n) {
            case -2:
            case 1: {
                if (n2 > 254) {
                    b = false;
                    break;
                }
                break;
            }
            case -3:
            case 12: {
                if (n2 > 32672) {
                    b = false;
                    break;
                }
                break;
            }
        }
        if (!b) {
            throw StandardException.newException("42611", DataTypeDescriptor.getBuiltInDataTypeDescriptor(n, n2).getSQLstring());
        }
    }
    
    private final ContextManager getContextManager() {
        return this.cm;
    }
    
    private static void verifyImageLength(final String s) throws StandardException {
        if (s.length() > 65535) {
            throw StandardException.newException("42Z99");
        }
    }
    
    private static String normalizeDelimitedID(String compressQuotes) {
        compressQuotes = StringUtil.compressQuotes(compressQuotes, "\"\"");
        return compressQuotes;
    }
    
    private static boolean isDATETIME(final int n) {
        return n == 285 || n == 347 || n == 348;
    }
    
    ValueNode multOp(final ValueNode valueNode, final ValueNode valueNode2, final int n) throws StandardException {
        if (valueNode == null) {
            return valueNode2;
        }
        switch (n) {
            case 3: {
                return (ValueNode)this.nodeFactory.getNode(49, valueNode, valueNode2, this.getContextManager());
            }
            case 4: {
                return (ValueNode)this.nodeFactory.getNode(40, valueNode, valueNode2, this.getContextManager());
            }
            case 5: {
                return (ValueNode)this.nodeFactory.getNode(50, valueNode, valueNode2, this.getContextManager());
            }
            default: {
                return null;
            }
        }
    }
    
    private void setUpAndLinkParameters() throws StandardException {
        final CompilerContext compilerContext = this.getCompilerContext();
        compilerContext.setParameterList(this.parameterList);
        final DataTypeDescriptor[] parameterTypes = compilerContext.getParameterTypes();
        int n = -1;
        for (int size = this.parameterList.size(), i = 0; i < size; ++i) {
            ++n;
            ((ParameterNode)this.parameterList.get(i)).setDescriptors(parameterTypes);
        }
    }
    
    void initUnnamedParameterList() {
        this.parameterList = new ArrayList();
    }
    
    ParameterNode makeParameterNode() throws StandardException {
        Object o = null;
        if (this.paramDefaults != null && this.parameterNumber < this.paramDefaults.length) {
            o = this.paramDefaults[this.parameterNumber];
        }
        final ParameterNode e = (ParameterNode)this.nodeFactory.getNode(88, ReuseFactory.getInteger(this.parameterNumber), o, this.getContextManager());
        ++this.parameterNumber;
        this.parameterList.add(e);
        return e;
    }
    
    NumericConstantNode getNumericNode(final String s, final boolean b) throws StandardException {
        final ContextManager contextManager = this.getContextManager();
        try {
            return (NumericConstantNode)this.nodeFactory.getNode(70, new Integer(s), contextManager);
        }
        catch (NumberFormatException ex2) {
            try {
                return (NumericConstantNode)this.nodeFactory.getNode(71, new Long(s), contextManager);
            }
            catch (NumberFormatException ex) {
                if (b) {
                    throw ex;
                }
                return (NumericConstantNode)this.nodeFactory.getNode(67, s, contextManager);
            }
        }
    }
    
    private boolean isBuiltInAlias() {
        boolean b = false;
        switch (this.token.kind) {
            case 271:
            case 272:
            case 308:
            case 372:
            case 399:
            case 400:
            case 434:
            case 440: {
                b = true;
                break;
            }
            default: {
                b = false;
                break;
            }
        }
        return b;
    }
    
    boolean commonDatatypeName(final boolean b) {
        return this.commonDatatypeName(1, b);
    }
    
    boolean dataTypeCheck(final int n) {
        if (this.commonDatatypeName(n, false)) {
            return true;
        }
        boolean b = true;
        switch (this.getToken(n).kind) {
            case 449:
            case 450:
            case 453: {
                b = false;
                break;
            }
        }
        return b;
    }
    
    boolean commonDatatypeName(final int n, final boolean b) {
        boolean b2 = false;
        switch (this.getToken(n).kind) {
            case 80:
            case 81:
            case 88:
            case 89:
            case 116:
            case 117:
            case 128:
            case 143:
            case 167:
            case 168:
            case 187:
            case 193:
            case 214:
            case 228:
            case 261:
            case 275:
            case 278:
            case 285:
            case 315:
            case 347:
            case 348:
            case 356:
            case 364:
            case 373:
            case 407: {
                b2 = true;
                break;
            }
            case 365: {
                if (b) {
                    switch (this.getToken(n + 1).kind) {
                        case 80:
                        case 81:
                        case 260:
                        case 261:
                        case 407: {
                            b2 = true;
                            break;
                        }
                    }
                    break;
                }
                b2 = true;
                break;
            }
            case 185: {
                if (b) {
                    switch (this.getToken(n + 1).kind) {
                        case 88:
                        case 89: {
                            b2 = true;
                            break;
                        }
                    }
                    break;
                }
                b2 = true;
                break;
            }
        }
        return b2;
    }
    
    private StatementNode getDeleteNode(final FromTable fromTable, final TableName tableName, final ValueNode valueNode) throws StandardException {
        final FromList list = (FromList)this.nodeFactory.getNode(37, this.getContextManager());
        list.addFromTable(fromTable);
        final StatementNode statementNode = (StatementNode)this.nodeFactory.getNode(101, tableName, this.nodeFactory.getNode(129, null, null, list, valueNode, null, null, null, this.getContextManager()), this.getContextManager());
        this.setUpAndLinkParameters();
        return statementNode;
    }
    
    private StatementNode getUpdateNode(final FromTable fromTable, final TableName tableName, final ResultColumnList list, final ValueNode valueNode) throws StandardException {
        final FromList list2 = (FromList)this.nodeFactory.getNode(37, this.getContextManager());
        list2.addFromTable(fromTable);
        final StatementNode statementNode = (StatementNode)this.nodeFactory.getNode(102, tableName, this.nodeFactory.getNode(129, list, null, list2, valueNode, null, null, null, this.getContextManager()), this.getContextManager());
        this.setUpAndLinkParameters();
        return statementNode;
    }
    
    private ValueNode getTrimOperatorNode(final Integer n, ValueNode valueNode, final ValueNode valueNode2, final ContextManager contextManager) throws StandardException {
        if (valueNode == null) {
            valueNode = (CharConstantNode)this.nodeFactory.getNode(61, " ", this.getContextManager());
        }
        return (ValueNode)this.nodeFactory.getNode(127, valueNode2, valueNode, null, ReuseFactory.getInteger(0), n, (contextManager == null) ? this.getContextManager() : contextManager);
    }
    
    private boolean ansiTrimSpecFollows() {
        return this.getToken(2).kind == 176 || this.getToken(2).kind == 247 || this.getToken(2).kind == 82;
    }
    
    private boolean remainingPredicateFollows() {
        boolean b = false;
        Label_0158: {
            switch (this.getToken(1).kind) {
                case 79:
                case 160:
                case 178:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466: {
                    b = true;
                    break;
                }
                case 190: {
                    switch (this.getToken(2).kind) {
                        case 79:
                        case 160:
                        case 178: {
                            b = true;
                            break Label_0158;
                        }
                    }
                    break;
                }
            }
        }
        return b;
    }
    
    private boolean dropFollows() {
        return this.getToken(1).kind == 129;
    }
    
    private boolean escapedValueFunctionFollows() {
        return this.getToken(1).kind == 447 && this.getToken(2).kind == 395;
    }
    
    private String getEscapedSYSFUN(String sqlToUpperCase) {
        sqlToUpperCase = StringUtil.SQLToUpperCase(sqlToUpperCase);
        for (int i = 0; i < SQLParser.ESCAPED_SYSFUN_FUNCTIONS.length; ++i) {
            if (SQLParser.ESCAPED_SYSFUN_FUNCTIONS[i].equals(sqlToUpperCase)) {
                return sqlToUpperCase;
            }
        }
        return null;
    }
    
    private boolean columnMethodInvocationFollows() {
        final int kind = this.getToken(1).kind;
        if (kind == 0) {
            return false;
        }
        if (this.getToken(1).image.charAt(0) == '?') {
            return false;
        }
        if (kind == 109 || kind == 110 || kind == 111 || (kind == 108 && isDATETIME(this.getToken(2).kind))) {
            return false;
        }
        if (this.getToken(2).kind != 455) {
            return false;
        }
        final int kind2 = this.getToken(4).kind;
        if (kind2 == 449) {
            return true;
        }
        if (kind2 != 455) {
            return false;
        }
        final int kind3 = this.getToken(6).kind;
        return kind3 == 449 || (kind3 == 455 && this.getToken(8).kind == 449);
    }
    
    private boolean aggregateFollows() {
        boolean b = false;
        switch (this.getToken(1).kind) {
            case 77:
            case 181:
            case 182:
            case 236: {
                b = true;
                return b;
            }
            case 105: {
                if (this.getToken(2).kind == 449) {
                    b = true;
                    break;
                }
                break;
            }
        }
        if (this.getToken(2).kind == 449 && this.getToken(3).kind == 127) {
            b = true;
        }
        return b;
    }
    
    private boolean builtinAggregateFollows() {
        switch (this.getToken(1).kind) {
            case 77:
            case 105:
            case 181:
            case 182:
            case 236: {
                return true;
            }
            default: {
                return false;
            }
        }
    }
    
    private boolean distinctUDAFollows() {
        return !this.builtinAggregateFollows() && ((this.getToken(2).kind == 449 && this.getToken(3).kind == 127) || (this.getToken(2).kind == 455 && this.getToken(4).kind == 449 && this.getToken(5).kind == 127));
    }
    
    private boolean windowOrAggregateFunctionFollows() {
        if (this.distinctUDAFollows()) {
            return false;
        }
        boolean aggregateFollows = false;
        switch (this.getToken(1).kind) {
            case 370: {
                aggregateFollows = true;
                break;
            }
            default: {
                aggregateFollows = this.aggregateFollows();
                break;
            }
        }
        return aggregateFollows;
    }
    
    private boolean miscBuiltinFollows() {
        boolean b = false;
        final int kind = this.getToken(1).kind;
        if (this.getToken(0).kind == 357) {
            b = true;
        }
        switch (kind) {
            case 109:
            case 110:
            case 111:
            case 362: {
                b = true;
                break;
            }
            case 108: {
                if (isDATETIME(this.getToken(2).kind)) {
                    b = true;
                    break;
                }
                break;
            }
            case 87:
            case 449: {
                b = false;
                break;
            }
            default: {
                if (this.getToken(2).kind == 449) {
                    b = true;
                    break;
                }
                break;
            }
        }
        return b;
    }
    
    private boolean subqueryFollows() {
        boolean b = false;
        int n = 1;
        int kind;
        while (true) {
            kind = this.getToken(n).kind;
            if (kind != 449) {
                break;
            }
            ++n;
        }
        if (kind == 225 || kind == 259) {
            b = true;
        }
        return b;
    }
    
    private boolean seeingOffsetClause() {
        int n = 2;
        final int kind = this.getToken(n).kind;
        if (kind == 452 || kind == 454) {
            if (this.getToken(++n).kind == 482) {
                final int kind2 = this.getToken(++n).kind;
                return kind2 == 329 || kind2 == 221;
            }
        }
        else if (kind == 482 || kind == 467) {
            final int kind3 = this.getToken(++n).kind;
            return kind3 == 329 || kind3 == 221;
        }
        return false;
    }
    
    private boolean rowValueConstructorListFollows() {
        boolean b = false;
        if (this.getToken(1).kind == 449) {
            int n = 1;
            int n2 = 2;
            while (true) {
                final int kind = this.getToken(n2).kind;
                if (n2 == 2 && (kind == 191 || kind == 119)) {
                    b = true;
                    break;
                }
                if (n == 1 && kind == 453) {
                    b = true;
                    break;
                }
                if (kind == 0) {
                    break;
                }
                if (kind == 449) {
                    ++n;
                }
                else if (kind == 450) {
                    --n;
                }
                if (n == 0) {
                    break;
                }
                ++n2;
            }
        }
        return b;
    }
    
    private boolean derbyPropertiesListFollows() {
        return this.getToken(1).kind == 59;
    }
    
    private boolean newInvocationFollows(final int n) {
        boolean b = false;
        if (this.getToken(n).kind == 405) {
            int n2 = 2 + n;
            while (true) {
                final int kind = this.getToken(n2).kind;
                if (kind == 449) {
                    b = true;
                    break;
                }
                if (kind != 455) {
                    break;
                }
                n2 += 2;
            }
        }
        return b;
    }
    
    boolean javaClassFollows() {
        boolean b = false;
        int n = 2;
        while (true) {
            final int kind = this.getToken(n).kind;
            if (kind == 458) {
                b = true;
                break;
            }
            if (kind != 455) {
                break;
            }
            n += 2;
        }
        return b;
    }
    
    private boolean fromNewInvocationFollows() {
        return this.getToken(1).kind == 147 && this.newInvocationFollows(2);
    }
    
    private boolean joinedTableExpressionFollows() {
        boolean b = false;
        final int kind = this.getToken(1).kind;
        final int kind2 = this.getToken(2).kind;
        if (kind == 173) {
            b = true;
        }
        else if (kind == 163 && kind2 == 173) {
            b = true;
        }
        else if (kind == 107 && kind2 == 173) {
            b = true;
        }
        else if (kind == 186) {
            b = true;
        }
        else if ((kind == 177 || kind == 219) && kind2 == 201) {
            if (this.getToken(3).kind == 173) {
                b = true;
            }
        }
        else if ((kind == 177 || kind == 219) && kind2 == 173) {
            b = true;
        }
        return b;
    }
    
    private static String aggName(final Token token) {
        String s = null;
        switch (token.kind) {
            case 181: {
                s = "MAX";
                break;
            }
            case 77: {
                s = "AVG";
                break;
            }
            case 182: {
                s = "MIN";
                break;
            }
            case 236: {
                s = "SUM";
                break;
            }
            case 105: {
                s = "COUNT";
                break;
            }
        }
        return s;
    }
    
    private static Class aggClass(final Token token) {
        Class clazz = null;
        switch (token.kind) {
            case 181:
            case 182: {
                clazz = MaxMinAggregateDefinition.class;
                break;
            }
            case 77:
            case 236: {
                clazz = SumAvgAggregateDefinition.class;
                break;
            }
            case 105: {
                clazz = CountAggregateDefinition.class;
                break;
            }
        }
        return clazz;
    }
    
    private boolean anotherPropertyFollows() {
        boolean b = false;
        if (this.getToken(1).kind == 453) {
            int n = 3;
            int i;
            do {
                i = this.getToken(n).kind;
                if (i == 462) {
                    b = true;
                    break;
                }
                n += 2;
            } while (i == 455);
        }
        return b;
    }
    
    StatementNode getCreateAliasNode(final Object o, Object o2, final Object o3, final char value) throws StandardException {
        final int n = 150;
        Object substring = null;
        if (value != 'S' && value != 'A' && value != 'G') {
            final String s = (String)o2;
            final int index = s.indexOf(40);
            int endIndex;
            if (index == -1) {
                endIndex = s.lastIndexOf(46);
            }
            else {
                endIndex = s.substring(0, index).lastIndexOf(46);
            }
            if (endIndex == -1 || endIndex == s.length() - 1) {
                throw StandardException.newException("42Y04", s);
            }
            final String substring2 = s.substring(0, endIndex);
            substring = s.substring(endIndex + 1);
            o2 = substring2;
        }
        return (StatementNode)this.getNodeFactory().getNode(n, o, o2, substring, o3, new Character(value), this.cm);
    }
    
    StatementNode dropAliasNode(final Object o, final char value) throws StandardException {
        return (StatementNode)this.nodeFactory.getNode(156, o, new Character(value), this.getContextManager());
    }
    
    ValueNode getSubstringNode(final ValueNode valueNode, final ValueNode valueNode2, final ValueNode valueNode3, final Boolean b) throws StandardException {
        return (ValueNode)this.nodeFactory.getNode(154, valueNode, valueNode2, valueNode3, ReuseFactory.getInteger(2), null, this.getContextManager());
    }
    
    public final TableName qualifiedName(final int n) throws ParseException, StandardException {
        return this.qualifiedName(34, n);
    }
    
    private void initStatement(final String statementSQLText, final Object[] paramDefaults) throws StandardException {
        this.parameterNumber = 0;
        this.statementSQLText = statementSQLText;
        this.paramDefaults = paramDefaults;
        this.nodeFactory = this.getNodeFactory();
        this.initUnnamedParameterList();
    }
    
    private ValueNode getJdbcIntervalNode(final int n) throws StandardException {
        return (ValueNode)this.nodeFactory.getNode(70, ReuseFactory.getInteger(n), this.getContextManager());
    }
    
    void checkRequiredRoutineClause(final int[] array, final Object[] array2) throws StandardException {
        for (int i = 0; i < array.length; ++i) {
            final int n = array[i];
            if (array2[n] == null) {
                throw StandardException.newException("42X01", SQLParser.ROUTINE_CLAUSE_NAMES[n]);
            }
        }
    }
    
    boolean isPrivilegeKeywordExceptTrigger(final int n) {
        return n == 225 || n == 122 || n == 166 || n == 254 || n == 215 || n == 137 || n == 354 || n == 66;
    }
    
    TableElementNode wrapAlterColumnDefaultValue(final ValueNode valueNode, final String s, long[] array) throws StandardException {
        if (array[2] == 0L) {
            array = null;
        }
        return (TableElementNode)this.nodeFactory.getNode(97, s, valueNode, null, array, this.getContextManager());
    }
    
    private boolean isTableValueConstructor(final ResultSetNode resultSetNode) throws StandardException {
        return resultSetNode instanceof RowResultSetNode || (resultSetNode instanceof UnionNode && ((UnionNode)resultSetNode).tableConstructor());
    }
    
    private JoinNode newJoinNode(final ResultSetNode resultSetNode, final ResultSetNode resultSetNode2, final ValueNode valueNode, final ResultColumnList list, final int n) throws StandardException {
        switch (n) {
            case 1: {
                return (JoinNode)this.nodeFactory.getNode(139, resultSetNode, resultSetNode2, valueNode, list, null, null, null, this.getContextManager());
            }
            case 3: {
                return (JoinNode)this.nodeFactory.getNode(144, resultSetNode, resultSetNode2, valueNode, list, Boolean.FALSE, null, this.getContextManager());
            }
            case 4: {
                return (JoinNode)this.nodeFactory.getNode(144, resultSetNode, resultSetNode2, valueNode, list, Boolean.TRUE, null, this.getContextManager());
            }
            default: {
                return null;
            }
        }
    }
    
    private static boolean hasSelectSuffixClause(final OrderByList list, final ValueNode[] array) {
        return list != null || array[0] != null || array[1] != null;
    }
    
    public final StatementNode Statement(final String s, final Object[] array) throws ParseException, StandardException {
        this.initStatement(s, array);
        final StatementNode statementPart = this.StatementPart(null);
        this.jj_consume_token(0);
        return statementPart;
    }
    
    public final StatementNode proceduralStatement(final Token[] array) throws ParseException, StandardException {
        array[0] = this.getToken(1);
        StatementNode statementNode = null;
        switch (this.jj_nt.kind) {
            case 166: {
                statementNode = this.insertStatement();
                break;
            }
            case 254: {
                statementNode = this.preparableUpdateStatement();
                break;
            }
            case 122: {
                statementNode = this.preparableDeleteStatement();
                break;
            }
            case 225:
            case 259:
            case 449: {
                statementNode = this.preparableSelectStatement(true);
                break;
            }
            case 357:
            case 447:
            case 467: {
                statementNode = this.callStatement();
                break;
            }
            default: {
                this.jj_la1[0] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return statementNode;
    }
    
    public final StatementNode StatementPart(final Token[] array) throws ParseException, StandardException {
        if (array != null) {
            array[0] = this.getToken(1);
        }
        switch (this.jj_nt.kind) {
            case 401:
            case 420: {
                StatementNode statementNode = null;
                switch (this.jj_nt.kind) {
                    case 420: {
                        statementNode = this.spsRenameStatement();
                        break;
                    }
                    case 401: {
                        statementNode = this.lockStatement();
                        break;
                    }
                    default: {
                        this.jj_la1[1] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                return statementNode;
            }
            default: {
                this.jj_la1[5] = this.jj_gen;
                if (this.jj_2_4(1)) {
                    StatementNode statementNode2 = null;
                    Label_0480: {
                        switch (this.jj_nt.kind) {
                            case 106: {
                                statementNode2 = this.createStatements();
                                break;
                            }
                            case 129: {
                                statementNode2 = this.dropStatements();
                                break;
                            }
                            case 68: {
                                statementNode2 = this.spsAlterStatement();
                                break;
                            }
                            case 118: {
                                statementNode2 = this.globalTemporaryTableDeclaration();
                                break;
                            }
                            case 122:
                            case 166:
                            case 220:
                            case 225:
                            case 254:
                            case 259:
                            case 324:
                            case 330:
                            case 357:
                            case 447:
                            case 449:
                            case 467: {
                                statementNode2 = this.preparableSQLDataStatement();
                                break;
                            }
                            default: {
                                this.jj_la1[2] = this.jj_gen;
                                if (this.jj_2_1(1)) {
                                    statementNode2 = this.spsSetStatement();
                                    break;
                                }
                                switch (this.jj_nt.kind) {
                                    case 351: {
                                        statementNode2 = this.truncateTableStatement();
                                        break Label_0480;
                                    }
                                    default: {
                                        this.jj_la1[3] = this.jj_gen;
                                        if (this.jj_2_2(1)) {
                                            statementNode2 = this.grantStatement();
                                            break Label_0480;
                                        }
                                        if (this.jj_2_3(1)) {
                                            statementNode2 = this.revokeStatement();
                                            break Label_0480;
                                        }
                                        switch (this.jj_nt.kind) {
                                            case 137: {
                                                statementNode2 = this.execStatement();
                                                break Label_0480;
                                            }
                                            default: {
                                                this.jj_la1[4] = this.jj_gen;
                                                this.jj_consume_token(-1);
                                                throw new ParseException();
                                            }
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    return statementNode2;
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode createStatements() throws ParseException, StandardException {
        final Token jj_consume_token = this.jj_consume_token(106);
        StatementNode statementNode = null;
        Label_0339: {
            switch (this.jj_nt.kind) {
                case 222:
                case 263:
                case 345:
                case 369:
                case 428:
                case 438: {
                    switch (this.jj_nt.kind) {
                        case 222: {
                            statementNode = this.schemaDefinition();
                            break Label_0339;
                        }
                        case 263: {
                            statementNode = this.viewDefinition(jj_consume_token);
                            break Label_0339;
                        }
                        case 438: {
                            statementNode = this.triggerDefinition();
                            break Label_0339;
                        }
                        case 345: {
                            statementNode = this.synonymDefinition();
                            break Label_0339;
                        }
                        case 369: {
                            statementNode = this.roleDefinition();
                            break Label_0339;
                        }
                        case 428: {
                            statementNode = this.sequenceDefinition();
                            break Label_0339;
                        }
                        default: {
                            this.jj_la1[6] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                case 239: {
                    statementNode = this.tableDefinition();
                    break;
                }
                case 211: {
                    statementNode = this.procedureDefinition();
                    break;
                }
                case 149: {
                    statementNode = this.functionDefinition();
                    break;
                }
                case 387: {
                    statementNode = this.aggregateDefinition();
                    break;
                }
                case 352: {
                    statementNode = this.udtDefinition();
                    break;
                }
                case 252:
                case 396: {
                    statementNode = this.indexDefinition();
                    break;
                }
                default: {
                    this.jj_la1[7] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        return statementNode;
    }
    
    public final StatementNode dropStatements() throws ParseException, StandardException {
        this.jj_consume_token(129);
        StatementNode statementNode = null;
        switch (this.jj_nt.kind) {
            case 222: {
                statementNode = this.dropSchemaStatement();
                break;
            }
            case 239: {
                statementNode = this.dropTableStatement();
                break;
            }
            case 396: {
                statementNode = this.dropIndexStatement();
                break;
            }
            case 149:
            case 211:
            case 345:
            case 352:
            case 387: {
                statementNode = this.dropAliasStatement();
                break;
            }
            case 263: {
                statementNode = this.dropViewStatement();
                break;
            }
            case 438: {
                statementNode = this.dropTriggerStatement();
                break;
            }
            case 369: {
                statementNode = this.dropRoleStatement();
                break;
            }
            case 428: {
                statementNode = this.dropSequenceStatement();
                break;
            }
            default: {
                this.jj_la1[8] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return statementNode;
    }
    
    public final StatementNode spsAlterStatement() throws ParseException, StandardException {
        this.jj_consume_token(68);
        return this.alterTableStatement();
    }
    
    public final StatementNode spsSetStatement() throws ParseException, StandardException {
        if (this.getToken(1).kind == 227 && this.getToken(2).kind != 108) {
            this.jj_consume_token(227);
            StatementNode statementNode = null;
            if (this.jj_2_5(1)) {
                statementNode = this.setIsolationStatement();
            }
            else if (this.jj_2_6(1)) {
                statementNode = this.setSchemaStatement();
            }
            else {
                switch (this.jj_nt.kind) {
                    case 402: {
                        statementNode = this.setMessageLocaleStatement();
                        break;
                    }
                    case 369: {
                        statementNode = this.setRoleStatement();
                        break;
                    }
                    default: {
                        this.jj_la1[9] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
            return statementNode;
        }
        if (this.getToken(1).kind == 227 && this.getToken(2).kind == 108) {
            this.jj_consume_token(227);
            StatementNode statementNode2;
            if (this.jj_2_7(1)) {
                statementNode2 = this.setSchemaStatement();
            }
            else {
                if (!this.jj_2_8(1)) {
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
                statementNode2 = this.setIsolationStatement();
            }
            return statementNode2;
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode preparableSQLDataStatement() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 122: {
                return this.preparableDeleteStatement();
            }
            case 225:
            case 259:
            case 449: {
                return this.preparableSelectStatement(true);
            }
            case 166: {
                return this.insertStatement();
            }
            case 254: {
                return this.preparableUpdateStatement();
            }
            case 357:
            case 447:
            case 467: {
                return this.callStatement();
            }
            case 220:
            case 324:
            case 330: {
                return this.savepointStatement();
            }
            default: {
                this.jj_la1[10] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode preparableDeleteStatement() throws ParseException, StandardException {
        this.jj_consume_token(122);
        return this.deleteBody();
    }
    
    public final StatementNode deleteBody() throws ParseException, StandardException {
        String identifier = null;
        final TableName tableName = null;
        ValueNode valueNode = null;
        FromTable currentOfClause = null;
        Properties propertyList = null;
        if (this.fromNewInvocationFollows()) {
            this.jj_consume_token(147);
            final JavaToSQLValueNode invocation = this.newInvocation();
            switch (this.jj_nt.kind) {
                case 265: {
                    valueNode = this.whereClause(this.jj_consume_token(265));
                    break;
                }
                default: {
                    this.jj_la1[11] = this.jj_gen;
                    break;
                }
            }
            return this.getDeleteNode((FromTable)this.nodeFactory.getNode(120, invocation.getJavaValueNode(), null, null, null, this.getContextManager()), tableName, valueNode);
        }
        switch (this.jj_nt.kind) {
            case 147: {
                this.jj_consume_token(147);
                final TableName qualifiedName = this.qualifiedName(128);
                if (this.getToken(1).kind != 0 && this.getToken(1).kind != 265 && !this.derbyPropertiesListFollows()) {
                    switch (this.jj_nt.kind) {
                        case 72: {
                            this.jj_consume_token(72);
                            break;
                        }
                        default: {
                            this.jj_la1[12] = this.jj_gen;
                            break;
                        }
                    }
                    identifier = this.identifier(128, true);
                }
                switch (this.jj_nt.kind) {
                    case 59: {
                        propertyList = this.propertyList(false);
                        this.jj_consume_token(64);
                        break;
                    }
                    default: {
                        this.jj_la1[13] = this.jj_gen;
                        break;
                    }
                }
                switch (this.jj_nt.kind) {
                    case 265: {
                        final Token jj_consume_token = this.jj_consume_token(265);
                        if (this.getToken(1).kind == 108 && this.getToken(2).kind == 194) {
                            currentOfClause = this.currentOfClause(identifier);
                            break;
                        }
                        if (this.jj_2_9(1)) {
                            valueNode = this.whereClause(jj_consume_token);
                            break;
                        }
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                    default: {
                        this.jj_la1[14] = this.jj_gen;
                        break;
                    }
                }
                if (currentOfClause == null) {
                    currentOfClause = (FromTable)this.nodeFactory.getNode(135, qualifiedName, identifier, ReuseFactory.getInteger(2), null, this.getContextManager());
                }
                if (propertyList != null) {
                    ((FromBaseTable)currentOfClause).setTableProperties(propertyList);
                }
                return this.getDeleteNode(currentOfClause, qualifiedName, valueNode);
            }
            default: {
                this.jj_la1[15] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final FromTable currentOfClause(final String s) throws ParseException, StandardException {
        this.jj_consume_token(108);
        this.jj_consume_token(194);
        return (FromTable)this.nodeFactory.getNode(99, s, this.identifier(128, true), null, this.getContextManager());
    }
    
    public final CursorNode preparableSelectStatement(final boolean b) throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        int forUpdateClause = 0;
        int atIsolationLevel = 0;
        Object orderByClause = null;
        final ValueNode[] array = new ValueNode[2];
        final ResultSetNode queryExpression = this.queryExpression(null, 0);
        switch (this.jj_nt.kind) {
            case 200: {
                orderByClause = this.orderByClause(queryExpression);
                break;
            }
            default: {
                this.jj_la1[16] = this.jj_gen;
                break;
            }
        }
        final boolean offsetFetchFirstClause = this.offsetFetchFirstClause(array);
        switch (this.jj_nt.kind) {
            case 144: {
                this.jj_consume_token(144);
                forUpdateClause = this.forUpdateClause(list);
                break;
            }
            default: {
                this.jj_la1[17] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 267: {
                atIsolationLevel = this.atIsolationLevel();
                break;
            }
            default: {
                this.jj_la1[18] = this.jj_gen;
                break;
            }
        }
        final CursorNode cursorNode = (CursorNode)this.nodeFactory.getNode(147, "SELECT", queryExpression, null, orderByClause, array[0], array[1], offsetFetchFirstClause, ReuseFactory.getInteger(forUpdateClause), (forUpdateClause == 1) ? null : list, this.getContextManager());
        if (b) {
            this.setUpAndLinkParameters();
        }
        if (atIsolationLevel != 0) {
            this.getCompilerContext().setScanIsolationLevel(atIsolationLevel);
        }
        return cursorNode;
    }
    
    public final StatementNode insertStatement() throws ParseException, StandardException {
        this.jj_consume_token(166);
        this.jj_consume_token(170);
        final StatementNode insertColumnsAndSource = this.insertColumnsAndSource(this.targetTable());
        this.setUpAndLinkParameters();
        return insertColumnsAndSource;
    }
    
    public final QueryTreeNode targetTable() throws ParseException, StandardException {
        final Object o = null;
        if (this.newInvocationFollows(1)) {
            return (QueryTreeNode)this.nodeFactory.getNode(120, this.newInvocation().getJavaValueNode(), o, null, null, this.getContextManager());
        }
        if (this.jj_2_10(1)) {
            return this.qualifiedName(128);
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode preparableUpdateStatement() throws ParseException, StandardException {
        this.jj_consume_token(254);
        return this.updateBody();
    }
    
    public final boolean tableOrIndex() throws ParseException {
        switch (this.jj_nt.kind) {
            case 239: {
                this.jj_consume_token(239);
                return true;
            }
            case 396: {
                this.jj_consume_token(396);
                return false;
            }
            default: {
                this.jj_la1[19] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode updateBody() throws ParseException, StandardException {
        String identifier = null;
        final TableName tableName = null;
        ValueNode valueNode = null;
        FromTable currentOfClause = null;
        Properties propertyList = null;
        if (this.newInvocationFollows(1)) {
            final JavaToSQLValueNode invocation = this.newInvocation();
            this.jj_consume_token(227);
            final ResultColumnList setClauseList = this.setClauseList();
            switch (this.jj_nt.kind) {
                case 265: {
                    valueNode = this.whereClause(this.jj_consume_token(265));
                    break;
                }
                default: {
                    this.jj_la1[20] = this.jj_gen;
                    break;
                }
            }
            return this.getUpdateNode((FromTable)this.nodeFactory.getNode(120, invocation.getJavaValueNode(), null, null, null, this.getContextManager()), tableName, setClauseList, valueNode);
        }
        if (this.jj_2_12(1)) {
            final TableName qualifiedName = this.qualifiedName(128);
            if (this.getToken(1).kind != 227 && !this.derbyPropertiesListFollows()) {
                switch (this.jj_nt.kind) {
                    case 72: {
                        this.jj_consume_token(72);
                        break;
                    }
                    default: {
                        this.jj_la1[21] = this.jj_gen;
                        break;
                    }
                }
                identifier = this.identifier(128, true);
            }
            switch (this.jj_nt.kind) {
                case 59: {
                    propertyList = this.propertyList(false);
                    this.jj_consume_token(64);
                    break;
                }
                default: {
                    this.jj_la1[22] = this.jj_gen;
                    break;
                }
            }
            this.jj_consume_token(227);
            final ResultColumnList setClauseList2 = this.setClauseList();
            Label_0430: {
                switch (this.jj_nt.kind) {
                    case 265: {
                        final Token jj_consume_token = this.jj_consume_token(265);
                        if (this.jj_2_11(1)) {
                            valueNode = this.whereClause(jj_consume_token);
                            break;
                        }
                        switch (this.jj_nt.kind) {
                            case 108: {
                                currentOfClause = this.currentOfClause(identifier);
                                break Label_0430;
                            }
                            default: {
                                this.jj_la1[23] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();
                            }
                        }
                        break;
                    }
                    default: {
                        this.jj_la1[24] = this.jj_gen;
                        break;
                    }
                }
            }
            if (currentOfClause == null) {
                currentOfClause = (FromTable)this.nodeFactory.getNode(135, qualifiedName, identifier, ReuseFactory.getInteger(1), null, this.getContextManager());
            }
            if (propertyList != null) {
                ((FromBaseTable)currentOfClause).setTableProperties(propertyList);
            }
            return this.getUpdateNode(currentOfClause, qualifiedName, setClauseList2, valueNode);
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode callStatement() throws ParseException, StandardException {
        StatementNode statementNode = null;
        switch (this.jj_nt.kind) {
            case 357:
            case 467: {
                statementNode = this.bareCallStatement();
                break;
            }
            case 447: {
                this.jj_consume_token(447);
                statementNode = this.bareCallStatement();
                this.jj_consume_token(448);
                break;
            }
            default: {
                this.jj_la1[25] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return statementNode;
    }
    
    public final StatementNode bareCallStatement() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 357: {
                this.jj_consume_token(357);
                final ValueNode primaryExpression = this.primaryExpression();
                if (!(primaryExpression instanceof JavaToSQLValueNode) || !(((JavaToSQLValueNode)primaryExpression).getJavaValueNode() instanceof MethodCallNode)) {
                    throw StandardException.newException("42X74");
                }
                final StatementNode statementNode = (StatementNode)this.nodeFactory.getNode(95, primaryExpression, this.getContextManager());
                this.setUpAndLinkParameters();
                return statementNode;
            }
            case 467: {
                final ParameterNode dynamicParameterSpecification = this.dynamicParameterSpecification();
                this.getCompilerContext().setReturnParameterFlag();
                this.jj_consume_token(462);
                this.jj_consume_token(357);
                final ResultSetNode rowValueConstructor = this.rowValueConstructor(null);
                final ResultColumnList resultColumns = rowValueConstructor.getResultColumns();
                if (resultColumns == null || resultColumns.size() > 1) {
                    throw StandardException.newException("42X74");
                }
                final ValueNode expression = ((ResultColumn)resultColumns.elementAt(0)).getExpression();
                if (!(expression instanceof JavaToSQLValueNode) || !(((JavaToSQLValueNode)expression).getJavaValueNode() instanceof MethodCallNode)) {
                    throw StandardException.newException("42X74");
                }
                final StatementNode statementNode2 = (StatementNode)this.nodeFactory.getNode(147, "SELECT", rowValueConstructor, null, null, null, null, null, ReuseFactory.getInteger(1), null, this.getContextManager());
                dynamicParameterSpecification.setReturnOutputParam(expression);
                this.setUpAndLinkParameters();
                return statementNode2;
            }
            default: {
                this.jj_la1[26] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode primaryExpression() throws ParseException, StandardException {
        if (this.getToken(2).kind == 455 && this.getToken(4).kind == 449) {
            return this.routineInvocation();
        }
        if (this.jj_2_13(1)) {
            return this.primaryExpressionXX();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode savepointStatement() throws ParseException, StandardException {
        Object o = null;
        final Object[] array = new Object[3];
        int n = 0;
        Label_0333: {
            switch (this.jj_nt.kind) {
                case 330: {
                    this.jj_consume_token(330);
                    o = this.identifier(128, true);
                    while (true) {
                        this.savepointStatementClause(array);
                        switch (this.jj_nt.kind) {
                            case 195:
                            case 252: {
                                continue;
                            }
                            default: {
                                this.jj_la1[27] = this.jj_gen;
                                if (array[2] == null) {
                                    throw StandardException.newException("42X01", "MISSING ON ROLLBACK RETAIN CURSORS");
                                }
                                n = 1;
                                break Label_0333;
                            }
                        }
                    }
                    break;
                }
                case 220: {
                    this.jj_consume_token(220);
                    switch (this.jj_nt.kind) {
                        case 268: {
                            this.jj_consume_token(268);
                            break;
                        }
                        default: {
                            this.jj_la1[28] = this.jj_gen;
                            break;
                        }
                    }
                    this.jj_consume_token(243);
                    this.jj_consume_token(330);
                    if (this.jj_2_14(1)) {
                        o = this.identifier(128, true);
                    }
                    n = 2;
                    break;
                }
                case 324: {
                    this.jj_consume_token(324);
                    switch (this.jj_nt.kind) {
                        case 243: {
                            this.jj_consume_token(243);
                            break;
                        }
                        default: {
                            this.jj_la1[29] = this.jj_gen;
                            break;
                        }
                    }
                    this.jj_consume_token(330);
                    o = this.identifier(128, true);
                    n = 3;
                    break;
                }
                default: {
                    this.jj_la1[30] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        return (StatementNode)this.nodeFactory.getNode(198, o, ReuseFactory.getInteger(n), this.getContextManager());
    }
    
    public final void savepointStatementClause(final Object[] array) throws ParseException, StandardException {
        int locksOrCursors = 0;
        switch (this.jj_nt.kind) {
            case 252: {
                this.jj_consume_token(252);
                locksOrCursors = 0;
                break;
            }
            case 195: {
                this.jj_consume_token(195);
                this.jj_consume_token(220);
                this.jj_consume_token(423);
                locksOrCursors = this.LocksOrCursors();
                break;
            }
            default: {
                this.jj_la1[31] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        if (locksOrCursors != -1) {
            if (array[locksOrCursors] != null) {
                throw StandardException.newException("42613", SQLParser.SAVEPOINT_CLAUSE_NAMES[locksOrCursors]);
            }
            array[locksOrCursors] = Boolean.TRUE;
        }
    }
    
    public final int LocksOrCursors() throws ParseException {
        switch (this.jj_nt.kind) {
            case 303: {
                this.jj_consume_token(303);
                return 1;
            }
            case 385: {
                this.jj_consume_token(385);
                return 2;
            }
            default: {
                this.jj_la1[32] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode globalTemporaryTableDeclaration() throws ParseException, StandardException {
        final Object[] array = new Object[3];
        this.jj_consume_token(118);
        this.jj_consume_token(151);
        this.jj_consume_token(240);
        this.jj_consume_token(239);
        final TableName qualifiedName = this.qualifiedName(128);
        final TableElementList tableElementList = this.tableElementList();
        do {
            this.declareTableClause(array);
        } while (this.jj_2_15(1));
        if (array[0] == null) {
            throw StandardException.newException("42X01", "MISSING NOT LOGGED");
        }
        if (array[1] == null) {
            array[1] = Boolean.TRUE;
        }
        if (array[2] == null) {
            array[2] = Boolean.TRUE;
        }
        return (StatementNode)this.nodeFactory.getNode(141, qualifiedName, tableElementList, null, array[1], array[2], this.getContextManager());
    }
    
    public final void declareTableClause(final Object[] array) throws ParseException, StandardException {
        Boolean b = null;
        int n = 0;
        switch (this.jj_nt.kind) {
            case 190: {
                this.jj_consume_token(190);
                this.jj_consume_token(305);
                b = Boolean.TRUE;
                n = 0;
                break;
            }
            default: {
                this.jj_la1[33] = this.jj_gen;
                if (this.getToken(1).kind == 195 && this.getToken(2).kind == 97) {
                    this.jj_consume_token(195);
                    this.jj_consume_token(97);
                    b = this.onCommit();
                    this.jj_consume_token(221);
                    n = 1;
                    break;
                }
                if (this.getToken(1).kind == 195 && this.getToken(2).kind == 220) {
                    this.jj_consume_token(195);
                    this.jj_consume_token(220);
                    this.jj_consume_token(122);
                    this.jj_consume_token(221);
                    b = Boolean.TRUE;
                    n = 2;
                    break;
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        if (n != -1) {
            if (array[n] != null) {
                throw StandardException.newException("42613", SQLParser.TEMPORARY_TABLE_CLAUSE_NAMES[n]);
            }
            array[n] = b;
        }
    }
    
    public final Boolean onCommit() throws ParseException {
        switch (this.jj_nt.kind) {
            case 207: {
                this.jj_consume_token(207);
                return Boolean.FALSE;
            }
            case 122: {
                this.jj_consume_token(122);
                return Boolean.TRUE;
            }
            default: {
                this.jj_la1[34] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final TableElementList tableElementList() throws ParseException, StandardException {
        final TableElementList list = (TableElementList)this.nodeFactory.getNode(12, this.getContextManager());
        this.jj_consume_token(449);
        this.tableElement(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.tableElement(list);
                    continue;
                }
                default: {
                    this.jj_la1[35] = this.jj_gen;
                    this.jj_consume_token(450);
                    return list;
                }
            }
        }
    }
    
    public final void tableElement(final TableElementList list) throws ParseException, StandardException {
        if (this.jj_2_16(1)) {
            list.addTableElement(this.columnDefinition(list));
        }
        else {
            switch (this.jj_nt.kind) {
                case 91:
                case 100:
                case 145:
                case 208:
                case 252: {
                    list.addTableElement(this.tableConstraintDefinition());
                    break;
                }
                default: {
                    this.jj_la1[36] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final TableElementNode columnDefinition(final TableElementList list) throws ParseException, StandardException {
        final DataTypeDescriptor[] array = { null };
        Object defaultAndConstraints = null;
        long[] array2 = new long[4];
        final String identifier = this.identifier(128, true);
        if (this.jj_2_17(1)) {
            array[0] = this.dataTypeDDL();
        }
        switch (this.jj_nt.kind) {
            case 91:
            case 100:
            case 119:
            case 190:
            case 208:
            case 215:
            case 252:
            case 267:
            case 291: {
                defaultAndConstraints = this.defaultAndConstraints(array, list, identifier, array2);
                break;
            }
            default: {
                this.jj_la1[37] = this.jj_gen;
                break;
            }
        }
        if (array2[2] == 0L) {
            array2 = null;
        }
        return (TableElementNode)this.nodeFactory.getNode(116, identifier, defaultAndConstraints, array[0], array2, this.getContextManager());
    }
    
    public final ValueNode defaultAndConstraints(final DataTypeDescriptor[] array, final TableElementList list, final String s, final long[] array2) throws ParseException, StandardException {
        ValueNode defaultClause = null;
        switch (this.jj_nt.kind) {
            case 91:
            case 100:
            case 190:
            case 208:
            case 215:
            case 252: {
                this.columnConstraintDefinition(array, list, s);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 91:
                        case 100:
                        case 190:
                        case 208:
                        case 215:
                        case 252: {
                            this.columnConstraintDefinition(array, list, s);
                            continue;
                        }
                        default: {
                            this.jj_la1[38] = this.jj_gen;
                            Label_0346: {
                                switch (this.jj_nt.kind) {
                                    case 119:
                                    case 267:
                                    case 291: {
                                        defaultClause = this.defaultClause(array2, s);
                                        while (true) {
                                            switch (this.jj_nt.kind) {
                                                case 91:
                                                case 100:
                                                case 190:
                                                case 208:
                                                case 215:
                                                case 252: {
                                                    this.columnConstraintDefinition(array, list, s);
                                                    continue;
                                                }
                                                default: {
                                                    this.jj_la1[39] = this.jj_gen;
                                                    break Label_0346;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    default: {
                                        this.jj_la1[40] = this.jj_gen;
                                        break;
                                    }
                                }
                            }
                            return defaultClause;
                        }
                    }
                }
                break;
            }
            case 119:
            case 267:
            case 291: {
                final ValueNode defaultClause2 = this.defaultClause(array2, s);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 91:
                        case 100:
                        case 190:
                        case 208:
                        case 215:
                        case 252: {
                            this.columnConstraintDefinition(array, list, s);
                            continue;
                        }
                        default: {
                            this.jj_la1[41] = this.jj_gen;
                            return defaultClause2;
                        }
                    }
                }
                break;
            }
            default: {
                this.jj_la1[42] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor dataTypeDDL() throws ParseException, StandardException {
        if (this.commonDatatypeName(false)) {
            return this.dataTypeCommon();
        }
        if (this.getToken(1).kind != 291) {
            return this.javaType();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final TypeDescriptor catalogType() throws ParseException, StandardException {
        return this.dataTypeDDL().getCatalogType();
    }
    
    public final DataTypeDescriptor dataTypeCast() throws ParseException, StandardException {
        if (this.commonDatatypeName(true)) {
            return this.dataTypeCommon();
        }
        if (this.jj_2_18(1)) {
            return this.javaType();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final DataTypeDescriptor dataTypeCommon() throws ParseException, StandardException {
        DataTypeDescriptor dataTypeDescriptor;
        if (this.jj_2_19(1)) {
            if (this.getToken(2).kind == 299) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            dataTypeDescriptor = this.characterStringType();
        }
        else if (this.jj_2_20(1)) {
            if (this.getToken(3).kind == 299) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            dataTypeDescriptor = this.nationalCharacterStringType();
        }
        else if (this.jj_2_21(1)) {
            dataTypeDescriptor = this.numericType();
        }
        else {
            switch (this.jj_nt.kind) {
                case 285:
                case 347:
                case 348: {
                    dataTypeDescriptor = this.datetimeType();
                    break;
                }
                case 356: {
                    this.jj_consume_token(356);
                    if ((this.getCompilerContext().getReliability() & 0x400) != 0x0) {
                        this.checkVersion(190, "BOOLEAN");
                    }
                    dataTypeDescriptor = new DataTypeDescriptor(TypeId.BOOLEAN_ID, true);
                    break;
                }
                case 365: {
                    dataTypeDescriptor = this.longType();
                    break;
                }
                case 80:
                case 88:
                case 89:
                case 185:
                case 275:
                case 278:
                case 315: {
                    dataTypeDescriptor = this.LOBType();
                    break;
                }
                case 373: {
                    dataTypeDescriptor = this.XMLType();
                    break;
                }
                default: {
                    this.jj_la1[43] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        return dataTypeDescriptor;
    }
    
    public final DataTypeDescriptor characterStringType() throws ParseException, StandardException {
        int n = 1;
        Token jj_consume_token = null;
        int forBitData = 0;
        switch (this.jj_nt.kind) {
            case 261: {
                this.jj_consume_token(261);
                n = this.charLength();
                forBitData = 12;
                break;
            }
            case 88:
            case 89: {
                this.charOrCharacter();
                Label_0163: {
                    switch (this.jj_nt.kind) {
                        case 262: {
                            jj_consume_token = this.jj_consume_token(262);
                            n = this.charLength();
                            break;
                        }
                        default: {
                            this.jj_la1[45] = this.jj_gen;
                            switch (this.jj_nt.kind) {
                                case 449: {
                                    n = this.charLength();
                                    break Label_0163;
                                }
                                default: {
                                    this.jj_la1[44] = this.jj_gen;
                                    break Label_0163;
                                }
                            }
                            break;
                        }
                    }
                }
                forBitData = ((jj_consume_token == null) ? 1 : 12);
                break;
            }
            default: {
                this.jj_la1[46] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        switch (this.jj_nt.kind) {
            case 144: {
                forBitData = this.forBitData(forBitData);
                break;
            }
            default: {
                this.jj_la1[47] = this.jj_gen;
                break;
            }
        }
        this.checkTypeLimits(forBitData, n);
        return DataTypeDescriptor.getBuiltInDataTypeDescriptor(forBitData, n);
    }
    
    public final void charOrCharacter() throws ParseException {
        switch (this.jj_nt.kind) {
            case 88: {
                this.jj_consume_token(88);
                break;
            }
            case 89: {
                this.jj_consume_token(89);
                break;
            }
            default: {
                this.jj_la1[48] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int charLength() throws ParseException, StandardException {
        this.jj_consume_token(449);
        final int length = this.length();
        this.jj_consume_token(450);
        return length;
    }
    
    public final int forBitData(int n) throws ParseException {
        this.jj_consume_token(144);
        this.jj_consume_token(81);
        this.jj_consume_token(284);
        if (n == 1) {
            n = -2;
        }
        else if (n == 12) {
            n = -3;
        }
        else if (n == -1) {
            n = -4;
        }
        return n;
    }
    
    public final DataTypeDescriptor nationalCharacterStringType() throws ParseException, StandardException {
        Token token = null;
        String s = null;
        switch (this.jj_nt.kind) {
            case 185: {
                this.jj_consume_token(185);
                this.charOrCharacter();
                Label_0155: {
                    switch (this.jj_nt.kind) {
                        case 262: {
                            token = this.jj_consume_token(262);
                            this.charLength();
                            break;
                        }
                        default: {
                            this.jj_la1[50] = this.jj_gen;
                            switch (this.jj_nt.kind) {
                                case 449: {
                                    this.charLength();
                                    break Label_0155;
                                }
                                default: {
                                    this.jj_la1[49] = this.jj_gen;
                                    break Label_0155;
                                }
                            }
                            break;
                        }
                    }
                }
                s = ((token == null) ? "NATIONAL CHAR" : "NATIONAL CHAR VARYING");
                break;
            }
            case 187: {
                this.jj_consume_token(187);
                Label_0279: {
                    switch (this.jj_nt.kind) {
                        case 262: {
                            token = this.jj_consume_token(262);
                            this.charLength();
                            break;
                        }
                        default: {
                            this.jj_la1[52] = this.jj_gen;
                            switch (this.jj_nt.kind) {
                                case 449: {
                                    this.charLength();
                                    break Label_0279;
                                }
                                default: {
                                    this.jj_la1[51] = this.jj_gen;
                                    break Label_0279;
                                }
                            }
                            break;
                        }
                    }
                }
                s = ((token == null) ? "NATIONAL CHAR" : "NATIONAL CHAR VARYING");
                break;
            }
            case 407: {
                this.jj_consume_token(407);
                this.charLength();
                s = "NATIONAL CHAR VARYING";
                break;
            }
            default: {
                this.jj_la1[53] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        throw StandardException.newException("0A000.S", s);
    }
    
    public final DataTypeDescriptor LOBType() throws ParseException, StandardException {
        int n = Integer.MAX_VALUE;
        String s = null;
        switch (this.jj_nt.kind) {
            case 275: {
                this.jj_consume_token(275);
                switch (this.jj_nt.kind) {
                    case 449: {
                        n = this.lengthAndModifier();
                        break;
                    }
                    default: {
                        this.jj_la1[54] = this.jj_gen;
                        break;
                    }
                }
                s = "BLOB";
                break;
            }
            case 278: {
                this.jj_consume_token(278);
                switch (this.jj_nt.kind) {
                    case 449: {
                        n = this.lengthAndModifier();
                        break;
                    }
                    default: {
                        this.jj_la1[55] = this.jj_gen;
                        break;
                    }
                }
                s = "CLOB";
                break;
            }
            case 315: {
                this.jj_consume_token(315);
                this.lengthAndModifier();
                throw StandardException.newException("0A000.S", "NCLOB");
            }
            case 80: {
                this.jj_consume_token(80);
                this.jj_consume_token(299);
                this.jj_consume_token(319);
                switch (this.jj_nt.kind) {
                    case 449: {
                        n = this.lengthAndModifier();
                        break;
                    }
                    default: {
                        this.jj_la1[56] = this.jj_gen;
                        break;
                    }
                }
                s = "BLOB";
                break;
            }
            case 88:
            case 89: {
                this.charOrCharacter();
                this.jj_consume_token(299);
                this.jj_consume_token(319);
                switch (this.jj_nt.kind) {
                    case 449: {
                        n = this.lengthAndModifier();
                        break;
                    }
                    default: {
                        this.jj_la1[57] = this.jj_gen;
                        break;
                    }
                }
                s = "CLOB";
                break;
            }
            case 185: {
                this.jj_consume_token(185);
                this.jj_consume_token(89);
                this.jj_consume_token(299);
                this.jj_consume_token(319);
                this.lengthAndModifier();
                throw StandardException.newException("0A000.S", "NCLOB");
            }
            default: {
                this.jj_la1[58] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return DataTypeDescriptor.getBuiltInDataTypeDescriptor(s, n);
    }
    
    public final DataTypeDescriptor numericType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 116:
            case 117:
            case 167:
            case 168:
            case 193:
            case 228:
            case 364: {
                return this.exactNumericType();
            }
            default: {
                this.jj_la1[59] = this.jj_gen;
                if (this.jj_2_22(1)) {
                    return this.approximateNumericType();
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor exactNumericType() throws ParseException, StandardException {
        int precision = 5;
        int scale = 0;
        int n = 3;
        String s = "DECIMAL";
        switch (this.jj_nt.kind) {
            case 116:
            case 117:
            case 193: {
                switch (this.jj_nt.kind) {
                    case 193: {
                        this.jj_consume_token(193);
                        n = 2;
                        s = "NUMERIC";
                        break;
                    }
                    case 117: {
                        this.jj_consume_token(117);
                        break;
                    }
                    case 116: {
                        this.jj_consume_token(116);
                        break;
                    }
                    default: {
                        this.jj_la1[60] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                switch (this.jj_nt.kind) {
                    case 449: {
                        this.jj_consume_token(449);
                        precision = this.precision();
                        switch (this.jj_nt.kind) {
                            case 453: {
                                this.jj_consume_token(453);
                                scale = this.scale();
                                break;
                            }
                            default: {
                                this.jj_la1[61] = this.jj_gen;
                                break;
                            }
                        }
                        this.jj_consume_token(450);
                        break;
                    }
                    default: {
                        this.jj_la1[62] = this.jj_gen;
                        break;
                    }
                }
                if (precision <= 0 || precision > 31) {
                    throw StandardException.newException("42X48", s, String.valueOf(precision));
                }
                if (scale < 0 || scale > 31) {
                    throw StandardException.newException("42Y42", s, String.valueOf(scale));
                }
                if (scale > precision) {
                    throw StandardException.newException("42Y43", String.valueOf(scale), String.valueOf(precision));
                }
                return this.getDataTypeServices(n, precision, scale, DataTypeUtilities.computeMaxWidth(precision, scale));
            }
            case 167:
            case 168:
            case 228:
            case 364: {
                return this.exactIntegerType();
            }
            default: {
                this.jj_la1[63] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor exactIntegerType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 167:
            case 168: {
                switch (this.jj_nt.kind) {
                    case 168: {
                        this.jj_consume_token(168);
                        break;
                    }
                    case 167: {
                        this.jj_consume_token(167);
                        break;
                    }
                    default: {
                        this.jj_la1[64] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(4);
            }
            case 228: {
                this.jj_consume_token(228);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(5);
            }
            case 364: {
                this.jj_consume_token(364);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(-5);
            }
            default: {
                this.jj_la1[65] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor approximateNumericType() throws ParseException, StandardException {
        int precision = -1;
        switch (this.jj_nt.kind) {
            case 143: {
                this.jj_consume_token(143);
                switch (this.jj_nt.kind) {
                    case 449: {
                        this.jj_consume_token(449);
                        precision = this.precision();
                        this.jj_consume_token(450);
                        break;
                    }
                    default: {
                        this.jj_la1[66] = this.jj_gen;
                        break;
                    }
                }
                if (precision == -1) {
                    precision = 52;
                }
                int n;
                int n2;
                int n3;
                int n4;
                if (precision > 0 && precision <= 23) {
                    n = 7;
                    n2 = 23;
                    n3 = 0;
                    n4 = 4;
                }
                else {
                    if (precision <= 23 || precision > 52) {
                        throw StandardException.newException("42X48", "FLOAT", String.valueOf(precision));
                    }
                    n = 8;
                    n2 = 52;
                    n3 = 0;
                    n4 = 8;
                }
                return this.getDataTypeServices(n, n2, n3, n4);
            }
            case 214: {
                this.jj_consume_token(214);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(7);
            }
            default: {
                this.jj_la1[67] = this.jj_gen;
                if (this.jj_2_23(1)) {
                    return this.doubleType();
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor doubleType() throws ParseException, StandardException {
        if (this.getToken(2).kind == 323) {
            this.jj_consume_token(128);
            this.jj_consume_token(323);
        }
        else {
            switch (this.jj_nt.kind) {
                case 128: {
                    this.jj_consume_token(128);
                    break;
                }
                default: {
                    this.jj_la1[68] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        return DataTypeDescriptor.getBuiltInDataTypeDescriptor(8);
    }
    
    public final DataTypeDescriptor longType() throws ParseException, StandardException {
        this.jj_consume_token(365);
        return this.longSubType();
    }
    
    public final DataTypeDescriptor longSubType() throws ParseException, StandardException {
        int forBitData = -1;
        switch (this.jj_nt.kind) {
            case 261: {
                this.jj_consume_token(261);
                switch (this.jj_nt.kind) {
                    case 144: {
                        forBitData = this.forBitData(forBitData);
                        break;
                    }
                    default: {
                        this.jj_la1[69] = this.jj_gen;
                        break;
                    }
                }
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(forBitData);
            }
            case 407: {
                this.jj_consume_token(407);
                throw StandardException.newException("0A000.S", "LONG NVARCHAR");
            }
            default: {
                this.jj_la1[70] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor XMLType() throws ParseException, StandardException {
        this.jj_consume_token(373);
        this.checkVersion(130, "XML");
        return DataTypeDescriptor.getBuiltInDataTypeDescriptor(2009);
    }
    
    public final void xmlDocOrContent() throws ParseException, StandardException {
        if (this.getToken(1).kind != 391 && this.getToken(1).kind != 383) {
            throw StandardException.newException("42Z72", "DOCUMENT", ReuseFactory.getInteger(this.getToken(1).beginLine), ReuseFactory.getInteger(this.getToken(1).beginColumn));
        }
        if (this.getToken(1).kind == 383) {
            this.jj_consume_token(383);
            throw StandardException.newException("42Z74", "CONTENT");
        }
        if (this.getToken(1).kind == 391) {
            this.jj_consume_token(391);
            return;
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final DataTypeDescriptor javaType() throws ParseException, StandardException {
        return this.getJavaClassDataTypeDescriptor(this.qualifiedName(128));
    }
    
    public final String javaDSL() throws ParseException {
        String s = this.caseSensitiveIdentifierPlusReservedWords();
        while (true) {
            switch (this.jj_nt.kind) {
                case 455: {
                    s = this.javaDSLNameExtender(s);
                    continue;
                }
                default: {
                    this.jj_la1[71] = this.jj_gen;
                    return s;
                }
            }
        }
    }
    
    public final String javaClassName() throws ParseException {
        return this.javaDSL();
    }
    
    public final String javaDSLNameExtender(final String str) throws ParseException {
        this.jj_consume_token(455);
        return str + "." + this.caseSensitiveIdentifierPlusReservedWords();
    }
    
    public final int lengthAndModifier() throws ParseException, StandardException {
        Token jj_consume_token = null;
        this.jj_consume_token(449);
        Token token = null;
        Label_0138: {
            switch (this.jj_nt.kind) {
                case 484: {
                    token = this.jj_consume_token(484);
                    break;
                }
                case 482: {
                    token = this.jj_consume_token(482);
                    switch (this.jj_nt.kind) {
                        case 475: {
                            jj_consume_token = this.jj_consume_token(475);
                            break Label_0138;
                        }
                        default: {
                            this.jj_la1[72] = this.jj_gen;
                            break Label_0138;
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[73] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        this.jj_consume_token(450);
        final String string = token.image + ((jj_consume_token == null) ? "" : jj_consume_token.image);
        try {
            final char char1 = string.charAt(string.length() - 1);
            String substring = string.substring(0, string.length() - 1);
            long n = 0L;
            switch (char1) {
                case 71:
                case 103: {
                    n = 1073741824L;
                    break;
                }
                case 77:
                case 109: {
                    n = 1048576L;
                    break;
                }
                case 75:
                case 107: {
                    n = 1024L;
                    break;
                }
                default: {
                    n = 1L;
                    substring = string;
                    break;
                }
            }
            final long n2 = Long.parseLong(substring) * n;
            if (n2 > 0L && n2 <= 2147483647L) {
                return (int)n2;
            }
            if (n != 1L && n2 == 2147483648L) {
                return Integer.MAX_VALUE;
            }
        }
        catch (NumberFormatException ex) {}
        throw StandardException.newException("42X44", string);
    }
    
    public final int length() throws ParseException, StandardException {
        final Token jj_consume_token = this.jj_consume_token(482);
        try {
            final int int1 = Integer.parseInt(jj_consume_token.image);
            if (int1 > 0) {
                return int1;
            }
        }
        catch (NumberFormatException ex) {}
        throw StandardException.newException("42X44", jj_consume_token.image);
    }
    
    public final long exactNumber() throws ParseException, StandardException {
        String sign = "";
        switch (this.jj_nt.kind) {
            case 452:
            case 454: {
                sign = this.sign();
                break;
            }
            default: {
                this.jj_la1[74] = this.jj_gen;
                break;
            }
        }
        final Token jj_consume_token = this.jj_consume_token(482);
        try {
            if (sign.equals("-")) {
                return Long.parseLong("-" + jj_consume_token.image);
            }
            return Long.parseLong(jj_consume_token.image);
        }
        catch (NumberFormatException ex) {
            throw StandardException.newException("42X49", jj_consume_token.image);
        }
    }
    
    public final int precision() throws ParseException, StandardException {
        return this.uint_value();
    }
    
    public final int uint_value() throws ParseException, StandardException {
        final Token jj_consume_token = this.jj_consume_token(482);
        try {
            return Integer.parseInt(jj_consume_token.image);
        }
        catch (NumberFormatException ex) {
            throw StandardException.newException("42X49", jj_consume_token.image);
        }
    }
    
    public final int scale() throws ParseException, StandardException {
        return this.uint_value();
    }
    
    public final DataTypeDescriptor datetimeType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 285: {
                this.jj_consume_token(285);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(91);
            }
            case 347: {
                this.jj_consume_token(347);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(92);
            }
            case 348: {
                this.jj_consume_token(348);
                return DataTypeDescriptor.getBuiltInDataTypeDescriptor(93);
            }
            default: {
                this.jj_la1[75] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final TableName qualifiedName(final int n, final int n2) throws ParseException, StandardException {
        String s = null;
        String identifier = null;
        final String identifier2 = this.identifier(128, false);
        if (this.getToken(1).kind == 455 && this.getToken(2).kind != 451) {
            this.jj_consume_token(455);
            identifier = this.identifier(128, false);
        }
        String s2;
        if (identifier == null) {
            s2 = identifier2;
        }
        else {
            s = identifier2;
            s2 = identifier;
        }
        IdUtil.checkIdentifierLengthLimit(s2, n2);
        if (s != null) {
            IdUtil.checkIdentifierLengthLimit(s, 128);
        }
        return (TableName)this.nodeFactory.getNode(n, s, s2, new Integer(this.lastIdentifierToken.beginOffset), new Integer(this.lastIdentifierToken.endOffset), this.getContextManager());
    }
    
    public final ResultSetNode queryExpression(final ResultSetNode resultSetNode, final int n) throws ParseException, StandardException {
        ResultSetNode resultSetNode2 = this.nonJoinQueryTerm(resultSetNode, n);
        switch (this.jj_nt.kind) {
            case 134:
            case 251: {
                resultSetNode2 = this.unionOrExcept(resultSetNode2);
                break;
            }
            default: {
                this.jj_la1[76] = this.jj_gen;
                break;
            }
        }
        return resultSetNode2;
    }
    
    public final ResultSetNode unionOrExcept(final ResultSetNode resultSetNode) throws ParseException, StandardException {
        Token token = null;
        switch (this.jj_nt.kind) {
            case 251: {
                this.jj_consume_token(251);
                Label_0164: {
                    switch (this.jj_nt.kind) {
                        case 66:
                        case 127: {
                            switch (this.jj_nt.kind) {
                                case 66: {
                                    token = this.jj_consume_token(66);
                                    break Label_0164;
                                }
                                case 127: {
                                    this.jj_consume_token(127);
                                    break Label_0164;
                                }
                                default: {
                                    this.jj_la1[77] = this.jj_gen;
                                    this.jj_consume_token(-1);
                                    throw new ParseException();
                                }
                            }
                            break;
                        }
                        default: {
                            this.jj_la1[78] = this.jj_gen;
                            break;
                        }
                    }
                }
                final ResultSetNode queryExpression = this.queryExpression(resultSetNode, (token != null) ? 2 : 1);
                if (token != null && token.kind == 127) {
                    this.forbidNextValueFor();
                }
                return queryExpression;
            }
            case 134: {
                this.jj_consume_token(134);
                Label_0328: {
                    switch (this.jj_nt.kind) {
                        case 66:
                        case 127: {
                            switch (this.jj_nt.kind) {
                                case 66: {
                                    token = this.jj_consume_token(66);
                                    break Label_0328;
                                }
                                case 127: {
                                    this.jj_consume_token(127);
                                    break Label_0328;
                                }
                                default: {
                                    this.jj_la1[79] = this.jj_gen;
                                    this.jj_consume_token(-1);
                                    throw new ParseException();
                                }
                            }
                            break;
                        }
                        default: {
                            this.jj_la1[80] = this.jj_gen;
                            break;
                        }
                    }
                }
                final ResultSetNode queryExpression2 = this.queryExpression(resultSetNode, (token != null) ? 4 : 3);
                if (token != null && token.kind == 127) {
                    this.forbidNextValueFor();
                }
                return queryExpression2;
            }
            default: {
                this.jj_la1[81] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultSetNode nonJoinQueryTerm(final ResultSetNode resultSetNode, final int n) throws ParseException, StandardException {
        ResultSetNode resultSetNode2 = this.nonJoinQueryPrimary();
        switch (this.jj_nt.kind) {
            case 169: {
                resultSetNode2 = this.intersect(resultSetNode2);
                break;
            }
            default: {
                this.jj_la1[82] = this.jj_gen;
                break;
            }
        }
        switch (n) {
            case 0: {
                return resultSetNode2;
            }
            case 1: {
                return (ResultSetNode)this.nodeFactory.getNode(142, resultSetNode, resultSetNode2, Boolean.FALSE, Boolean.FALSE, null, this.getContextManager());
            }
            case 2: {
                return (ResultSetNode)this.nodeFactory.getNode(142, resultSetNode, resultSetNode2, Boolean.TRUE, Boolean.FALSE, null, this.getContextManager());
            }
            case 3: {
                return (ResultSetNode)this.nodeFactory.getNode(157, ReuseFactory.getInteger(2), resultSetNode, resultSetNode2, Boolean.FALSE, null, this.getContextManager());
            }
            case 4: {
                return (ResultSetNode)this.nodeFactory.getNode(157, ReuseFactory.getInteger(2), resultSetNode, resultSetNode2, Boolean.TRUE, null, this.getContextManager());
            }
            case 5: {
                return (ResultSetNode)this.nodeFactory.getNode(157, ReuseFactory.getInteger(1), resultSetNode, resultSetNode2, Boolean.FALSE, null, this.getContextManager());
            }
            case 6: {
                return (ResultSetNode)this.nodeFactory.getNode(157, ReuseFactory.getInteger(1), resultSetNode, resultSetNode2, Boolean.TRUE, null, this.getContextManager());
            }
            default: {
                return null;
            }
        }
    }
    
    public final ResultSetNode intersect(final ResultSetNode resultSetNode) throws ParseException, StandardException {
        Token jj_consume_token = null;
        this.jj_consume_token(169);
        Label_0132: {
            switch (this.jj_nt.kind) {
                case 66:
                case 127: {
                    switch (this.jj_nt.kind) {
                        case 66: {
                            jj_consume_token = this.jj_consume_token(66);
                            break Label_0132;
                        }
                        case 127: {
                            this.jj_consume_token(127);
                            break Label_0132;
                        }
                        default: {
                            this.jj_la1[83] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[84] = this.jj_gen;
                    break;
                }
            }
        }
        final ResultSetNode nonJoinQueryTerm = this.nonJoinQueryTerm(resultSetNode, (jj_consume_token != null) ? 6 : 5);
        if (jj_consume_token != null && jj_consume_token.kind == 127) {
            this.forbidNextValueFor();
        }
        return nonJoinQueryTerm;
    }
    
    public final ResultSetNode nonJoinQueryPrimary() throws ParseException, StandardException {
        OrderByList orderByClause = null;
        final ValueNode[] array = new ValueNode[2];
        switch (this.jj_nt.kind) {
            case 225:
            case 259: {
                return this.simpleTable();
            }
            case 449: {
                this.jj_consume_token(449);
                final ResultSetNode queryExpression = this.queryExpression(null, 0);
                switch (this.jj_nt.kind) {
                    case 200: {
                        orderByClause = this.orderByClause(queryExpression);
                        break;
                    }
                    default: {
                        this.jj_la1[85] = this.jj_gen;
                        break;
                    }
                }
                final boolean offsetFetchFirstClause = this.offsetFetchFirstClause(array);
                this.jj_consume_token(450);
                if (hasSelectSuffixClause(orderByClause, array)) {
                    if (!(queryExpression instanceof SelectNode) && !(queryExpression instanceof UnionNode) && !(queryExpression instanceof RowResultSetNode)) {
                        String s;
                        if (orderByClause != null) {
                            s = "ORDER BY";
                        }
                        else if (offsetFetchFirstClause) {
                            s = "LIMIT";
                        }
                        else if (array[0] != null) {
                            s = "OFFSET";
                        }
                        else {
                            s = "FETCH";
                        }
                        throw StandardException.newException("42X01", s);
                    }
                    queryExpression.pushOrderByList(orderByClause);
                    queryExpression.pushOffsetFetchFirst(array[0], array[1], offsetFetchFirstClause);
                }
                return queryExpression;
            }
            default: {
                this.jj_la1[86] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultSetNode simpleTable() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 225: {
                return this.querySpecification();
            }
            case 259: {
                return this.tableValueConstructor();
            }
            default: {
                this.jj_la1[87] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultSetNode querySpecification() throws ParseException, StandardException {
        boolean setQuantifier = false;
        this.jj_consume_token(225);
        if (this.jj_2_24(1)) {
            setQuantifier = this.setQuantifier();
        }
        final SelectNode tableExpression = this.tableExpression(this.selectList());
        if (setQuantifier) {
            tableExpression.makeDistinct();
        }
        return tableExpression;
    }
    
    public final boolean setQuantifier() throws ParseException {
        if (this.getToken(1).kind == 127 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458) {
            this.jj_consume_token(127);
            this.forbidNextValueFor();
            return true;
        }
        if (this.getToken(1).kind == 66 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458) {
            this.jj_consume_token(66);
            return false;
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ResultColumnList selectList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        switch (this.jj_nt.kind) {
            case 451: {
                this.jj_consume_token(451);
                list.addResultColumn((ResultColumn)this.nodeFactory.getNode(16, null, this.getContextManager()));
                return list;
            }
            default: {
                this.jj_la1[88] = this.jj_gen;
                if (this.jj_2_25(1)) {
                    this.selectColumnList(list);
                    return list;
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final void selectColumnList(final ResultColumnList list) throws ParseException, StandardException {
        this.selectSublist(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.selectSublist(list);
                    continue;
                }
                default: {
                    this.jj_la1[89] = this.jj_gen;
                }
            }
        }
    }
    
    public final void selectSublist(final ResultColumnList list) throws ParseException, StandardException {
        if (this.getToken(2).kind == 455 && (this.getToken(3).kind == 451 || (this.getToken(4).kind == 455 && this.getToken(5).kind == 451))) {
            final TableName qualifiedName = this.qualifiedName(128);
            this.jj_consume_token(455);
            this.jj_consume_token(451);
            list.addResultColumn((ResultColumn)this.nodeFactory.getNode(16, qualifiedName, this.getContextManager()));
        }
        else {
            if (!this.jj_2_26(1)) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            list.addResultColumn(this.derivedColumn(list));
        }
    }
    
    public final ResultColumn derivedColumn(final ResultColumnList list) throws ParseException, StandardException {
        String s = null;
        final ValueNode valueExpression = this.valueExpression();
        if (this.jj_2_27(1)) {
            s = this.asClause();
        }
        if (s == null && valueExpression instanceof ColumnReference) {
            s = ((ColumnReference)valueExpression).columnName;
        }
        return (ResultColumn)this.nodeFactory.getNode(80, s, valueExpression, this.getContextManager());
    }
    
    public final String asClause() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 72: {
                this.jj_consume_token(72);
                break;
            }
            default: {
                this.jj_la1[90] = this.jj_gen;
                break;
            }
        }
        return this.identifier(128, true);
    }
    
    public final ValueNode valueExpression() throws ParseException, StandardException {
        ValueNode valueNode = this.orExpression(null);
        while (true) {
            switch (this.jj_nt.kind) {
                case 199: {
                    this.jj_consume_token(199);
                    valueNode = this.orExpression(valueNode);
                    continue;
                }
                default: {
                    this.jj_la1[91] = this.jj_gen;
                    return valueNode;
                }
            }
        }
    }
    
    public final ValueNode orExpression(final ValueNode valueNode) throws ParseException, StandardException {
        ValueNode valueNode2 = this.andExpression(null);
        while (true) {
            switch (this.jj_nt.kind) {
                case 69: {
                    this.jj_consume_token(69);
                    valueNode2 = this.andExpression(valueNode2);
                    continue;
                }
                default: {
                    this.jj_la1[92] = this.jj_gen;
                    if (valueNode == null) {
                        return valueNode2;
                    }
                    return (ValueNode)this.nodeFactory.getNode(52, valueNode, valueNode2, this.getContextManager());
                }
            }
        }
    }
    
    public final ValueNode andExpression(final ValueNode valueNode) throws ParseException, StandardException {
        Token jj_consume_token = null;
        if (this.getToken(1).kind == 190 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458) {
            jj_consume_token = this.jj_consume_token(190);
        }
        ValueNode searchCondition = this.isSearchCondition();
        if (jj_consume_token != null) {
            searchCondition = (ValueNode)this.nodeFactory.getNode(26, searchCondition, this.getContextManager());
        }
        if (valueNode != null) {
            searchCondition = (ValueNode)this.nodeFactory.getNode(39, valueNode, searchCondition, this.getContextManager());
        }
        return searchCondition;
    }
    
    public final ValueNode isSearchCondition() throws ParseException, StandardException {
        Token jj_consume_token = null;
        Token jj_consume_token2 = null;
        final ValueNode booleanPrimary = this.booleanPrimary();
        switch (this.jj_nt.kind) {
            case 171: {
                jj_consume_token = this.jj_consume_token(171);
                switch (this.jj_nt.kind) {
                    case 190: {
                        jj_consume_token2 = this.jj_consume_token(190);
                        break;
                    }
                    default: {
                        this.jj_la1[93] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(191);
                break;
            }
            default: {
                this.jj_la1[94] = this.jj_gen;
                break;
            }
        }
        ValueNode valueNode;
        if (jj_consume_token != null) {
            valueNode = (ValueNode)this.nodeFactory.getNode(25, booleanPrimary, this.getContextManager());
            if (jj_consume_token2 != null) {
                valueNode = (ValueNode)this.nodeFactory.getNode(26, valueNode, this.getContextManager());
            }
        }
        else {
            valueNode = booleanPrimary;
        }
        return valueNode;
    }
    
    public final ValueNode booleanPrimary() throws ParseException, StandardException {
        return this.predicate();
    }
    
    public final ValueNode predicate() throws ParseException, StandardException {
        ValueNode valueNode = null;
        if (this.jj_2_28(1)) {
            valueNode = this.additiveExpression(null, 0);
        }
        else {
            switch (this.jj_nt.kind) {
                case 138: {
                    valueNode = this.existsExpression();
                    break;
                }
                default: {
                    this.jj_la1[95] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        while (this.remainingPredicateFollows()) {
            valueNode = this.remainingPredicate(valueNode);
        }
        return valueNode;
    }
    
    public final ValueNode remainingPredicate(ValueNode valueNode) throws ParseException, StandardException {
        Token jj_consume_token = null;
        switch (this.jj_nt.kind) {
            case 460:
            case 461:
            case 462:
            case 463:
            case 464:
            case 465:
            case 466: {
                valueNode = this.remainingNonNegatablePredicate(valueNode);
                return valueNode;
            }
            case 79:
            case 160:
            case 178:
            case 190: {
                switch (this.jj_nt.kind) {
                    case 190: {
                        jj_consume_token = this.jj_consume_token(190);
                        break;
                    }
                    default: {
                        this.jj_la1[96] = this.jj_gen;
                        break;
                    }
                }
                valueNode = this.remainingNegatablePredicate(valueNode);
                if (jj_consume_token != null) {
                    valueNode = (ValueNode)this.nodeFactory.getNode(26, valueNode, this.getContextManager());
                }
                return valueNode;
            }
            default: {
                this.jj_la1[97] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode remainingNonNegatablePredicate(ValueNode valueNode) throws ParseException, StandardException {
        final int compOp = this.compOp();
        if ((this.getToken(1).kind == 66 || this.getToken(1).kind == 70 || this.getToken(1).kind == 229) && this.getToken(2).kind == 449) {
            final int quantifier = this.quantifier(compOp);
            this.jj_consume_token(449);
            valueNode = this.tableSubquery(quantifier, valueNode);
            this.jj_consume_token(450);
        }
        else {
            if (!this.jj_2_29(1)) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            valueNode = this.additiveExpression(valueNode, compOp);
        }
        return valueNode;
    }
    
    public final ValueNode remainingNegatablePredicate(final ValueNode valueNode) throws ParseException, StandardException {
        Object o = null;
        switch (this.jj_nt.kind) {
            case 160: {
                this.jj_consume_token(160);
                return this.inPredicateValue(valueNode);
            }
            case 178: {
                this.jj_consume_token(178);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                if (this.jj_2_30(1)) {
                    switch (this.jj_nt.kind) {
                        case 133: {
                            this.jj_consume_token(133);
                            o = this.additiveExpression(null, 0);
                            break;
                        }
                        default: {
                            this.jj_la1[98] = this.jj_gen;
                            if (this.getToken(1).kind == 447 && this.getToken(2).kind != 302) {
                                this.jj_consume_token(447);
                                this.jj_consume_token(133);
                                o = this.additiveExpression(null, 0);
                                this.jj_consume_token(448);
                                break;
                            }
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                }
                return (ValueNode)this.nodeFactory.getNode(51, valueNode, additiveExpression, o, this.getContextManager());
            }
            case 79: {
                this.jj_consume_token(79);
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(69);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                final ValueNodeList list = (ValueNodeList)this.nodeFactory.getNode(15, this.getContextManager());
                list.addElement(additiveExpression2);
                list.addElement(additiveExpression3);
                return (ValueNode)this.nodeFactory.getNode(53, valueNode, list, this.getContextManager());
            }
            default: {
                this.jj_la1[99] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int compOp() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 462: {
                this.jj_consume_token(462);
                return 6;
            }
            case 463: {
                this.jj_consume_token(463);
                return 7;
            }
            case 464: {
                this.jj_consume_token(464);
                return 7;
            }
            case 460: {
                this.jj_consume_token(460);
                return 10;
            }
            case 465: {
                this.jj_consume_token(465);
                return 8;
            }
            case 461: {
                this.jj_consume_token(461);
                return 11;
            }
            case 466: {
                this.jj_consume_token(466);
                return 9;
            }
            default: {
                this.jj_la1[100] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode additiveExpression(final ValueNode valueNode, final int n) throws ParseException, StandardException {
        ValueNode valueNode2 = this.multiplicativeExpression(null, 0);
        while (true) {
            switch (this.jj_nt.kind) {
                case 452:
                case 454: {
                    valueNode2 = this.multiplicativeExpression(valueNode2, this.additiveOperator());
                    continue;
                }
                default: {
                    this.jj_la1[101] = this.jj_gen;
                    if (valueNode == null) {
                        return valueNode2;
                    }
                    int n2 = 0;
                    switch (n) {
                        case 6: {
                            n2 = 41;
                            break;
                        }
                        case 7: {
                            n2 = 47;
                            break;
                        }
                        case 10: {
                            n2 = 45;
                            break;
                        }
                        case 8: {
                            n2 = 43;
                            break;
                        }
                        case 11: {
                            n2 = 44;
                            break;
                        }
                        case 9: {
                            n2 = 42;
                            break;
                        }
                        default: {
                            n2 = 0;
                            break;
                        }
                    }
                    return (ValueNode)this.nodeFactory.getNode(n2, valueNode, valueNode2, Boolean.FALSE, this.getContextManager());
                }
            }
        }
    }
    
    public final int additiveOperator() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 452: {
                this.jj_consume_token(452);
                return 1;
            }
            case 454: {
                this.jj_consume_token(454);
                return 2;
            }
            default: {
                this.jj_la1[102] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode multiplicativeExpression(final ValueNode valueNode, final int n) throws ParseException, StandardException {
        ValueNode valueNode2 = this.unaryExpression(null, 0);
        while (true) {
            switch (this.jj_nt.kind) {
                case 451:
                case 456:
                case 472: {
                    valueNode2 = this.unaryExpression(valueNode2, this.multiplicativeOperator());
                    continue;
                }
                default: {
                    this.jj_la1[103] = this.jj_gen;
                    if (valueNode == null) {
                        return valueNode2;
                    }
                    switch (n) {
                        case 1: {
                            return (ValueNode)this.nodeFactory.getNode(48, valueNode, valueNode2, this.getContextManager());
                        }
                        case 2: {
                            return (ValueNode)this.nodeFactory.getNode(46, valueNode, valueNode2, this.getContextManager());
                        }
                        default: {
                            return null;
                        }
                    }
                    break;
                }
            }
        }
    }
    
    public final int multiplicativeOperator() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 451: {
                this.jj_consume_token(451);
                return 3;
            }
            case 456: {
                this.jj_consume_token(456);
                return 4;
            }
            case 472: {
                this.jj_consume_token(472);
                return 5;
            }
            default: {
                this.jj_la1[104] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode unaryExpression(final ValueNode valueNode, final int n) throws ParseException, StandardException {
        Object sign = null;
        final int kind;
        final int kind2;
        if (((kind = this.getToken(1).kind) == 452 || kind == 454) && (kind2 = this.getToken(2).kind) != 482 && kind2 != 487) {
            sign = this.sign();
        }
        ValueNode primaryExpression = this.primaryExpression();
        if ("-".equals(sign)) {
            primaryExpression = (ValueNode)this.nodeFactory.getNode(29, primaryExpression, this.getContextManager());
        }
        else if ("+".equals(sign)) {
            primaryExpression = (ValueNode)this.nodeFactory.getNode(30, primaryExpression, this.getContextManager());
        }
        return this.multOp(valueNode, primaryExpression, n);
    }
    
    public final String sign() throws ParseException {
        switch (this.jj_nt.kind) {
            case 452: {
                return this.jj_consume_token(452).image;
            }
            case 454: {
                return this.jj_consume_token(454).image;
            }
            default: {
                this.jj_la1[105] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode primaryExpressionXX() throws ParseException, StandardException {
        ValueNode valueNode = this.primary();
        while (this.jj_2_31(1)) {
            valueNode = this.nonStaticMethodCallOrFieldAccess(valueNode);
        }
        return valueNode;
    }
    
    public final ValueNode nonStaticMethodCallOrFieldAccess(final ValueNode valueNode) throws ParseException, StandardException {
        return this.nonStaticMethodInvocation(valueNode);
    }
    
    public final ValueNode nonStaticMethodInvocation(final ValueNode valueNode) throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        if (this.getToken(3).kind == 449) {
            switch (this.jj_nt.kind) {
                case 473: {
                    this.jj_consume_token(473);
                    break;
                }
                case 455: {
                    this.jj_consume_token(455);
                    break;
                }
                default: {
                    this.jj_la1[106] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            final MethodCallNode methodName = this.methodName(valueNode);
            this.methodCallParameterList(list);
            if (valueNode instanceof ParameterNode) {
                throw StandardException.newException("42X54", methodName.getMethodName());
            }
            methodName.addParms(list);
            return (ValueNode)this.nodeFactory.getNode(36, methodName, this.getContextManager());
        }
        else {
            switch (this.jj_nt.kind) {
                case 455: {
                    this.jj_consume_token(455);
                    final MethodCallNode methodName2 = this.methodName(valueNode);
                    if (valueNode instanceof ParameterNode) {
                        throw StandardException.newException("42X54", methodName2.getMethodName());
                    }
                    methodName2.addParms(list);
                    return (ValueNode)this.nodeFactory.getNode(36, methodName2, this.getContextManager());
                }
                default: {
                    this.jj_la1[107] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final MethodCallNode methodName(final ValueNode valueNode) throws ParseException, StandardException {
        return (MethodCallNode)this.nodeFactory.getNode(98, this.caseSensitiveIdentifierPlusReservedWords(), valueNode, this.getContextManager());
    }
    
    public final MethodCallNode staticMethodName(final String s) throws ParseException, StandardException {
        return (MethodCallNode)this.nodeFactory.getNode(85, this.caseSensitiveIdentifierPlusReservedWords(), s, this.getContextManager());
    }
    
    public final void methodParameter(final List list) throws ParseException, StandardException {
        if (this.jj_2_32(1)) {
            list.add(this.valueExpression());
        }
        else {
            switch (this.jj_nt.kind) {
                case 191: {
                    list.add(this.nullSpecification());
                    break;
                }
                default: {
                    this.jj_la1[108] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final ValueNode primary() throws ParseException, StandardException {
        if (this.javaClassFollows()) {
            return this.staticClassReference();
        }
        if (this.jj_2_33(1)) {
            return this.valueExpressionPrimary();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode staticClassReference() throws ParseException, StandardException {
        final String javaClass = this.javaClass();
        this.jj_consume_token(458);
        return this.staticClassReferenceType(javaClass);
    }
    
    public final ValueNode staticClassReferenceType(final String s) throws ParseException, StandardException {
        if (this.getToken(2).kind == 449) {
            return this.staticMethodInvocation(s);
        }
        if (this.jj_2_34(1)) {
            return this.staticClassFieldReference(s);
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode staticClassFieldReference(final String s) throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(36, this.nodeFactory.getNode(84, s, this.caseSensitiveIdentifierPlusReservedWords(), this.nextToLastTokenDelimitedIdentifier, this.getContextManager()), this.getContextManager());
    }
    
    public final int nonSecondDatetimeField() throws ParseException {
        switch (this.jj_nt.kind) {
            case 270: {
                this.jj_consume_token(270);
                return 0;
            }
            case 311: {
                this.jj_consume_token(311);
                return 1;
            }
            case 286: {
                this.jj_consume_token(286);
                return 2;
            }
            case 157: {
                this.jj_consume_token(157);
                return 3;
            }
            case 183: {
                this.jj_consume_token(183);
                return 4;
            }
            default: {
                this.jj_la1[109] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode escapedValueFunction() throws ParseException, StandardException {
        ValueNode additiveExpression = null;
        if (this.jj_2_35(1)) {
            return this.miscBuiltinsCore(true);
        }
        switch (this.jj_nt.kind) {
            case 235: {
                this.jj_consume_token(235);
                this.jj_consume_token(449);
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                switch (this.jj_nt.kind) {
                    case 453: {
                        this.jj_consume_token(453);
                        additiveExpression = this.additiveExpression(null, 0);
                        break;
                    }
                    default: {
                        this.jj_la1[110] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(450);
                return this.getSubstringNode(additiveExpression2, additiveExpression3, additiveExpression, Boolean.FALSE);
            }
            case 358: {
                this.jj_consume_token(358);
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(0), this.getContextManager());
            }
            case 360: {
                this.jj_consume_token(360);
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(1), this.getContextManager());
            }
            case 281: {
                this.jj_consume_token(281);
                this.jj_consume_token(449);
                final ValueNode additiveExpression4 = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression5 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(50, additiveExpression4, additiveExpression5, this.getContextManager());
            }
            case 112:
            case 226:
            case 256: {
                final ValueNode userNode = this.userNode();
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                return userNode;
            }
            case 349:
            case 350: {
                return this.timestampArithmeticFuncion();
            }
            default: {
                this.jj_la1[111] = this.jj_gen;
                if (this.getEscapedSYSFUN(this.getToken(1).image) != null) {
                    return this.escapedSYSFUNFunction();
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode escapedSYSFUNFunction() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        final Token jj_consume_token = this.jj_consume_token(475);
        this.methodCallParameterList(list);
        final MethodCallNode methodCallNode = (MethodCallNode)this.nodeFactory.getNode(85, this.nodeFactory.getNode(34, "SYSFUN", this.getEscapedSYSFUN(jj_consume_token.image), new Integer(0), new Integer(0), this.getContextManager()), null, this.getContextManager());
        methodCallNode.addParms(list);
        return (ValueNode)this.nodeFactory.getNode(36, methodCallNode, this.getContextManager());
    }
    
    public final ValueNode timestampArithmeticFuncion() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 349: {
                this.jj_consume_token(349);
                this.jj_consume_token(449);
                final ValueNode jdbcIntervalType = this.jdbcIntervalType();
                this.jj_consume_token(453);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(184, additiveExpression2, jdbcIntervalType, additiveExpression, ReuseFactory.getInteger(4), null, this.getContextManager());
            }
            case 350: {
                this.jj_consume_token(350);
                this.jj_consume_token(449);
                final ValueNode jdbcIntervalType2 = this.jdbcIntervalType();
                this.jj_consume_token(453);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression4 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(185, additiveExpression4, jdbcIntervalType2, additiveExpression3, ReuseFactory.getInteger(5), null, this.getContextManager());
            }
            default: {
                this.jj_la1[112] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode jdbcIntervalType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 334: {
                this.jj_consume_token(334);
                return this.getJdbcIntervalNode(0);
            }
            case 335: {
                this.jj_consume_token(335);
                return this.getJdbcIntervalNode(1);
            }
            case 336: {
                this.jj_consume_token(336);
                return this.getJdbcIntervalNode(2);
            }
            case 337: {
                this.jj_consume_token(337);
                return this.getJdbcIntervalNode(3);
            }
            case 338: {
                this.jj_consume_token(338);
                return this.getJdbcIntervalNode(4);
            }
            case 339: {
                this.jj_consume_token(339);
                return this.getJdbcIntervalNode(5);
            }
            case 340: {
                this.jj_consume_token(340);
                return this.getJdbcIntervalNode(6);
            }
            case 341: {
                this.jj_consume_token(341);
                return this.getJdbcIntervalNode(7);
            }
            case 342: {
                this.jj_consume_token(342);
                return this.getJdbcIntervalNode(8);
            }
            default: {
                this.jj_la1[113] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode numericValueFunction() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 271: {
                this.jj_consume_token(271);
                return this.absFunction();
            }
            case 272: {
                this.jj_consume_token(272);
                return this.absFunction();
            }
            case 434: {
                this.jj_consume_token(434);
                this.jj_consume_token(449);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(189, additiveExpression, this.getContextManager());
            }
            case 308: {
                this.jj_consume_token(308);
                return this.modFunction();
            }
            case 292: {
                this.jj_consume_token(292);
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(5, this.getContextManager());
            }
            default: {
                this.jj_la1[114] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode coalesceFunction(final String s) throws ParseException, StandardException {
        final ValueNodeList list = (ValueNodeList)this.nodeFactory.getNode(15, this.getContextManager());
        this.jj_consume_token(449);
        this.coalesceExpression(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.coalesceExpression(list);
                    continue;
                }
                default: {
                    this.jj_la1[115] = this.jj_gen;
                    this.jj_consume_token(450);
                    return (ValueNode)this.nodeFactory.getNode(192, s, list, this.getContextManager());
                }
            }
        }
    }
    
    public final void coalesceExpression(final ValueNodeList list) throws ParseException, StandardException {
        list.addElement(this.additiveExpression(null, 0));
    }
    
    public final ValueNode absFunction() throws ParseException, StandardException {
        this.jj_consume_token(449);
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        this.jj_consume_token(450);
        return (ValueNode)this.nodeFactory.getNode(188, additiveExpression, this.getContextManager());
    }
    
    public final ValueNode modFunction() throws ParseException, StandardException {
        this.jj_consume_token(449);
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        this.jj_consume_token(453);
        final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
        this.jj_consume_token(450);
        return (ValueNode)this.nodeFactory.getNode(194, additiveExpression, additiveExpression2, this.getContextManager());
    }
    
    public final int datetimeField() throws ParseException {
        switch (this.jj_nt.kind) {
            case 157:
            case 183:
            case 270:
            case 286:
            case 311: {
                return this.nonSecondDatetimeField();
            }
            case 224: {
                this.jj_consume_token(224);
                return 5;
            }
            default: {
                this.jj_la1[116] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode characterValueFunction() throws ParseException, StandardException {
        Node additiveExpression = null;
        Token token = null;
        ValueNode additiveExpression2 = null;
        switch (this.jj_nt.kind) {
            case 372: {
                this.jj_consume_token(372);
                this.jj_consume_token(449);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression4 = this.additiveExpression(null, 0);
                switch (this.jj_nt.kind) {
                    case 453: {
                        this.jj_consume_token(453);
                        additiveExpression2 = this.additiveExpression(null, 0);
                        break;
                    }
                    default: {
                        this.jj_la1[117] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(450);
                return this.getSubstringNode(additiveExpression3, additiveExpression4, additiveExpression2, Boolean.FALSE);
            }
            case 179:
            case 255: {
                switch (this.jj_nt.kind) {
                    case 255: {
                        token = this.jj_consume_token(255);
                        break;
                    }
                    case 179: {
                        this.jj_consume_token(179);
                        break;
                    }
                    default: {
                        this.jj_la1[118] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                this.jj_consume_token(449);
                final ValueNode additiveExpression5 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(83, additiveExpression5, (token != null) ? "upper" : "lower", this.getContextManager());
            }
            case 399:
            case 440: {
                switch (this.jj_nt.kind) {
                    case 440: {
                        token = this.jj_consume_token(440);
                        break;
                    }
                    case 399: {
                        this.jj_consume_token(399);
                        break;
                    }
                    default: {
                        this.jj_la1[119] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                this.jj_consume_token(449);
                final ValueNode additiveExpression6 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(83, additiveExpression6, (token != null) ? "upper" : "lower", this.getContextManager());
            }
            case 248:
            case 366:
            case 371: {
                return this.trimFunction();
            }
            case 400: {
                this.jj_consume_token(400);
                this.jj_consume_token(449);
                final ValueNode additiveExpression7 = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression8 = this.additiveExpression(null, 0);
                switch (this.jj_nt.kind) {
                    case 453: {
                        this.jj_consume_token(453);
                        additiveExpression = this.additiveExpression(null, 0);
                        break;
                    }
                    default: {
                        this.jj_la1[120] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(190, additiveExpression7, additiveExpression8, (additiveExpression == null) ? this.getNodeFactory().getNode(70, ReuseFactory.getInteger(1), this.getContextManager()) : additiveExpression, ReuseFactory.getInteger(1), null, this.getContextManager());
            }
            default: {
                this.jj_la1[121] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode trimFunction() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 366:
            case 371: {
                final Integer trimType = this.trimType();
                this.jj_consume_token(449);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return this.getTrimOperatorNode(trimType, null, additiveExpression, null);
            }
            case 248: {
                this.jj_consume_token(248);
                return this.ansiTrim();
            }
            default: {
                this.jj_la1[122] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode ansiTrim() throws ParseException, StandardException {
        final Integer integer = ReuseFactory.getInteger(0);
        final ValueNode valueNode = null;
        if (this.ansiTrimSpecFollows()) {
            this.jj_consume_token(449);
            final Integer ansiTrimSpec = this.ansiTrimSpec();
            if (this.jj_2_36(Integer.MAX_VALUE)) {
                this.jj_consume_token(147);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return this.getTrimOperatorNode(ansiTrimSpec, valueNode, additiveExpression, null);
            }
            if (this.jj_2_37(1)) {
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(147);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return this.getTrimOperatorNode(ansiTrimSpec, additiveExpression2, additiveExpression3, null);
            }
            this.jj_consume_token(-1);
            throw new ParseException();
        }
        else {
            if (this.ansiTrimSpecFollows()) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            this.jj_consume_token(449);
            final ValueNode additiveExpression4 = this.additiveExpression(null, 0);
            switch (this.jj_nt.kind) {
                case 147: {
                    this.jj_consume_token(147);
                    final ValueNode additiveExpression5 = this.additiveExpression(null, 0);
                    this.jj_consume_token(450);
                    return this.getTrimOperatorNode(integer, additiveExpression4, additiveExpression5, null);
                }
                case 450: {
                    this.jj_consume_token(450);
                    return this.getTrimOperatorNode(integer, null, additiveExpression4, null);
                }
                default: {
                    this.jj_la1[123] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final Integer ansiTrimSpec() throws ParseException {
        switch (this.jj_nt.kind) {
            case 247: {
                this.jj_consume_token(247);
                return ReuseFactory.getInteger(1);
            }
            case 176: {
                this.jj_consume_token(176);
                return ReuseFactory.getInteger(2);
            }
            case 82: {
                this.jj_consume_token(82);
                return ReuseFactory.getInteger(0);
            }
            default: {
                this.jj_la1[124] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Integer trimType() throws ParseException {
        switch (this.jj_nt.kind) {
            case 371: {
                this.jj_consume_token(371);
                return ReuseFactory.getInteger(1);
            }
            case 366: {
                this.jj_consume_token(366);
                return ReuseFactory.getInteger(2);
            }
            default: {
                this.jj_la1[125] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode valueExpressionPrimary() throws ParseException, StandardException {
        if (this.escapedValueFunctionFollows()) {
            this.jj_consume_token(447);
            this.jj_consume_token(395);
            final ValueNode escapedValueFunction = this.escapedValueFunction();
            this.jj_consume_token(448);
            return escapedValueFunction;
        }
        if (this.getToken(2).kind == 222 || this.getToken(2).kind == 432) {
            this.jj_consume_token(108);
            switch (this.jj_nt.kind) {
                case 222: {
                    this.jj_consume_token(222);
                    break;
                }
                case 432: {
                    this.jj_consume_token(432);
                    break;
                }
                default: {
                    this.jj_la1[126] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            return (ValueNode)this.nodeFactory.getNode(6, this.getContextManager());
        }
        if (this.getToken(2).kind == 172) {
            this.jj_consume_token(108);
            this.jj_consume_token(172);
            return (ValueNode)this.nodeFactory.getNode(4, this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 86:
            case 112:
            case 140:
            case 192:
            case 226:
            case 249:
            case 256:
            case 359:
            case 447:
            case 452:
            case 454:
            case 467:
            case 482:
            case 485:
            case 486:
            case 487: {
                return this.valueSpecification();
            }
            default: {
                this.jj_la1[127] = this.jj_gen;
                if (this.newInvocationFollows(1)) {
                    return this.newInvocation();
                }
                if (this.windowOrAggregateFunctionFollows()) {
                    return this.windowOrAggregateFunctionNode();
                }
                if (this.miscBuiltinFollows()) {
                    return this.miscBuiltins();
                }
                if (this.jj_2_39(1)) {
                    return this.columnReference();
                }
                switch (this.jj_nt.kind) {
                    case 449: {
                        this.jj_consume_token(449);
                        ValueNode valueNode;
                        if (this.getToken(1).kind == 225 || this.getToken(1).kind == 259) {
                            valueNode = this.subquery(17, null);
                        }
                        else {
                            if (!this.jj_2_38(1)) {
                                this.jj_consume_token(-1);
                                throw new ParseException();
                            }
                            valueNode = this.valueExpression();
                        }
                        this.jj_consume_token(450);
                        return valueNode;
                    }
                    case 87: {
                        return this.castSpecification();
                    }
                    case 188: {
                        return this.nextValueExpression();
                    }
                    default: {
                        this.jj_la1[128] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final ValueNode miscBuiltins() throws ParseException, StandardException {
        if ((this.getToken(1).kind == 362 || this.getToken(1).kind == 271 || this.getToken(1).kind == 272 || this.getToken(1).kind == 434 || this.getToken(1).kind == 308 || this.getToken(1).kind == 93 || this.getToken(1).kind == 258 || this.getToken(1).kind == 292 || this.getToken(1).kind == 235 || this.getToken(1).kind == 372 || this.getToken(1).kind == 255 || this.getToken(1).kind == 179 || this.getToken(1).kind == 440 || this.getToken(1).kind == 399 || this.getToken(1).kind == 366 || this.getToken(1).kind == 371 || this.getToken(1).kind == 248 || this.getToken(1).kind == 285 || this.getToken(1).kind == 347 || this.getToken(1).kind == 348 || this.getToken(1).kind == 128 || this.getToken(1).kind == 88 || this.getToken(1).kind == 261 || this.getToken(1).kind == 168 || this.getToken(1).kind == 167 || this.getToken(1).kind == 228 || this.getToken(1).kind == 364 || this.getToken(1).kind == 270 || this.getToken(1).kind == 311 || this.getToken(1).kind == 286 || this.getToken(1).kind == 157 || this.getToken(1).kind == 183 || this.getToken(1).kind == 224 || this.getToken(1).kind == 300 || this.getToken(1).kind == 400 || this.getToken(1).kind == 375 || this.getToken(1).kind == 377 || this.getToken(1).kind == 374 || this.getToken(1).kind == 376) && this.getToken(2).kind == 449) {
            return this.miscBuiltinsCore(false);
        }
        if (this.jj_2_40(1)) {
            return this.datetimeValueFunction();
        }
        if (this.jj_2_41(1)) {
            return this.routineInvocation();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode miscBuiltinsCore(final boolean b) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 362: {
                this.jj_consume_token(362);
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                this.checkInternalFeature("GETCURRENTCONNECTION()");
                return (ValueNode)this.nodeFactory.getNode(36, this.nodeFactory.getNode(18, this.getContextManager()), this.getContextManager());
            }
            case 271:
            case 272:
            case 292:
            case 308:
            case 434: {
                return this.numericValueFunction();
            }
            case 179:
            case 248:
            case 255:
            case 366:
            case 371:
            case 372:
            case 399:
            case 400:
            case 440: {
                return this.characterValueFunction();
            }
            default: {
                this.jj_la1[129] = this.jj_gen;
                if (this.jj_2_42(1)) {
                    return this.dataTypeScalarFunction();
                }
                switch (this.jj_nt.kind) {
                    case 93: {
                        this.jj_consume_token(93);
                        return this.coalesceFunction("COALESCE");
                    }
                    case 258: {
                        this.jj_consume_token(258);
                        return this.coalesceFunction("VALUE");
                    }
                    case 300: {
                        this.jj_consume_token(300);
                        this.jj_consume_token(449);
                        final ValueNode additiveExpression = this.additiveExpression(null, 0);
                        this.jj_consume_token(450);
                        final ContextManager contextManager = this.getContextManager();
                        if (b) {
                            return (ValueNode)this.nodeFactory.getNode(23, this.getTrimOperatorNode(ReuseFactory.getInteger(1), null, additiveExpression, contextManager), contextManager);
                        }
                        return (ValueNode)this.nodeFactory.getNode(20, additiveExpression, contextManager);
                    }
                    case 374:
                    case 375:
                    case 376:
                    case 377: {
                        return this.xmlFunction();
                    }
                    default: {
                        this.jj_la1[130] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final ValueNode dataTypeScalarFunction() throws ParseException, StandardException {
        int length = -1;
        switch (this.jj_nt.kind) {
            case 157:
            case 183:
            case 224:
            case 270:
            case 285:
            case 286:
            case 311:
            case 347:
            case 348: {
                return this.dateTimeScalarFunction();
            }
            default: {
                this.jj_la1[132] = this.jj_gen;
                if (this.jj_2_43(1)) {
                    final DataTypeDescriptor numericFunctionType = this.numericFunctionType();
                    this.jj_consume_token(449);
                    final ValueNode additiveExpression = this.additiveExpression(null, 0);
                    this.jj_consume_token(450);
                    final ValueNode valueNode = (ValueNode)this.nodeFactory.getNode(60, additiveExpression, numericFunctionType, this.getContextManager());
                    ((CastNode)valueNode).setForDataTypeFunction(true);
                    ((CastNode)valueNode).setForExternallyGeneratedCASTnode();
                    return valueNode;
                }
                switch (this.jj_nt.kind) {
                    case 88:
                    case 261: {
                        final int charOrVarchar = this.charOrVarchar();
                        this.jj_consume_token(449);
                        final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                        switch (this.jj_nt.kind) {
                            case 453: {
                                this.jj_consume_token(453);
                                length = this.length();
                                break;
                            }
                            default: {
                                this.jj_la1[131] = this.jj_gen;
                                break;
                            }
                        }
                        this.jj_consume_token(450);
                        this.checkTypeLimits(charOrVarchar, length);
                        final ValueNode valueNode2 = (ValueNode)this.nodeFactory.getNode(60, additiveExpression2, new Integer(charOrVarchar), new Integer(length), this.getContextManager());
                        ((CastNode)valueNode2).setForDataTypeFunction(true);
                        ((CastNode)valueNode2).setForExternallyGeneratedCASTnode();
                        return valueNode2;
                    }
                    default: {
                        this.jj_la1[133] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final ValueNode xmlFunction() throws ParseException, StandardException {
        this.checkVersion(130, "XML");
        org.apache.derby.iapi.types.XML.checkXMLRequirements();
        switch (this.jj_nt.kind) {
            case 375: {
                this.jj_consume_token(375);
                this.jj_consume_token(449);
                this.xmlDocOrContent();
                final ValueNode xmlParseValue = this.xmlParseValue();
                this.jj_consume_token(450);
                return xmlParseValue;
            }
            case 377: {
                this.jj_consume_token(377);
                this.jj_consume_token(449);
                final ValueNode xmlSerializeValue = this.xmlSerializeValue();
                this.jj_consume_token(450);
                return xmlSerializeValue;
            }
            case 374: {
                this.jj_consume_token(374);
                this.jj_consume_token(449);
                final ValueNode xmlQueryValue = this.xmlQueryValue(true);
                this.jj_consume_token(450);
                return xmlQueryValue;
            }
            case 376: {
                this.jj_consume_token(376);
                this.jj_consume_token(449);
                final ValueNode xmlQueryValue2 = this.xmlQueryValue(false);
                this.jj_consume_token(450);
                return xmlQueryValue2;
            }
            default: {
                this.jj_la1[134] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode xmlParseValue() throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(200, this.additiveExpression(null, 0), ReuseFactory.getInteger(0), new Object[] { this.xmlPreserveWhitespace() ? Boolean.TRUE : Boolean.FALSE }, this.getContextManager());
    }
    
    public final boolean xmlPreserveWhitespace() throws ParseException, StandardException {
        if (this.getToken(1).kind != 436 && this.getToken(1).kind != 207) {
            throw StandardException.newException("42Z72", "PRESERVE WHITESPACE", ReuseFactory.getInteger(this.getToken(1).beginLine), ReuseFactory.getInteger(this.getToken(1).beginColumn));
        }
        switch (this.jj_nt.kind) {
            case 436: {
                this.jj_consume_token(436);
                this.jj_consume_token(442);
                throw StandardException.newException("42Z74", "STRIP WHITESPACE");
            }
            case 207: {
                this.jj_consume_token(207);
                this.jj_consume_token(442);
                return true;
            }
            default: {
                this.jj_la1[135] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode xmlSerializeValue() throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(201, this.additiveExpression(null, 0), ReuseFactory.getInteger(1), new Object[] { this.xmlSerializeTargetType() }, this.getContextManager());
    }
    
    public final DataTypeDescriptor xmlSerializeTargetType() throws ParseException, StandardException {
        if (this.getToken(1).kind != 72) {
            throw StandardException.newException("42Z72", "AS", ReuseFactory.getInteger(this.getToken(1).beginLine), ReuseFactory.getInteger(this.getToken(1).beginColumn));
        }
        switch (this.jj_nt.kind) {
            case 72: {
                this.jj_consume_token(72);
                return this.dataTypeDDL();
            }
            default: {
                this.jj_la1[136] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode xmlQueryValue(final boolean b) throws ParseException, StandardException {
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        this.jj_consume_token(414);
        this.xmlPassingMechanism();
        final ValueNode xqVarList = this.xqVarList();
        if (!b) {
            if (this.jj_2_45(1)) {
                this.xqReturningClause();
                if (this.jj_2_44(1)) {
                    this.xmlPassingMechanism();
                }
            }
            this.xqEmptyHandlingClause();
        }
        else if (!b) {
            this.jj_consume_token(-1);
            throw new ParseException();
        }
        return (ValueNode)this.nodeFactory.getNode(b ? 202 : 203, additiveExpression, xqVarList, b ? ReuseFactory.getInteger(0) : ReuseFactory.getInteger(1), this.getContextManager());
    }
    
    public final ValueNode xqVarList() throws ParseException, StandardException {
        final ValueNode[] array = { null };
        this.xqVariable(array);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.xqVariable(array);
                    continue;
                }
                default: {
                    this.jj_la1[137] = this.jj_gen;
                    return array[0];
                }
            }
        }
    }
    
    public final void xqVariable(final ValueNode[] array) throws ParseException, StandardException {
        final Object o = null;
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        if (this.getToken(1).kind == 72) {
            this.jj_consume_token(72);
            this.identifier(128, true);
            throw StandardException.newException("42Z74", "PASSING ... AS");
        }
        if (this.jj_2_46(1)) {
            this.xmlPassingMechanism();
        }
        if (o == null) {
            if (array[0] != null) {
                throw StandardException.newException("42Z76");
            }
            array[0] = additiveExpression;
        }
    }
    
    public final short xmlPassingMechanism() throws ParseException, StandardException {
        if (this.getToken(2).kind == 418) {
            this.jj_consume_token(83);
            this.jj_consume_token(418);
            return 1;
        }
        switch (this.jj_nt.kind) {
            case 83: {
                this.jj_consume_token(83);
                this.jj_consume_token(258);
                throw StandardException.newException("42Z74", "BY VALUE");
            }
            default: {
                this.jj_la1[138] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final short xqReturningClause() throws ParseException, StandardException {
        if (this.getToken(2).kind == 428) {
            this.jj_consume_token(424);
            this.jj_consume_token(428);
            return 3;
        }
        switch (this.jj_nt.kind) {
            case 424: {
                this.jj_consume_token(424);
                this.jj_consume_token(383);
                throw StandardException.newException("42Z74", "RETURNING CONTENT");
            }
            default: {
                this.jj_la1[139] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final short xqEmptyHandlingClause() throws ParseException, StandardException {
        if (this.getToken(1).kind == 393) {
            this.jj_consume_token(393);
            this.jj_consume_token(195);
            this.jj_consume_token(393);
            return 5;
        }
        switch (this.jj_nt.kind) {
            case 191: {
                this.jj_consume_token(191);
                this.jj_consume_token(195);
                this.jj_consume_token(393);
                throw StandardException.newException("42Z74", "NULL ON EMPTY");
            }
            default: {
                this.jj_la1[140] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final DataTypeDescriptor numericFunctionType() throws ParseException, StandardException {
        if (this.jj_2_47(1)) {
            return this.doubleType();
        }
        switch (this.jj_nt.kind) {
            case 167:
            case 168:
            case 228:
            case 364: {
                return this.exactIntegerType();
            }
            default: {
                this.jj_la1[141] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode dateTimeScalarFunction() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 347: {
                this.jj_consume_token(347);
                this.jj_consume_token(449);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                final ValueNode valueNode = (ValueNode)this.nodeFactory.getNode(60, additiveExpression, DataTypeDescriptor.getBuiltInDataTypeDescriptor(92), this.getContextManager());
                ((CastNode)valueNode).setForExternallyGeneratedCASTnode();
                return valueNode;
            }
            case 285: {
                this.jj_consume_token(285);
                this.jj_consume_token(449);
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(32, additiveExpression2, DataTypeDescriptor.getBuiltInDataTypeDescriptor(91), this.getContextManager());
            }
            case 348: {
                this.jj_consume_token(348);
                this.jj_consume_token(449);
                return this.timestampFunctionCompletion(this.additiveExpression(null, 0));
            }
            case 157:
            case 183:
            case 224:
            case 270:
            case 286:
            case 311: {
                final int datetimeField = this.datetimeField();
                this.jj_consume_token(449);
                final ValueNode additiveExpression3 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(87, ReuseFactory.getInteger(datetimeField), additiveExpression3, this.getContextManager());
            }
            default: {
                this.jj_la1[142] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode timestampFunctionCompletion(final ValueNode valueNode) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 450: {
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(32, valueNode, DataTypeDescriptor.getBuiltInDataTypeDescriptor(93), this.getContextManager());
            }
            case 453: {
                this.jj_consume_token(453);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(33, valueNode, additiveExpression, this.getContextManager());
            }
            default: {
                this.jj_la1[143] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Token booleanLiteral() throws ParseException {
        switch (this.jj_nt.kind) {
            case 249: {
                return this.jj_consume_token(249);
            }
            case 140: {
                return this.jj_consume_token(140);
            }
            default: {
                this.jj_la1[144] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode generalValueSpecification() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 467: {
                return this.dynamicParameterSpecification();
            }
            case 112:
            case 226:
            case 256: {
                return this.userNode();
            }
            case 359: {
                return this.currentRoleNode();
            }
            default: {
                this.jj_la1[145] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode userNode() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 256: {
                this.jj_consume_token(256);
                return (ValueNode)this.nodeFactory.getNode(110, this.getContextManager());
            }
            case 112: {
                this.jj_consume_token(112);
                return (ValueNode)this.nodeFactory.getNode(109, this.getContextManager());
            }
            case 226: {
                this.jj_consume_token(226);
                return (ValueNode)this.nodeFactory.getNode(125, this.getContextManager());
            }
            default: {
                this.jj_la1[146] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode currentRoleNode() throws ParseException, StandardException {
        this.jj_consume_token(359);
        this.checkVersion(170, "ROLES");
        this.checkSqlStandardAccess("CURRENT_ROLE");
        return (ValueNode)this.nodeFactory.getNode(210, this.getContextManager());
    }
    
    public final JavaToSQLValueNode newInvocation() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        this.jj_consume_token(405);
        final String javaClassName = this.javaClassName();
        this.methodCallParameterList(list);
        if (!javaClassName.startsWith("org.apache.derby.diag.") && !javaClassName.startsWith("org.apache.derby.catalog.") && !javaClassName.startsWith("com.ibm.db2j.")) {
            this.checkInternalFeature(javaClassName);
        }
        return (JavaToSQLValueNode)this.nodeFactory.getNode(36, this.nodeFactory.getNode(133, javaClassName, list, this.lastTokenDelimitedIdentifier, this.getContextManager()), this.getContextManager());
    }
    
    public final JavaToSQLValueNode vtiTableConstruct() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        this.jj_consume_token(239);
        this.jj_consume_token(449);
        final TableName qualifiedName = this.qualifiedName(128);
        this.methodCallParameterList(list);
        this.jj_consume_token(450);
        final NewInvocationNode newInvocationNode = (NewInvocationNode)this.nodeFactory.getNode(133, qualifiedName, null, list, this.lastTokenDelimitedIdentifier, this.getContextManager());
        NewInvocationNode newInvocationNode2;
        if (newInvocationNode.isBuiltinVTI()) {
            newInvocationNode2 = newInvocationNode;
        }
        else {
            final MethodCallNode methodCallNode = (MethodCallNode)this.nodeFactory.getNode(85, qualifiedName, null, this.getContextManager());
            methodCallNode.addParms(list);
            newInvocationNode2 = (NewInvocationNode)methodCallNode;
        }
        return (JavaToSQLValueNode)this.nodeFactory.getNode(36, newInvocationNode2, this.getContextManager());
    }
    
    public final ValueNode staticMethodInvocation(final String s) throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        final MethodCallNode staticMethodName = this.staticMethodName(s);
        this.methodCallParameterList(list);
        staticMethodName.addParms(list);
        return (ValueNode)this.nodeFactory.getNode(36, staticMethodName, this.getContextManager());
    }
    
    public final void methodCallParameterList(final List list) throws ParseException, StandardException {
        this.jj_consume_token(449);
        Label_0082: {
            if (this.jj_2_48(1)) {
                this.methodParameter(list);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 453: {
                            this.jj_consume_token(453);
                            this.methodParameter(list);
                            continue;
                        }
                        default: {
                            this.jj_la1[147] = this.jj_gen;
                            break Label_0082;
                        }
                    }
                }
            }
        }
        this.jj_consume_token(450);
    }
    
    public final ValueNode routineInvocation() throws ParseException, StandardException {
        if (!this.distinctUDAFollows()) {
            return this.routineExpression();
        }
        if (this.distinctUDAFollows()) {
            return this.distinctUDA();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode routineExpression() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        final TableName qualifiedName = this.qualifiedName(128);
        this.methodCallParameterList(list);
        final MethodCallNode methodCallNode = (MethodCallNode)this.nodeFactory.getNode(85, qualifiedName, null, this.getContextManager());
        methodCallNode.addParms(list);
        return (ValueNode)this.nodeFactory.getNode(36, methodCallNode, this.getContextManager());
    }
    
    public final ValueNode distinctUDA() throws ParseException, StandardException {
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(449);
        this.jj_consume_token(127);
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        this.jj_consume_token(450);
        return (ValueNode)this.nodeFactory.getNode(115, additiveExpression, qualifiedName, Boolean.TRUE, "", this.getContextManager());
    }
    
    public final String javaClass() throws ParseException, StandardException {
        return this.javaClassName();
    }
    
    public final ValueNode columnMethodInvocation() throws ParseException, StandardException {
        return this.nonStaticMethodInvocation(this.columnNameForInvocation());
    }
    
    public final ValueNode columnNameForInvocation() throws ParseException, StandardException {
        String identifier = null;
        String identifier2 = null;
        Object o = null;
        Object o2 = null;
        Object o3 = null;
        final String identifier3 = this.identifier(128, true);
        if (this.getToken(1).kind == 455 && this.getToken(3).kind == 455) {
            this.jj_consume_token(455);
            identifier = this.identifier(128, true);
            if (this.getToken(1).kind == 455 && this.getToken(3).kind == 455) {
                this.jj_consume_token(455);
                identifier2 = this.identifier(128, true);
            }
        }
        String s;
        if (identifier2 == null) {
            if (identifier == null) {
                s = identifier3;
            }
            else {
                o = identifier3;
                s = identifier;
            }
        }
        else {
            o2 = identifier3;
            o = identifier;
            s = identifier2;
        }
        if (o != null) {
            o3 = this.nodeFactory.getNode(34, o2, o, new Integer(this.nextToLastIdentifierToken.beginOffset), new Integer(this.nextToLastIdentifierToken.endOffset), this.getContextManager());
        }
        return (ValueNode)this.nodeFactory.getNode(62, s, o3, new Integer(this.lastIdentifierToken.beginOffset), new Integer(this.lastIdentifierToken.endOffset), this.getContextManager());
    }
    
    public final ColumnReference columnReference() throws ParseException, StandardException {
        String identifier = null;
        String identifier2 = null;
        String s = null;
        String s2 = null;
        Object o = null;
        final String identifier3 = this.identifier(128, false);
        if (this.getToken(1).kind == 455 && this.getToken(3).kind != 449) {
            this.jj_consume_token(455);
            identifier = this.identifier(128, false);
            if (this.getToken(1).kind == 455 && this.getToken(3).kind != 449) {
                this.jj_consume_token(455);
                identifier2 = this.identifier(128, false);
            }
        }
        String s3;
        if (identifier2 == null) {
            if (identifier == null) {
                s3 = identifier3;
            }
            else {
                s = identifier3;
                s3 = identifier;
            }
        }
        else {
            s2 = identifier3;
            s = identifier;
            s3 = identifier2;
        }
        IdUtil.checkIdentifierLengthLimit(s3, 128);
        if (s2 != null) {
            IdUtil.checkIdentifierLengthLimit(s2, 128);
        }
        if (s != null) {
            IdUtil.checkIdentifierLengthLimit(s, 128);
        }
        if (s != null) {
            o = this.nodeFactory.getNode(34, s2, s, new Integer(this.nextToLastIdentifierToken.beginOffset), new Integer(this.nextToLastIdentifierToken.endOffset), this.getContextManager());
        }
        return (ColumnReference)this.nodeFactory.getNode(62, s3, o, new Integer(this.lastIdentifierToken.beginOffset), new Integer(this.lastIdentifierToken.endOffset), this.getContextManager());
    }
    
    public final OrderByList orderByClause(final ResultSetNode resultSetNode) throws ParseException, StandardException {
        this.jj_consume_token(200);
        this.jj_consume_token(83);
        final OrderByList sortSpecificationList = this.sortSpecificationList(resultSetNode);
        this.forbidNextValueFor();
        return sortSpecificationList;
    }
    
    public final int atIsolationLevel() throws ParseException, StandardException {
        this.jj_consume_token(267);
        return this.isolationLevelDB2Abbrev();
    }
    
    public final OrderByList sortSpecificationList(final ResultSetNode resultSetNode) throws ParseException, StandardException {
        final OrderByList list = (OrderByList)this.nodeFactory.getNode(7, resultSetNode, this.getContextManager());
        this.sortSpecification(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.sortSpecification(list);
                    continue;
                }
                default: {
                    this.jj_la1[148] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void sortSpecification(final OrderByList list) throws ParseException, StandardException {
        final OrderByColumn sortKey = this.sortKey();
        switch (this.jj_nt.kind) {
            case 73:
            case 123: {
                this.orderingSpecification(sortKey);
                break;
            }
            default: {
                this.jj_la1[149] = this.jj_gen;
                break;
            }
        }
        if (this.jj_2_49(1)) {
            this.nullOrdering(sortKey);
        }
        list.addOrderByColumn(sortKey);
    }
    
    public final OrderByColumn sortKey() throws ParseException, StandardException {
        return (OrderByColumn)this.nodeFactory.getNode(104, this.additiveExpression(null, 0), this.getContextManager());
    }
    
    public final void orderingSpecification(final OrderByColumn orderByColumn) throws ParseException {
        switch (this.jj_nt.kind) {
            case 73: {
                this.jj_consume_token(73);
                break;
            }
            case 123: {
                this.jj_consume_token(123);
                orderByColumn.setDescending();
                break;
            }
            default: {
                this.jj_la1[150] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final void nullOrdering(final OrderByColumn orderByColumn) throws ParseException {
        if (this.getToken(2).kind == 175) {
            this.jj_consume_token(317);
            this.jj_consume_token(175);
            if (!orderByColumn.isAscending()) {
                orderByColumn.setNullsOrderedLow();
            }
        }
        else {
            switch (this.jj_nt.kind) {
                case 317: {
                    this.jj_consume_token(317);
                    this.jj_consume_token(142);
                    if (orderByColumn.isAscending()) {
                        orderByColumn.setNullsOrderedLow();
                        break;
                    }
                    break;
                }
                default: {
                    this.jj_la1[151] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final boolean offsetFetchFirstClause(final ValueNode[] array) throws ParseException, StandardException {
        if (this.getToken(1).kind == 320 || this.getToken(1).kind == 141) {
            this.sqlStandardOffsetFetchFirst(array);
            return false;
        }
        if (this.getToken(1).kind == 447) {
            this.jdbcLimitOffset(array);
        }
        return true;
    }
    
    public final void sqlStandardOffsetFetchFirst(final ValueNode[] array) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 320: {
                array[0] = this.offsetClause();
                break;
            }
            default: {
                this.jj_la1[152] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 141: {
                array[1] = this.fetchFirstClause();
                break;
            }
            default: {
                this.jj_la1[153] = this.jj_gen;
                break;
            }
        }
    }
    
    public final void jdbcLimitOffset(final ValueNode[] array) throws ParseException, StandardException {
        ValueNode valueNode = null;
        this.jj_consume_token(447);
        this.jj_consume_token(302);
        ValueNode valueNode2 = null;
        switch (this.jj_nt.kind) {
            case 452:
            case 454:
            case 482: {
                valueNode2 = this.intLiteral();
                break;
            }
            case 467: {
                valueNode2 = this.dynamicParameterSpecification();
                break;
            }
            default: {
                this.jj_la1[154] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        Label_0246: {
            switch (this.jj_nt.kind) {
                case 320: {
                    this.jj_consume_token(320);
                    switch (this.jj_nt.kind) {
                        case 452:
                        case 454:
                        case 482: {
                            valueNode = this.intLiteral();
                            break Label_0246;
                        }
                        case 467: {
                            valueNode = this.dynamicParameterSpecification();
                            break Label_0246;
                        }
                        default: {
                            this.jj_la1[155] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[156] = this.jj_gen;
                    break;
                }
            }
        }
        this.jj_consume_token(448);
        if (valueNode2 instanceof NumericConstantNode && ((NumericConstantNode)valueNode2).getValue().getInt() == 0) {
            valueNode2 = null;
        }
        if (valueNode == null) {
            valueNode = this.getNumericNode("0", true);
        }
        array[1] = valueNode2;
        array[0] = valueNode;
    }
    
    public final ValueNode offsetClause() throws ParseException, StandardException {
        this.jj_consume_token(320);
        ValueNode valueNode = null;
        switch (this.jj_nt.kind) {
            case 452:
            case 454:
            case 482: {
                valueNode = this.intLiteral();
                break;
            }
            case 467: {
                valueNode = this.dynamicParameterSpecification();
                break;
            }
            default: {
                this.jj_la1[157] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        switch (this.jj_nt.kind) {
            case 329: {
                this.jj_consume_token(329);
                break;
            }
            case 221: {
                this.jj_consume_token(221);
                break;
            }
            default: {
                this.jj_la1[158] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return valueNode;
    }
    
    public final ValueNode fetchFirstClause() throws ParseException, StandardException {
        ValueNode valueNode = this.getNumericNode("1", true);
        this.jj_consume_token(141);
        switch (this.jj_nt.kind) {
            case 142: {
                this.jj_consume_token(142);
                break;
            }
            case 188: {
                this.jj_consume_token(188);
                break;
            }
            default: {
                this.jj_la1[159] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        Label_0250: {
            switch (this.jj_nt.kind) {
                case 452:
                case 454:
                case 467:
                case 482: {
                    switch (this.jj_nt.kind) {
                        case 452:
                        case 454:
                        case 482: {
                            valueNode = this.intLiteral();
                            break Label_0250;
                        }
                        case 467: {
                            valueNode = this.dynamicParameterSpecification();
                            break Label_0250;
                        }
                        default: {
                            this.jj_la1[160] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[161] = this.jj_gen;
                    break;
                }
            }
        }
        switch (this.jj_nt.kind) {
            case 329: {
                this.jj_consume_token(329);
                break;
            }
            case 221: {
                this.jj_consume_token(221);
                break;
            }
            default: {
                this.jj_la1[162] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        this.jj_consume_token(196);
        return valueNode;
    }
    
    public final int forUpdateClause(final List list) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 254: {
                this.jj_consume_token(254);
                switch (this.jj_nt.kind) {
                    case 194: {
                        this.jj_consume_token(194);
                        this.forUpdateColumnList(list);
                        break;
                    }
                    default: {
                        this.jj_la1[163] = this.jj_gen;
                        break;
                    }
                }
                return 2;
            }
            case 213: {
                this.jj_consume_token(213);
                this.jj_consume_token(196);
                return 1;
            }
            case 141: {
                this.jj_consume_token(141);
                this.jj_consume_token(196);
                return 1;
            }
            default: {
                this.jj_la1[164] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final void forUpdateColumnList(final List list) throws ParseException, StandardException {
        this.forUpdateColumn(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.forUpdateColumn(list);
                    continue;
                }
                default: {
                    this.jj_la1[165] = this.jj_gen;
                }
            }
        }
    }
    
    public final void forUpdateColumn(final List list) throws ParseException, StandardException {
        list.add(this.identifier(128, true));
    }
    
    public final ResultColumnList setClauseList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.setClause(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.setClause(list);
                    continue;
                }
                default: {
                    this.jj_la1[166] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void setClause(final ResultColumnList list) throws ParseException, StandardException {
        final ColumnReference columnReference = this.columnReference();
        this.jj_consume_token(462);
        list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, columnReference, this.updateSource(columnReference.getColumnName()), this.getContextManager()));
    }
    
    public final ValueNode updateSource(final String s) throws ParseException, StandardException {
        if (this.jj_2_50(1)) {
            return this.valueExpression();
        }
        switch (this.jj_nt.kind) {
            case 191: {
                return this.nullSpecification();
            }
            case 119: {
                this.jj_consume_token(119);
                return (ValueNode)this.nodeFactory.getNode(100, s, this.getContextManager());
            }
            default: {
                this.jj_la1[167] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode nullSpecification() throws ParseException, StandardException {
        this.jj_consume_token(191);
        return (ValueNode)this.nodeFactory.getNode(13, this.getContextManager());
    }
    
    public final StatementNode insertColumnsAndSource(final QueryTreeNode queryTreeNode) throws ParseException, StandardException {
        Object propertyList = null;
        Object insertColumnList = null;
        Object orderByClause = null;
        final ValueNode[] array = new ValueNode[2];
        if (this.getToken(1).kind == 449 && !this.subqueryFollows()) {
            this.jj_consume_token(449);
            insertColumnList = this.insertColumnList();
            this.jj_consume_token(450);
        }
        switch (this.jj_nt.kind) {
            case 59: {
                propertyList = this.propertyList(false);
                this.jj_consume_token(64);
                break;
            }
            default: {
                this.jj_la1[168] = this.jj_gen;
                break;
            }
        }
        final ResultSetNode queryExpression = this.queryExpression(null, 0);
        switch (this.jj_nt.kind) {
            case 200: {
                orderByClause = this.orderByClause(queryExpression);
                break;
            }
            default: {
                this.jj_la1[169] = this.jj_gen;
                break;
            }
        }
        final boolean offsetFetchFirstClause = this.offsetFetchFirstClause(array);
        if (orderByClause != null && this.isTableValueConstructor(queryExpression)) {
            throw StandardException.newException("42X01", "ORDER BY");
        }
        if ((array[0] != null || array[1] != null) && this.isTableValueConstructor(queryExpression)) {
            String s;
            if (offsetFetchFirstClause) {
                s = "LIMIT";
            }
            else if (array[0] != null) {
                s = "OFFSET";
            }
            else {
                s = "FETCH";
            }
            throw StandardException.newException("42X01", s);
        }
        return (StatementNode)this.nodeFactory.getNode(138, queryTreeNode, insertColumnList, queryExpression, propertyList, orderByClause, array[0], array[1], offsetFetchFirstClause, this.getContextManager());
    }
    
    public final ResultColumnList insertColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.columnQualifiedNameList(list);
        return list;
    }
    
    public final void columnQualifiedNameList(final ResultColumnList list) throws ParseException, StandardException {
        this.columnQualifiedNameItem(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.columnQualifiedNameItem(list);
                    continue;
                }
                default: {
                    this.jj_la1[170] = this.jj_gen;
                }
            }
        }
    }
    
    public final void columnQualifiedNameItem(final ResultColumnList list) throws ParseException, StandardException {
        list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, this.columnReference(), null, this.getContextManager()));
    }
    
    public final ResultSetNode rowValueConstructor(final ResultSetNode resultSetNode) throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        if (this.rowValueConstructorListFollows()) {
            this.jj_consume_token(449);
            this.rowValueConstructorList(list);
            this.jj_consume_token(450);
            ResultSetNode resultSetNode2 = (ResultSetNode)this.nodeFactory.getNode(105, list, null, this.getContextManager());
            if (resultSetNode != null) {
                if (resultSetNode.getResultColumns().size() != resultSetNode2.getResultColumns().size()) {
                    throw StandardException.newException("42X59");
                }
                resultSetNode2 = (ResultSetNode)this.nodeFactory.getNode(142, resultSetNode, resultSetNode2, Boolean.TRUE, Boolean.TRUE, null, this.getContextManager());
            }
            return resultSetNode2;
        }
        this.rowValueConstructorElement(list);
        ResultSetNode resultSetNode3 = (ResultSetNode)this.nodeFactory.getNode(105, list, null, this.getContextManager());
        if (resultSetNode != null) {
            if (resultSetNode.getResultColumns().size() != resultSetNode3.getResultColumns().size()) {
                throw StandardException.newException("42X59");
            }
            resultSetNode3 = (ResultSetNode)this.nodeFactory.getNode(142, resultSetNode, resultSetNode3, Boolean.TRUE, Boolean.TRUE, null, this.getContextManager());
        }
        return resultSetNode3;
    }
    
    public final void rowValueConstructorElement(final ResultColumnList list) throws ParseException, StandardException {
        if (this.jj_2_51(1)) {
            list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, null, this.valueExpression(), this.getContextManager()));
        }
        else {
            switch (this.jj_nt.kind) {
                case 191: {
                    list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, null, this.nullSpecification(), this.getContextManager()));
                    break;
                }
                case 119: {
                    this.jj_consume_token(119);
                    list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, null, this.nodeFactory.getNode(100, null, this.getContextManager()), this.getContextManager()));
                    break;
                }
                default: {
                    this.jj_la1[171] = this.jj_gen;
                    throw StandardException.newException("42X80");
                }
            }
        }
    }
    
    public final void rowValueConstructorList(final ResultColumnList list) throws ParseException, StandardException {
        this.rowValueConstructorElement(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.rowValueConstructorElement(list);
                    continue;
                }
                default: {
                    this.jj_la1[172] = this.jj_gen;
                }
            }
        }
    }
    
    public final SubqueryNode tableSubquery(final int n, final ValueNode valueNode) throws ParseException, StandardException {
        return this.subquery(n, valueNode);
    }
    
    public final SubqueryNode subquery(final int n, final ValueNode valueNode) throws ParseException, StandardException {
        Object orderByClause = null;
        final ValueNode[] array = new ValueNode[2];
        final ResultSetNode queryExpression = this.queryExpression(null, 0);
        switch (this.jj_nt.kind) {
            case 200: {
                orderByClause = this.orderByClause(queryExpression);
                break;
            }
            default: {
                this.jj_la1[173] = this.jj_gen;
                break;
            }
        }
        return (SubqueryNode)this.nodeFactory.getNode(93, queryExpression, ReuseFactory.getInteger(n), valueNode, orderByClause, array[0], array[1], this.offsetFetchFirstClause(array), this.getContextManager());
    }
    
    public final ValueNode inPredicateValue(final ValueNode valueNode) throws ParseException, StandardException {
        this.jj_consume_token(449);
        ValueNode valueNode2;
        if (this.subqueryFollows()) {
            valueNode2 = this.tableSubquery(1, valueNode);
        }
        else {
            if (!this.jj_2_52(1)) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            valueNode2 = this.inValueList(valueNode);
        }
        this.jj_consume_token(450);
        return valueNode2;
    }
    
    public final ValueNode inValueList(final ValueNode valueNode) throws ParseException, StandardException {
        final ValueNodeList list = (ValueNodeList)this.nodeFactory.getNode(15, this.getContextManager());
        this.inElement(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.inElement(list);
                    continue;
                }
                default: {
                    this.jj_la1[174] = this.jj_gen;
                    return (ValueNode)this.nodeFactory.getNode(55, valueNode, list, this.getContextManager());
                }
            }
        }
    }
    
    public final void inElement(final ValueNodeList list) throws ParseException, StandardException {
        list.addElement(this.additiveExpression(null, 0));
    }
    
    public final int quantifier(final int n) throws ParseException, StandardException {
        int n2 = 0;
        switch (this.jj_nt.kind) {
            case 66: {
                this.jj_consume_token(66);
                switch (n) {
                    case 6: {
                        n2 = 4;
                        break;
                    }
                    case 7: {
                        n2 = 6;
                        break;
                    }
                    case 11: {
                        n2 = 14;
                        break;
                    }
                    case 10: {
                        n2 = 12;
                        break;
                    }
                    case 9: {
                        n2 = 10;
                        break;
                    }
                    case 8: {
                        n2 = 8;
                        break;
                    }
                }
                return n2;
            }
            case 70:
            case 229: {
                this.some();
                switch (n) {
                    case 6: {
                        n2 = 3;
                        break;
                    }
                    case 7: {
                        n2 = 5;
                        break;
                    }
                    case 11: {
                        n2 = 13;
                        break;
                    }
                    case 10: {
                        n2 = 11;
                        break;
                    }
                    case 9: {
                        n2 = 9;
                        break;
                    }
                    case 8: {
                        n2 = 7;
                        break;
                    }
                }
                return n2;
            }
            default: {
                this.jj_la1[175] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final void some() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 229: {
                this.jj_consume_token(229);
                break;
            }
            case 70: {
                this.jj_consume_token(70);
                break;
            }
            default: {
                this.jj_la1[176] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final SubqueryNode existsExpression() throws ParseException, StandardException {
        this.jj_consume_token(138);
        this.jj_consume_token(449);
        final SubqueryNode tableSubquery = this.tableSubquery(15, null);
        this.jj_consume_token(450);
        return tableSubquery;
    }
    
    public final SelectNode tableExpression(final ResultColumnList list) throws ParseException, StandardException {
        Object whereClause = null;
        Object groupByClause = null;
        Object havingClause = null;
        Object windowClause = null;
        final FromList fromClause = this.fromClause();
        switch (this.jj_nt.kind) {
            case 265: {
                whereClause = this.whereClause(this.jj_consume_token(265));
                break;
            }
            default: {
                this.jj_la1[177] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 155: {
                groupByClause = this.groupByClause();
                break;
            }
            default: {
                this.jj_la1[178] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 156: {
                havingClause = this.havingClause();
                break;
            }
            default: {
                this.jj_la1[179] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 266: {
                windowClause = this.windowClause();
                break;
            }
            default: {
                this.jj_la1[180] = this.jj_gen;
                break;
            }
        }
        if (havingClause != null && groupByClause == null) {
            ((AggregateNode)this.nodeFactory.getNode(115, null, CountAggregateDefinition.class, Boolean.FALSE, "COUNT(*)", this.getContextManager())).replaceAggregatesWithColumnReferences(list, 0);
        }
        return (SelectNode)this.nodeFactory.getNode(129, list, null, fromClause, whereClause, groupByClause, havingClause, windowClause, this.getContextManager());
    }
    
    public final FromList fromClause() throws ParseException, StandardException {
        final FromList list = (FromList)this.nodeFactory.getNode(37, this.getNodeFactory().doJoinOrderOptimization(), this.getContextManager());
        this.jj_consume_token(147);
        final Token token = this.getToken(1);
        switch (this.jj_nt.kind) {
            case 59: {
                this.fromListProperties(list);
                break;
            }
            default: {
                this.jj_la1[181] = this.jj_gen;
                break;
            }
        }
        this.dummyTableReferenceRule(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.dummyTableReferenceRule(list);
                    continue;
                }
                default: {
                    this.jj_la1[182] = this.jj_gen;
                    final Token token2 = this.getToken(0);
                    list.setBeginOffset(token.beginOffset);
                    list.setEndOffset(token2.endOffset);
                    return list;
                }
            }
        }
    }
    
    public final void fromListProperties(final FromList list) throws ParseException, StandardException {
        final Properties propertyList = this.propertyList(true);
        this.jj_consume_token(64);
        list.setProperties(propertyList);
    }
    
    public final void dummyTableReferenceRule(final FromList list) throws ParseException, StandardException {
        if (this.getToken(1).kind == 239 && this.getToken(2).kind == 449 && (this.getToken(3).kind == 225 || this.getToken(3).kind == 259)) {
            this.jj_consume_token(239);
            list.addFromTable(this.tableReferenceTypes(false));
        }
        else {
            if (!this.jj_2_53(1)) {
                this.jj_consume_token(-1);
                throw new ParseException();
            }
            list.addFromTable(this.tableReferenceTypes(false));
        }
    }
    
    public final FromTable tableReferenceTypes(final boolean b) throws ParseException, StandardException {
        if (this.jj_2_54(1)) {
            return this.tableReference(b);
        }
        switch (this.jj_nt.kind) {
            case 447: {
                this.jj_consume_token(447);
                this.jj_consume_token(408);
                final FromTable tableReference = this.tableReference(b);
                this.jj_consume_token(448);
                return tableReference;
            }
            default: {
                this.jj_la1[183] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Object[] optionalTableClauses() throws ParseException, StandardException {
        Object propertyList = null;
        Object derivedColumnList = null;
        Object identifier = null;
        switch (this.jj_nt.kind) {
            case 59: {
                final Object[] optionalTableProperties = this.optionalTableProperties();
                optionalTableProperties[1] = derivedColumnList;
                optionalTableProperties[2] = identifier;
                return optionalTableProperties;
            }
            default: {
                this.jj_la1[187] = this.jj_gen;
                if (this.jj_2_55(1)) {
                    switch (this.jj_nt.kind) {
                        case 72: {
                            this.jj_consume_token(72);
                            break;
                        }
                        default: {
                            this.jj_la1[184] = this.jj_gen;
                            break;
                        }
                    }
                    identifier = this.identifier(128, true);
                    switch (this.jj_nt.kind) {
                        case 449: {
                            this.jj_consume_token(449);
                            derivedColumnList = this.derivedColumnList();
                            this.jj_consume_token(450);
                            break;
                        }
                        default: {
                            this.jj_la1[185] = this.jj_gen;
                            break;
                        }
                    }
                    switch (this.jj_nt.kind) {
                        case 59: {
                            propertyList = this.propertyList(true);
                            this.jj_consume_token(64);
                            break;
                        }
                        default: {
                            this.jj_la1[186] = this.jj_gen;
                            break;
                        }
                    }
                }
                return new Object[] { propertyList, derivedColumnList, identifier };
            }
        }
    }
    
    public final Object[] optionalTableProperties() throws ParseException, StandardException {
        final Properties propertyList = this.propertyList(true);
        this.jj_consume_token(64);
        return new Object[] { propertyList, null, null };
    }
    
    public final FromTable tableReference(final boolean b) throws ParseException, StandardException {
        FromTable joinedTableExpression = null;
        final FromTable tableFactor = this.tableFactor();
        while (this.joinedTableExpressionFollows()) {
            joinedTableExpression = this.joinedTableExpression((joinedTableExpression == null) ? tableFactor : joinedTableExpression, b);
        }
        return (joinedTableExpression == null) ? tableFactor : joinedTableExpression;
    }
    
    public final FromTable tableFactor() throws ParseException, StandardException {
        ResultColumnList list = null;
        Object[] array = new Object[3];
        if (this.jj_2_56(1)) {
            JavaToSQLValueNode javaToSQLValueNode = null;
            if (this.newInvocationFollows(1)) {
                javaToSQLValueNode = this.newInvocation();
            }
            else {
                switch (this.jj_nt.kind) {
                    case 239: {
                        javaToSQLValueNode = this.vtiTableConstruct();
                        break;
                    }
                    default: {
                        this.jj_la1[188] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
            switch (this.jj_nt.kind) {
                case 72: {
                    this.jj_consume_token(72);
                    break;
                }
                default: {
                    this.jj_la1[189] = this.jj_gen;
                    break;
                }
            }
            final String identifier = this.identifier(128, true);
            switch (this.jj_nt.kind) {
                case 449: {
                    this.jj_consume_token(449);
                    list = this.derivedColumnList();
                    this.jj_consume_token(450);
                    break;
                }
                default: {
                    this.jj_la1[190] = this.jj_gen;
                    break;
                }
            }
            switch (this.jj_nt.kind) {
                case 59: {
                    array = this.optionalTableProperties();
                    break;
                }
                default: {
                    this.jj_la1[191] = this.jj_gen;
                    break;
                }
            }
            return (FromTable)this.nodeFactory.getNode(120, javaToSQLValueNode.getJavaValueNode(), identifier, list, (array != null) ? array[0] : ((Properties)null), this.getContextManager());
        }
        if (this.jj_2_57(1)) {
            final TableName qualifiedName = this.qualifiedName(128);
            final Object[] optionalTableClauses = this.optionalTableClauses();
            return (FromTable)this.nodeFactory.getNode(135, qualifiedName, optionalTableClauses[2], optionalTableClauses[1], optionalTableClauses[0], this.getContextManager());
        }
        if (this.getToken(1).kind == 449 && (this.getToken(2).kind == 225 || this.getToken(2).kind == 259)) {
            final SubqueryNode derivedTable = this.derivedTable();
            switch (this.jj_nt.kind) {
                case 72: {
                    this.jj_consume_token(72);
                    break;
                }
                default: {
                    this.jj_la1[192] = this.jj_gen;
                    break;
                }
            }
            final String identifier2 = this.identifier(128, true);
            switch (this.jj_nt.kind) {
                case 449: {
                    this.jj_consume_token(449);
                    list = this.derivedColumnList();
                    this.jj_consume_token(450);
                    break;
                }
                default: {
                    this.jj_la1[193] = this.jj_gen;
                    break;
                }
            }
            switch (this.jj_nt.kind) {
                case 59: {
                    array = this.optionalTableProperties();
                    break;
                }
                default: {
                    this.jj_la1[194] = this.jj_gen;
                    break;
                }
            }
            return (FromTable)this.nodeFactory.getNode(136, derivedTable.getResultSet(), derivedTable.getOrderByList(), derivedTable.getOffset(), derivedTable.getFetchFirst(), derivedTable.hasJDBClimitClause(), identifier2, list, (array != null) ? array[0] : ((Properties)null), this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                final FromTable tableReferenceTypes = this.tableReferenceTypes(true);
                this.jj_consume_token(450);
                return tableReferenceTypes;
            }
            default: {
                this.jj_la1[195] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultColumnList derivedColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.columnNameList(list);
        return list;
    }
    
    public final void columnNameList(final ResultColumnList list) throws ParseException, StandardException {
        this.columnNameItem(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.columnNameItem(list);
                    continue;
                }
                default: {
                    this.jj_la1[196] = this.jj_gen;
                }
            }
        }
    }
    
    public final void columnNameItem(final ResultColumnList list) throws ParseException, StandardException {
        list.addResultColumn((ResultColumn)this.nodeFactory.getNode(80, this.identifier(128, true), null, this.getContextManager()));
    }
    
    public final void indexColumnList(final List list) throws ParseException, StandardException {
        this.indexColumnItem(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.indexColumnItem(list);
                    continue;
                }
                default: {
                    this.jj_la1[197] = this.jj_gen;
                }
            }
        }
    }
    
    public final void indexColumnItem(final List list) throws ParseException, StandardException {
        String str = this.identifier(128, true);
        Label_0154: {
            switch (this.jj_nt.kind) {
                case 73:
                case 123: {
                    switch (this.jj_nt.kind) {
                        case 73: {
                            this.jj_consume_token(73);
                            break Label_0154;
                        }
                        case 123: {
                            this.jj_consume_token(123);
                            str += ' ';
                            break Label_0154;
                        }
                        default: {
                            this.jj_la1[198] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[199] = this.jj_gen;
                    break;
                }
            }
        }
        list.add(str);
    }
    
    public final SubqueryNode derivedTable() throws ParseException, StandardException {
        this.jj_consume_token(449);
        final SubqueryNode tableSubquery = this.tableSubquery(0, null);
        this.jj_consume_token(450);
        return tableSubquery;
    }
    
    public final TableOperatorNode joinedTableExpression(final ResultSetNode resultSetNode, final boolean b) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 107: {
                return this.crossJoin(resultSetNode, b);
            }
            case 163:
            case 173:
            case 177:
            case 219: {
                return this.qualifiedJoin(resultSetNode, b);
            }
            case 186: {
                return this.naturalJoin(resultSetNode, b);
            }
            default: {
                this.jj_la1[200] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final TableOperatorNode crossJoin(final ResultSetNode resultSetNode, final boolean nestedInParens) throws ParseException, StandardException {
        this.jj_consume_token(107);
        this.jj_consume_token(173);
        final JoinNode joinNode = this.newJoinNode(resultSetNode, this.tableFactor(), null, null, 1);
        joinNode.setNestedInParens(nestedInParens);
        return joinNode;
    }
    
    public final TableOperatorNode qualifiedJoin(final ResultSetNode resultSetNode, final boolean nestedInParens) throws ParseException, StandardException {
        int joinType = 1;
        switch (this.jj_nt.kind) {
            case 163:
            case 177:
            case 219: {
                joinType = this.joinType();
                break;
            }
            default: {
                this.jj_la1[201] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(173);
        final FromTable tableReferenceTypes = this.tableReferenceTypes(nestedInParens);
        final Object[] joinSpecification = this.joinSpecification(resultSetNode, tableReferenceTypes);
        final ValueNode valueNode = (ValueNode)joinSpecification[0];
        final ResultColumnList list = (ResultColumnList)joinSpecification[1];
        if (valueNode == null && list == null) {
            throw StandardException.newException("42Y11", JoinNode.joinTypeToString(joinType));
        }
        final JoinNode joinNode = this.newJoinNode(resultSetNode, tableReferenceTypes, valueNode, list, joinType);
        joinNode.setNestedInParens(nestedInParens);
        return joinNode;
    }
    
    public final TableOperatorNode naturalJoin(final ResultSetNode resultSetNode, final boolean nestedInParens) throws ParseException, StandardException {
        int joinType = 1;
        this.jj_consume_token(186);
        switch (this.jj_nt.kind) {
            case 163:
            case 177:
            case 219: {
                joinType = this.joinType();
                break;
            }
            default: {
                this.jj_la1[202] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(173);
        final JoinNode joinNode = this.newJoinNode(resultSetNode, this.tableFactor(), null, null, joinType);
        joinNode.setNestedInParens(nestedInParens);
        joinNode.setNaturalJoin();
        return joinNode;
    }
    
    public final int joinType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 163: {
                this.jj_consume_token(163);
                return 1;
            }
            case 177:
            case 219: {
                final int outerJoinType = this.outerJoinType();
                switch (this.jj_nt.kind) {
                    case 201: {
                        this.jj_consume_token(201);
                        break;
                    }
                    default: {
                        this.jj_la1[203] = this.jj_gen;
                        break;
                    }
                }
                return outerJoinType;
            }
            default: {
                this.jj_la1[204] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int outerJoinType() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 177: {
                this.jj_consume_token(177);
                return 3;
            }
            case 219: {
                this.jj_consume_token(219);
                return 4;
            }
            default: {
                this.jj_la1[205] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Object[] joinSpecification(final ResultSetNode resultSetNode, final ResultSetNode resultSetNode2) throws ParseException, StandardException {
        final Object[] array = new Object[2];
        final Object o = null;
        final Object o2 = null;
        switch (this.jj_nt.kind) {
            case 195: {
                array[0] = this.joinCondition();
                array[1] = o;
                return array;
            }
            case 257: {
                final ResultColumnList namedColumnsJoin = this.namedColumnsJoin();
                array[0] = o2;
                array[1] = namedColumnsJoin;
                return array;
            }
            default: {
                this.jj_la1[206] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode joinCondition() throws ParseException, StandardException {
        this.jj_consume_token(195);
        return this.valueExpression();
    }
    
    public final ResultColumnList namedColumnsJoin() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.jj_consume_token(257);
        this.jj_consume_token(449);
        this.columnNameList(list);
        this.jj_consume_token(450);
        return list;
    }
    
    public final ResultSetNode tableValueConstructor() throws ParseException, StandardException {
        this.jj_consume_token(259);
        return this.tableValueConstructorList();
    }
    
    public final ResultSetNode tableValueConstructorList() throws ParseException, StandardException {
        ResultSetNode resultSetNode = this.rowValueConstructor(null);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    resultSetNode = this.rowValueConstructor(resultSetNode);
                    continue;
                }
                default: {
                    this.jj_la1[207] = this.jj_gen;
                    if (resultSetNode instanceof UnionNode) {
                        ((UnionNode)resultSetNode).markTopTableConstructor();
                    }
                    return resultSetNode;
                }
            }
        }
    }
    
    public final ValueNode datetimeValueFunction() throws ParseException, StandardException {
        if (this.getToken(1).kind == 108 && this.getToken(2).kind == 285) {
            this.jj_consume_token(108);
            this.jj_consume_token(285);
            return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(0), this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 109: {
                this.jj_consume_token(109);
                return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(0), this.getContextManager());
            }
            default: {
                this.jj_la1[208] = this.jj_gen;
                if (this.getToken(1).kind == 108 && this.getToken(2).kind == 347) {
                    this.jj_consume_token(108);
                    this.jj_consume_token(347);
                    return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(1), this.getContextManager());
                }
                switch (this.jj_nt.kind) {
                    case 110: {
                        this.jj_consume_token(110);
                        return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(1), this.getContextManager());
                    }
                    default: {
                        this.jj_la1[209] = this.jj_gen;
                        if (this.getToken(1).kind == 108 && this.getToken(2).kind == 348) {
                            this.jj_consume_token(108);
                            this.jj_consume_token(348);
                            return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(2), this.getContextManager());
                        }
                        switch (this.jj_nt.kind) {
                            case 111: {
                                this.jj_consume_token(111);
                                return (ValueNode)this.nodeFactory.getNode(108, ReuseFactory.getInteger(2), this.getContextManager());
                            }
                            default: {
                                this.jj_la1[210] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();
                            }
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
    
    public final ValueNode windowOrAggregateFunctionNode() throws ParseException, StandardException {
        QueryTreeNode queryTreeNode = null;
        switch (this.jj_nt.kind) {
            case 105: {
                this.jj_consume_token(105);
                this.jj_consume_token(449);
                ValueNode aggregateExpression = null;
                switch (this.jj_nt.kind) {
                    case 451: {
                        this.jj_consume_token(451);
                        aggregateExpression = (ValueNode)this.nodeFactory.getNode(115, null, CountAggregateDefinition.class, Boolean.FALSE, "COUNT(*)", this.getContextManager());
                        break;
                    }
                    default: {
                        this.jj_la1[211] = this.jj_gen;
                        if (this.jj_2_58(1)) {
                            aggregateExpression = this.aggregateExpression("COUNT", CountAggregateDefinition.class);
                            break;
                        }
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                this.jj_consume_token(450);
                if (this.jj_2_59(1)) {
                    queryTreeNode = this.overClause();
                }
                if (queryTreeNode != null) {
                    aggregateExpression = (ValueNode)this.nodeFactory.getNode(226, queryTreeNode, aggregateExpression, this.getContextManager());
                }
                return aggregateExpression;
            }
            case 77:
            case 181:
            case 182:
            case 236: {
                ValueNode generalAggregate = this.generalAggregate();
                if (this.jj_2_60(1)) {
                    queryTreeNode = this.overClause();
                }
                if (queryTreeNode != null) {
                    generalAggregate = (ValueNode)this.nodeFactory.getNode(226, queryTreeNode, generalAggregate, this.getContextManager());
                }
                return generalAggregate;
            }
            case 370: {
                this.jj_consume_token(370);
                this.jj_consume_token(449);
                this.jj_consume_token(450);
                return (ValueNode)this.nodeFactory.getNode(227, null, this.overClause(), this.getContextManager());
            }
            default: {
                this.jj_la1[212] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final QueryTreeNode overClause() throws ParseException, StandardException {
        Object orderByClause = null;
        if (this.getToken(2).kind != 449 && this.getToken(2).kind != 475) {
            this.jj_consume_token(-1);
            throw new ParseException();
        }
        this.jj_consume_token(368);
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                switch (this.jj_nt.kind) {
                    case 200: {
                        orderByClause = this.orderByClause(null);
                        break;
                    }
                    default: {
                        this.jj_la1[213] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(450);
                return (QueryTreeNode)this.nodeFactory.getNode(228, null, orderByClause, this.getContextManager());
            }
            default: {
                this.jj_la1[214] = this.jj_gen;
                if (this.jj_2_61(1)) {
                    return (QueryTreeNode)this.nodeFactory.getNode(229, this.identifier(128, true), this.getContextManager());
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode aggregateExpression(final String s, final Class clazz) throws ParseException, StandardException {
        boolean setQuantifier = false;
        if (this.jj_2_62(1)) {
            setQuantifier = this.setQuantifier();
        }
        return (ValueNode)this.nodeFactory.getNode(115, this.additiveExpression(null, 0), clazz, setQuantifier ? Boolean.TRUE : Boolean.FALSE, s, this.getContextManager());
    }
    
    public final ValueNode generalAggregate() throws ParseException, StandardException {
        final Token builtInAggregateType = this.builtInAggregateType();
        this.jj_consume_token(449);
        final ValueNode aggregateExpression = this.aggregateExpression(aggName(builtInAggregateType), aggClass(builtInAggregateType));
        this.jj_consume_token(450);
        return aggregateExpression;
    }
    
    public final Token builtInAggregateType() throws ParseException, StandardException {
        Token token = null;
        switch (this.jj_nt.kind) {
            case 181: {
                token = this.jj_consume_token(181);
                break;
            }
            case 77: {
                token = this.jj_consume_token(77);
                break;
            }
            case 182: {
                token = this.jj_consume_token(182);
                break;
            }
            case 236: {
                token = this.jj_consume_token(236);
                break;
            }
            default: {
                this.jj_la1[215] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return token;
    }
    
    public final ValueNode castSpecification() throws ParseException, StandardException {
        this.jj_consume_token(87);
        this.jj_consume_token(449);
        final ValueNode castOperand = this.castOperand();
        this.jj_consume_token(72);
        final DataTypeDescriptor dataTypeCast = this.dataTypeCast();
        this.jj_consume_token(450);
        ValueNode valueNode = (ValueNode)this.nodeFactory.getNode(60, castOperand, dataTypeCast, this.getContextManager());
        ((CastNode)valueNode).setForExternallyGeneratedCASTnode();
        if (dataTypeCast.getTypeId().userType()) {
            valueNode = (ValueNode)this.nodeFactory.getNode(36, this.nodeFactory.getNode(28, valueNode, this.getContextManager()), this.getContextManager());
        }
        return valueNode;
    }
    
    public final ValueNode nextValueExpression() throws ParseException, StandardException {
        this.jj_consume_token(188);
        this.jj_consume_token(258);
        this.jj_consume_token(144);
        final TableName qualifiedName = this.qualifiedName(128);
        this.checkVersion(180, "NEXT VALUE");
        return (ValueNode)this.nodeFactory.getNode(231, qualifiedName, this.getContextManager());
    }
    
    public final int charOrVarchar() throws ParseException {
        switch (this.jj_nt.kind) {
            case 88: {
                this.jj_consume_token(88);
                return 1;
            }
            case 261: {
                this.jj_consume_token(261);
                return 12;
            }
            default: {
                this.jj_la1[216] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode castOperand() throws ParseException, StandardException {
        if (this.jj_2_63(1)) {
            return this.additiveExpression(null, 0);
        }
        switch (this.jj_nt.kind) {
            case 191: {
                this.jj_consume_token(191);
                return (ValueNode)this.nodeFactory.getNode(13, this.getContextManager());
            }
            default: {
                this.jj_la1[217] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ParameterNode dynamicParameterSpecification() throws ParseException, StandardException {
        this.jj_consume_token(467);
        return this.makeParameterNode();
    }
    
    public final ValueNode whereClause(final Token token) throws ParseException, StandardException {
        final ValueNode valueExpression = this.valueExpression();
        final Token token2 = this.getToken(0);
        valueExpression.setBeginOffset(token.endOffset + 1);
        valueExpression.setEndOffset(token2.endOffset);
        return valueExpression;
    }
    
    public final GroupByList groupByClause() throws ParseException, StandardException {
        this.jj_consume_token(155);
        this.jj_consume_token(83);
        if (this.getToken(1).kind == 328 && this.getToken(2).kind == 449) {
            this.jj_consume_token(328);
            this.jj_consume_token(449);
            final GroupByList groupingColumnReferenceList = this.groupingColumnReferenceList();
            this.jj_consume_token(450);
            groupingColumnReferenceList.setRollup();
            return groupingColumnReferenceList;
        }
        if (this.jj_2_64(1)) {
            return this.groupingColumnReferenceList();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final GroupByList groupingColumnReferenceList() throws ParseException, StandardException {
        final GroupByList list = (GroupByList)this.nodeFactory.getNode(3, this.getContextManager());
        this.groupingColumnReference(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.groupingColumnReference(list);
                    continue;
                }
                default: {
                    this.jj_la1[218] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void groupingColumnReference(final GroupByList list) throws ParseException, StandardException {
        final ValueNode additiveExpression = this.additiveExpression(null, 0);
        final HasNodeVisitor hasNodeVisitor = new HasNodeVisitor(AggregateNode.class);
        additiveExpression.accept(hasNodeVisitor);
        if (hasNodeVisitor.hasNode()) {
            throw StandardException.newException("42Y26");
        }
        final CollectNodesVisitor collectNodesVisitor = new CollectNodesVisitor(StaticMethodCallNode.class);
        additiveExpression.accept(collectNodesVisitor);
        final List list2 = collectNodesVisitor.getList();
        for (int i = 0; i < list2.size(); ++i) {
            list2.get(i).setAppearsInGroupBy();
        }
        if (additiveExpression.isParameterNode()) {
            throw StandardException.newException("42X01", "?");
        }
        list.addGroupByColumn((GroupByColumn)this.nodeFactory.getNode(35, additiveExpression, this.getContextManager()));
    }
    
    public final ValueNode havingClause() throws ParseException, StandardException {
        this.jj_consume_token(156);
        return this.valueExpression();
    }
    
    public final WindowList windowClause() throws ParseException, StandardException {
        final WindowList list = new WindowList();
        list.setContextManager(this.getContextManager());
        this.jj_consume_token(266);
        WindowList list2 = this.windowDefinition(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    list2 = this.windowDefinition(list2);
                    continue;
                }
                default: {
                    this.jj_la1[219] = this.jj_gen;
                    return list2;
                }
            }
        }
    }
    
    public final WindowList windowDefinition(final WindowList list) throws ParseException, StandardException {
        Object orderByClause = null;
        final String identifier = this.identifier(128, true);
        this.jj_consume_token(72);
        this.jj_consume_token(449);
        switch (this.jj_nt.kind) {
            case 200: {
                orderByClause = this.orderByClause(null);
                break;
            }
            default: {
                this.jj_la1[220] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(450);
        list.addWindow((WindowDefinitionNode)this.nodeFactory.getNode(228, identifier, orderByClause, this.getContextManager()));
        return list;
    }
    
    public final StatementNode schemaDefinition() throws ParseException, StandardException {
        Object identifier = null;
        this.jj_consume_token(222);
        if (this.jj_2_65(1)) {
            final String identifier2 = this.identifier(128, true);
            switch (this.jj_nt.kind) {
                case 76: {
                    this.jj_consume_token(76);
                    identifier = this.identifier(128, true);
                    break;
                }
                default: {
                    this.jj_la1[221] = this.jj_gen;
                    break;
                }
            }
            if (identifier != null) {
                this.checkVersion(140, "AUTHORIZATION");
            }
            if (identifier2.startsWith("SYS")) {
                throw StandardException.newException("42939", identifier2);
            }
            return (StatementNode)this.nodeFactory.getNode(134, identifier2, identifier, this.getContextManager());
        }
        else {
            switch (this.jj_nt.kind) {
                case 76: {
                    this.jj_consume_token(76);
                    final String identifier3 = this.identifier(128, true);
                    this.checkVersion(140, "AUTHORIZATION");
                    if (identifier3.startsWith("SYS")) {
                        throw StandardException.newException("42939", identifier3);
                    }
                    return (StatementNode)this.nodeFactory.getNode(134, identifier3, identifier3, this.getContextManager());
                }
                default: {
                    this.jj_la1[222] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final StatementNode roleDefinition() throws ParseException, StandardException {
        this.jj_consume_token(369);
        final String identifier = this.identifier(128, true);
        this.checkVersion(170, "ROLES");
        this.checkSqlStandardAccess("CREATE ROLE");
        if (identifier.startsWith("SYS")) {
            throw StandardException.newException("4293A", identifier);
        }
        return (StatementNode)this.nodeFactory.getNode(211, identifier, this.getContextManager());
    }
    
    public final StatementNode sequenceDefinition() throws ParseException, StandardException {
        Object o = null;
        Object o2 = null;
        Object o3 = null;
        Object o4 = null;
        Object o5 = null;
        Boolean false = Boolean.FALSE;
        final Object[] array = new Object[6];
        this.jj_consume_token(428);
        final TableName qualifiedName = this.qualifiedName(128);
        while (this.jj_2_66(1)) {
            this.sequenceGeneratorOption(array);
        }
        this.checkVersion(180, "SEQUENCES");
        if (array[0] != null) {
            o = array[0];
        }
        if (array[1] != null) {
            o2 = array[1];
        }
        if (array[2] != null) {
            o3 = array[2];
        }
        if (array[3] != null && !(array[3] instanceof Boolean)) {
            o4 = array[3];
        }
        if (array[4] != null && !(array[4] instanceof Boolean)) {
            o5 = array[4];
        }
        if (array[5] != null) {
            false = (Boolean)array[5];
        }
        return (StatementNode)this.nodeFactory.getNode(224, qualifiedName, o, o2, o3, o4, o5, false, this.getContextManager());
    }
    
    public final void sequenceGeneratorOption(final Object[] array) throws ParseException, StandardException {
        final Boolean[] array2 = { null };
        Token token = null;
        Object o = null;
        int n = 0;
        Label_0456: {
            switch (this.jj_nt.kind) {
                case 72: {
                    token = this.jj_consume_token(72);
                    o = this.exactIntegerType();
                    n = 0;
                    break;
                }
                case 343: {
                    token = this.jj_consume_token(343);
                    this.jj_consume_token(267);
                    o = this.exactIntegerObject();
                    n = 1;
                    break;
                }
                case 293: {
                    token = this.jj_consume_token(293);
                    this.jj_consume_token(83);
                    o = this.exactIntegerObject();
                    n = 2;
                    break;
                }
                default: {
                    this.jj_la1[225] = this.jj_gen;
                    if (this.jj_2_67(1)) {
                        switch (this.jj_nt.kind) {
                            case 306: {
                                token = this.jj_consume_token(306);
                                o = this.exactIntegerObject();
                                break;
                            }
                            default: {
                                this.jj_la1[223] = this.jj_gen;
                                if (this.getToken(2).kind == 306) {
                                    this.jj_consume_token(189);
                                    token = this.jj_consume_token(306);
                                    o = Boolean.FALSE;
                                    break;
                                }
                                this.jj_consume_token(-1);
                                throw new ParseException();
                            }
                        }
                        n = 3;
                        break;
                    }
                    if (this.jj_2_68(1)) {
                        switch (this.jj_nt.kind) {
                            case 307: {
                                token = this.jj_consume_token(307);
                                o = this.exactIntegerObject();
                                break;
                            }
                            default: {
                                this.jj_la1[224] = this.jj_gen;
                                if (this.getToken(2).kind == 307) {
                                    this.jj_consume_token(189);
                                    token = this.jj_consume_token(307);
                                    o = Boolean.FALSE;
                                    break;
                                }
                                this.jj_consume_token(-1);
                                throw new ParseException();
                            }
                        }
                        n = 4;
                        break;
                    }
                    switch (this.jj_nt.kind) {
                        case 189:
                        case 283: {
                            token = this.cycleClause(array2);
                            o = array2[0];
                            n = 5;
                            break Label_0456;
                        }
                        default: {
                            this.jj_la1[226] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
            }
        }
        if (n != -1) {
            if (array[n] != null) {
                throw StandardException.newException("42XAJ", token.image);
            }
            array[n] = o;
        }
    }
    
    public final Token cycleClause(final Boolean[] array) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 283: {
                final Token jj_consume_token = this.jj_consume_token(283);
                array[0] = Boolean.TRUE;
                return jj_consume_token;
            }
            case 189: {
                this.jj_consume_token(189);
                final Token jj_consume_token2 = this.jj_consume_token(283);
                array[0] = Boolean.FALSE;
                return jj_consume_token2;
            }
            default: {
                this.jj_la1[227] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Long exactIntegerObject() throws ParseException, StandardException {
        return new Long(this.exactNumber());
    }
    
    public final Long stepValue() throws ParseException, StandardException {
        this.jj_consume_token(293);
        this.jj_consume_token(83);
        return new Long(this.exactNumber());
    }
    
    public final StatementNode dropSequenceStatement() throws ParseException, StandardException {
        this.jj_consume_token(428);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(217);
        this.checkVersion(180, "SEQUENCES");
        return (StatementNode)this.nodeFactory.getNode(225, qualifiedName, this.getContextManager());
    }
    
    public final StatementNode tableDefinition() throws ParseException, StandardException {
        final char value = 'R';
        Object propertyList = null;
        Object tableColumnList = null;
        boolean b = true;
        this.jj_consume_token(239);
        final TableName qualifiedName = this.qualifiedName(128);
        if (this.getToken(1).kind == 449 && this.getToken(3).kind != 453 && this.getToken(3).kind != 450) {
            final TableElementList tableElementList = this.tableElementList();
            switch (this.jj_nt.kind) {
                case 59: {
                    propertyList = this.propertyList(false);
                    this.jj_consume_token(64);
                    break;
                }
                default: {
                    this.jj_la1[228] = this.jj_gen;
                    break;
                }
            }
            return (StatementNode)this.nodeFactory.getNode(141, qualifiedName, tableElementList, propertyList, new Character(value), this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 72:
            case 449: {
                switch (this.jj_nt.kind) {
                    case 449: {
                        this.jj_consume_token(449);
                        tableColumnList = this.tableColumnList();
                        this.jj_consume_token(450);
                        break;
                    }
                    default: {
                        this.jj_la1[229] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(72);
                final ResultSetNode queryExpression = this.queryExpression(null, 0);
                this.jj_consume_token(267);
                switch (this.jj_nt.kind) {
                    case 189: {
                        this.jj_consume_token(189);
                        b = false;
                        break;
                    }
                    default: {
                        this.jj_la1[230] = this.jj_gen;
                        break;
                    }
                }
                this.jj_consume_token(284);
                if (b) {
                    throw StandardException.newException("0A000.S", "WITH DATA");
                }
                final HasNodeVisitor hasNodeVisitor = new HasNodeVisitor(ParameterNode.class);
                queryExpression.accept(hasNodeVisitor);
                if (hasNodeVisitor.hasNode()) {
                    throw StandardException.newException("42X99");
                }
                return (StatementNode)this.nodeFactory.getNode(141, qualifiedName, tableColumnList, queryExpression, this.getContextManager());
            }
            default: {
                this.jj_la1[231] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultColumnList tableColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.columnNameList(list);
        return list;
    }
    
    public final Properties propertyList(final boolean b) throws ParseException, StandardException {
        final FormatableProperties formatableProperties = new FormatableProperties();
        this.jj_consume_token(59);
        final StringTokenizer stringTokenizer = new StringTokenizer(this.getToken(1).image, ",");
        while (stringTokenizer.hasMoreTokens()) {
            final StringTokenizer stringTokenizer2 = new StringTokenizer(stringTokenizer.nextToken(), "=", true);
            if (stringTokenizer2.countTokens() != 3) {
                throw StandardException.newException("XCY04.S");
            }
            final String trim = stringTokenizer2.nextToken().trim();
            if (!stringTokenizer2.nextToken().equals("=")) {
                throw StandardException.newException("XCY04.S");
            }
            final String trim2 = stringTokenizer2.nextToken().trim();
            verifyImageLength(trim2);
            String value;
            if (trim2.startsWith("'") && trim2.endsWith("'")) {
                value = StringUtil.compressQuotes(trim2.substring(1, trim2.length() - 1), "''");
            }
            else if (trim2.startsWith("\"") && trim2.endsWith("\"")) {
                value = StringUtil.compressQuotes(trim2.substring(1, trim2.length() - 1), "\"\"");
            }
            else {
                value = trim2.toUpperCase();
            }
            if (formatableProperties.put(trim, value) != null) {
                throw StandardException.newException("42Y49", trim);
            }
        }
        if (!b) {
            this.checkInternalFeature("DERBY-PROPERTIES");
        }
        return formatableProperties;
    }
    
    public final char DB2lockGranularityClause() throws ParseException, StandardException {
        this.jj_consume_token(304);
        return this.lockGranularity();
    }
    
    public final char lockGranularity() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 239: {
                this.jj_consume_token(239);
                return 'T';
            }
            case 329: {
                this.jj_consume_token(329);
                return 'R';
            }
            default: {
                this.jj_la1[232] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode indexDefinition() throws ParseException, StandardException {
        Boolean b = Boolean.FALSE;
        Object propertyList = null;
        final ArrayList list = new ArrayList();
        switch (this.jj_nt.kind) {
            case 252: {
                b = this.unique();
                break;
            }
            default: {
                this.jj_la1[233] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(396);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(195);
        final TableName qualifiedName2 = this.qualifiedName(128);
        this.jj_consume_token(449);
        this.indexColumnList(list);
        this.jj_consume_token(450);
        switch (this.jj_nt.kind) {
            case 59: {
                propertyList = this.propertyList(false);
                this.jj_consume_token(64);
                break;
            }
            default: {
                this.jj_la1[234] = this.jj_gen;
                break;
            }
        }
        if (qualifiedName.getSchemaName() == null) {
            qualifiedName.setSchemaName(qualifiedName2.getSchemaName());
        }
        else if (qualifiedName2.getSchemaName() == null) {
            qualifiedName2.setSchemaName(qualifiedName.getSchemaName());
        }
        else if (!qualifiedName.getSchemaName().equals(qualifiedName2.getSchemaName())) {
            throw StandardException.newException("X0Y26.S", qualifiedName, qualifiedName2);
        }
        return (StatementNode)this.nodeFactory.getNode(146, b, "BTREE", qualifiedName, qualifiedName2, list, propertyList, this.getContextManager());
    }
    
    public final Boolean unique() throws ParseException, StandardException {
        this.jj_consume_token(252);
        return Boolean.TRUE;
    }
    
    public final StatementNode procedureDefinition() throws ParseException, StandardException {
        final Object[] array = new Object[12];
        this.jj_consume_token(211);
        final TableName qualifiedName = this.qualifiedName(128);
        array[0] = this.procedureParameterList(array);
        while (true) {
            this.routineElement(true, false, array);
            switch (this.jj_nt.kind) {
                case 139:
                case 189:
                case 190:
                case 277:
                case 282:
                case 288:
                case 289:
                case 298:
                case 309:
                case 327:
                case 413:
                case 417:
                case 422:
                case 433: {
                    continue;
                }
                default: {
                    this.jj_la1[235] = this.jj_gen;
                    this.checkRequiredRoutineClause(SQLParser.JAVA_ROUTINE_CLAUSES, array);
                    return this.getCreateAliasNode(qualifiedName, array[4], array, 'P');
                }
            }
        }
    }
    
    public final void routineElement(final boolean b, final boolean b2, final Object[] array) throws ParseException, StandardException {
        Object o = null;
        int n = 0;
        Label_0706: {
            switch (this.jj_nt.kind) {
                case 433: {
                    this.jj_consume_token(433);
                    this.qualifiedName(128);
                    throw StandardException.newException("0A000.S", "SPECIFIC identifier");
                }
                case 289:
                case 422: {
                    switch (this.jj_nt.kind) {
                        case 289: {
                            this.jj_consume_token(289);
                            break;
                        }
                        default: {
                            this.jj_la1[236] = this.jj_gen;
                            break;
                        }
                    }
                    this.jj_consume_token(422);
                    this.jj_consume_token(430);
                    final int uint_value = this.uint_value();
                    if (!b) {
                        throw StandardException.newException("42X01", "RESULT SETS");
                    }
                    o = ReuseFactory.getInteger(uint_value);
                    n = 2;
                    break;
                }
                case 298: {
                    this.jj_consume_token(298);
                    this.jj_consume_token(398);
                    o = "JAVA";
                    n = 3;
                    break;
                }
                case 288: {
                    this.jj_consume_token(288);
                    o = Boolean.TRUE;
                    n = 7;
                    this.checkVersion(170, "DETERMINISTIC");
                    break;
                }
                case 190: {
                    this.jj_consume_token(190);
                    this.jj_consume_token(288);
                    o = Boolean.FALSE;
                    n = 7;
                    this.checkVersion(170, "DETERMINISTIC");
                    break;
                }
                case 139: {
                    this.jj_consume_token(139);
                    switch (this.jj_nt.kind) {
                        case 314: {
                            this.jj_consume_token(314);
                            o = this.string();
                            n = 4;
                            break Label_0706;
                        }
                        case 332: {
                            this.jj_consume_token(332);
                            this.checkVersion(190, "EXTERNAL SECURITY");
                            this.checkSqlStandardAccess("EXTERNAL SECURITY");
                            o = new Boolean(this.routineSecurityClause());
                            n = 10;
                            break Label_0706;
                        }
                        default: {
                            this.jj_la1[237] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                case 413: {
                    this.jj_consume_token(413);
                    this.jj_consume_token(437);
                    o = this.parameterStyle(b2);
                    n = 5;
                    break;
                }
                case 189: {
                    this.jj_consume_token(189);
                    this.jj_consume_token(231);
                    o = ReuseFactory.getShort((short)3);
                    n = 6;
                    break;
                }
                case 282: {
                    this.jj_consume_token(282);
                    this.jj_consume_token(231);
                    o = ReuseFactory.getShort((short)2);
                    n = 6;
                    break;
                }
                case 417: {
                    this.jj_consume_token(417);
                    this.jj_consume_token(231);
                    this.jj_consume_token(284);
                    o = ReuseFactory.getShort((short)1);
                    n = 6;
                    break;
                }
                case 309: {
                    this.jj_consume_token(309);
                    this.jj_consume_token(231);
                    this.jj_consume_token(284);
                    if (!b) {
                        throw StandardException.newException("42X01", "MODIFIES SQL DATA");
                    }
                    o = ReuseFactory.getShort((short)0);
                    n = 6;
                    break;
                }
                case 277:
                case 327: {
                    o = this.calledOnNullInput(b);
                    n = 8;
                    break;
                }
                default: {
                    this.jj_la1[238] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        if (n != -1) {
            if (array[n] != null) {
                throw StandardException.newException("42613", SQLParser.ROUTINE_CLAUSE_NAMES[n]);
            }
            array[n] = o;
        }
    }
    
    public final Boolean calledOnNullInput(final boolean b) throws ParseException, StandardException {
        Boolean b2 = null;
        switch (this.jj_nt.kind) {
            case 277: {
                this.jj_consume_token(277);
                b2 = Boolean.TRUE;
                break;
            }
            case 327: {
                this.jj_consume_token(327);
                this.jj_consume_token(191);
                if (b) {
                    throw StandardException.newException("42X01", "RETURNS NULL ON NULL INPUT");
                }
                b2 = Boolean.FALSE;
                break;
            }
            default: {
                this.jj_la1[239] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        this.jj_consume_token(195);
        this.jj_consume_token(191);
        this.jj_consume_token(164);
        return b2;
    }
    
    public final boolean routineSecurityClause() throws ParseException, StandardException {
        boolean b = false;
        switch (this.jj_nt.kind) {
            case 297: {
                this.jj_consume_token(297);
                b = false;
                break;
            }
            case 287: {
                this.jj_consume_token(287);
                b = true;
                break;
            }
            default: {
                this.jj_la1[240] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return b;
    }
    
    public final Short parameterStyle(final boolean b) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 398: {
                this.jj_consume_token(398);
                if (b) {
                    throw StandardException.newException("42ZB2");
                }
                return ReuseFactory.getShort((short)0);
            }
            case 388: {
                this.jj_consume_token(388);
                if (!b) {
                    throw StandardException.newException("42ZB1");
                }
                return ReuseFactory.getShort((short)1);
            }
            case 387: {
                this.jj_consume_token(387);
                this.checkVersion(220, "DERBY");
                if (b) {
                    throw StandardException.newException("42ZB2");
                }
                return ReuseFactory.getShort((short)2);
            }
            default: {
                this.jj_la1[241] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Object[] procedureParameterList(final Object[] array) throws ParseException, StandardException {
        final List[] array2 = { new ArrayList(), new ArrayList(), new ArrayList() };
        Object ellipsis = null;
        this.jj_consume_token(449);
        Label_0164: {
            if (this.jj_2_69(1)) {
                this.procedureParameterDefinition(array2);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 453: {
                            this.jj_consume_token(453);
                            this.procedureParameterDefinition(array2);
                            continue;
                        }
                        default: {
                            this.jj_la1[242] = this.jj_gen;
                            switch (this.jj_nt.kind) {
                                case 474: {
                                    ellipsis = this.ellipsis();
                                    break Label_0164;
                                }
                                default: {
                                    this.jj_la1[243] = this.jj_gen;
                                    break Label_0164;
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
        this.jj_consume_token(450);
        array[11] = ellipsis;
        return array2;
    }
    
    public final void procedureParameterDefinition(final List[] array) throws ParseException, StandardException {
        String identifier = "";
        final Integer inoutParameter = this.inoutParameter();
        if (this.dataTypeCheck(2)) {
            identifier = this.identifier(128, true);
        }
        final DataTypeDescriptor dataTypeDDL = this.dataTypeDDL();
        array[0].add(identifier);
        array[1].add(dataTypeDDL.getCatalogType());
        array[2].add(inoutParameter);
    }
    
    public final Integer inoutParameter() throws ParseException {
        int n = 1;
        Label_0159: {
            switch (this.jj_nt.kind) {
                case 160:
                case 295:
                case 412: {
                    switch (this.jj_nt.kind) {
                        case 160: {
                            this.jj_consume_token(160);
                            break Label_0159;
                        }
                        case 412: {
                            this.jj_consume_token(412);
                            n = 4;
                            break Label_0159;
                        }
                        case 295: {
                            this.jj_consume_token(295);
                            n = 2;
                            break Label_0159;
                        }
                        default: {
                            this.jj_la1[244] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[245] = this.jj_gen;
                    break;
                }
            }
        }
        return ReuseFactory.getInteger(n);
    }
    
    public final StatementNode functionDefinition() throws ParseException, StandardException {
        final Object[] array = new Object[12];
        this.jj_consume_token(149);
        final TableName qualifiedName = this.qualifiedName(128);
        array[0] = this.functionParameterList(array);
        this.jj_consume_token(327);
        final TypeDescriptor functionReturnDataType = this.functionReturnDataType();
        while (true) {
            this.routineElement(false, functionReturnDataType.isRowMultiSet(), array);
            switch (this.jj_nt.kind) {
                case 139:
                case 189:
                case 190:
                case 277:
                case 282:
                case 288:
                case 289:
                case 298:
                case 309:
                case 327:
                case 413:
                case 417:
                case 422:
                case 433: {
                    continue;
                }
                default: {
                    this.jj_la1[246] = this.jj_gen;
                    array[9] = functionReturnDataType;
                    this.checkRequiredRoutineClause(SQLParser.JAVA_ROUTINE_CLAUSES, array);
                    return this.getCreateAliasNode(qualifiedName, array[4], array, 'F');
                }
            }
        }
    }
    
    public final Object[] functionParameterList(final Object[] array) throws ParseException, StandardException {
        final List[] array2 = { new ArrayList(), new ArrayList(), new ArrayList() };
        Object ellipsis = null;
        this.jj_consume_token(449);
        Label_0164: {
            if (this.jj_2_70(1)) {
                this.functionParameterDefinition(array2);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 453: {
                            this.jj_consume_token(453);
                            this.functionParameterDefinition(array2);
                            continue;
                        }
                        default: {
                            this.jj_la1[247] = this.jj_gen;
                            switch (this.jj_nt.kind) {
                                case 474: {
                                    ellipsis = this.ellipsis();
                                    break Label_0164;
                                }
                                default: {
                                    this.jj_la1[248] = this.jj_gen;
                                    break Label_0164;
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
        this.jj_consume_token(450);
        array[11] = ellipsis;
        return array2;
    }
    
    public final Boolean ellipsis() throws ParseException, StandardException {
        this.jj_consume_token(474);
        this.checkVersion(220, "...");
        return Boolean.TRUE;
    }
    
    public final void functionParameterDefinition(final List[] array) throws ParseException, StandardException {
        String identifier = "";
        if (this.dataTypeCheck(2)) {
            identifier = this.identifier(128, true);
        }
        final DataTypeDescriptor dataTypeDDL = this.dataTypeDDL();
        array[0].add(identifier);
        array[1].add(dataTypeDDL.getCatalogType());
        array[2].add(ReuseFactory.getInteger(1));
    }
    
    public final TypeDescriptor functionReturnDataType() throws ParseException, StandardException {
        TypeDescriptor typeDescriptor = null;
        if (this.jj_2_71(1)) {
            typeDescriptor = this.catalogType();
        }
        else {
            switch (this.jj_nt.kind) {
                case 239: {
                    typeDescriptor = this.functionTableType();
                    break;
                }
                default: {
                    this.jj_la1[249] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        return typeDescriptor;
    }
    
    public final TypeDescriptor functionTableType() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        final ArrayList list2 = new ArrayList();
        this.jj_consume_token(239);
        this.jj_consume_token(449);
        this.functionTableReturnColumn(list, list2);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.functionTableReturnColumn(list, list2);
                    continue;
                }
                default: {
                    this.jj_la1[250] = this.jj_gen;
                    this.jj_consume_token(450);
                    this.checkVersion(160, "CREATE FUNCTION...RETURNS TABLE");
                    final int size = list.size();
                    final String[] a = new String[size];
                    list.toArray(a);
                    final TypeDescriptor[] a2 = new TypeDescriptor[size];
                    list2.toArray(a2);
                    for (int i = 0; i < size; ++i) {
                        if (a2[i].getJDBCTypeId() == 2009) {
                            throw StandardException.newException("42ZB3");
                        }
                    }
                    return DataTypeDescriptor.getRowMultiSet(a, a2);
                }
            }
        }
    }
    
    public final void functionTableReturnColumn(final ArrayList list, final ArrayList list2) throws ParseException, StandardException {
        final String identifier = this.identifier(128, true);
        final DataTypeDescriptor dataTypeDDL = this.dataTypeDDL();
        list.add(identifier);
        list2.add(dataTypeDDL.getCatalogType());
    }
    
    public final StatementNode udtDefinition() throws ParseException, StandardException {
        this.jj_consume_token(352);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(139);
        this.jj_consume_token(314);
        final String string = this.string();
        this.jj_consume_token(298);
        this.jj_consume_token(398);
        this.checkVersion(180, "CREATE TYPE");
        return this.getCreateAliasNode(qualifiedName, string, null, 'A');
    }
    
    public final StatementNode aggregateDefinition() throws ParseException, StandardException {
        DataTypeDescriptor dataTypeDDL = null;
        final Object[] array = new Object[2];
        this.jj_consume_token(387);
        this.jj_consume_token(379);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(144);
        final DataTypeDescriptor dataTypeDDL2 = this.dataTypeDDL();
        switch (this.jj_nt.kind) {
            case 327: {
                this.jj_consume_token(327);
                dataTypeDDL = this.dataTypeDDL();
                break;
            }
            default: {
                this.jj_la1[251] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(139);
        this.jj_consume_token(314);
        final String string = this.string();
        this.checkVersion(220, "CREATE DERBY AGGREGATE");
        if (dataTypeDDL == null) {
            dataTypeDDL = dataTypeDDL2;
        }
        array[0] = dataTypeDDL2.getCatalogType();
        array[1] = dataTypeDDL.getCatalogType();
        return this.getCreateAliasNode(qualifiedName, string, array, 'G');
    }
    
    public final StatementNode viewDefinition(final Token token) throws ParseException, StandardException {
        Object viewColumnList = null;
        Object orderByClause = null;
        final ValueNode[] array = new ValueNode[2];
        this.jj_consume_token(263);
        final TableName qualifiedName = this.qualifiedName(128);
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                viewColumnList = this.viewColumnList();
                this.jj_consume_token(450);
                break;
            }
            default: {
                this.jj_la1[252] = this.jj_gen;
                break;
            }
        }
        this.jj_consume_token(72);
        final ResultSetNode queryExpression = this.queryExpression(null, 0);
        switch (this.jj_nt.kind) {
            case 200: {
                orderByClause = this.orderByClause(queryExpression);
                break;
            }
            default: {
                this.jj_la1[253] = this.jj_gen;
                break;
            }
        }
        final boolean offsetFetchFirstClause = this.offsetFetchFirstClause(array);
        final int n = 0;
        final Token token2 = this.getToken(0);
        final HasNodeVisitor hasNodeVisitor = new HasNodeVisitor(ParameterNode.class);
        queryExpression.accept(hasNodeVisitor);
        if (hasNodeVisitor.hasNode()) {
            throw StandardException.newException("42X98");
        }
        return (StatementNode)this.nodeFactory.getNode(130, qualifiedName, viewColumnList, queryExpression, ReuseFactory.getInteger(n), StringUtil.slice(this.statementSQLText, token.beginOffset, token2.endOffset, false), orderByClause, array[0], array[1], offsetFetchFirstClause, this.getContextManager());
    }
    
    public final ResultColumnList viewColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.columnNameList(list);
        return list;
    }
    
    public final StatementNode triggerDefinition() throws ParseException, StandardException {
        Boolean b = Boolean.FALSE;
        final Token[] array = { null };
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        Object triggerReferencingClause = null;
        this.jj_consume_token(438);
        final TableName qualifiedName = this.qualifiedName(128);
        final Boolean beforeOrAfter = this.beforeOrAfter();
        final int triggerEvent = this.triggerEvent(list);
        this.jj_consume_token(195);
        final TableName qualifiedName2 = this.qualifiedName(128);
        switch (this.jj_nt.kind) {
            case 419: {
                triggerReferencingClause = this.triggerReferencingClause();
                break;
            }
            default: {
                this.jj_la1[254] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 144: {
                this.jj_consume_token(144);
                this.jj_consume_token(392);
                b = this.rowOrStatement();
                break;
            }
            default: {
                this.jj_la1[255] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 404: {
                this.jj_consume_token(404);
                this.jj_consume_token(386);
                break;
            }
            default: {
                this.jj_la1[256] = this.jj_gen;
                break;
            }
        }
        final StatementNode proceduralStatement = this.proceduralStatement(array);
        final int endOffset = this.getToken(0).endOffset;
        final int beginOffset = array[0].beginOffset;
        if (beforeOrAfter && proceduralStatement instanceof DMLModStatementNode) {
            throw StandardException.newException("42Z9D", proceduralStatement.statementToString(), "BEFORE");
        }
        final HasNodeVisitor hasNodeVisitor = new HasNodeVisitor(ParameterNode.class);
        proceduralStatement.accept(hasNodeVisitor);
        if (hasNodeVisitor.hasNode()) {
            throw StandardException.newException("42Y27");
        }
        return (StatementNode)this.nodeFactory.getNode(143, qualifiedName, qualifiedName2, ReuseFactory.getInteger(triggerEvent), list, beforeOrAfter, b, Boolean.TRUE, triggerReferencingClause, null, null, ReuseFactory.getInteger(0), proceduralStatement, StringUtil.slice(this.statementSQLText, beginOffset, endOffset, false), ReuseFactory.getInteger(beginOffset), this.getContextManager());
    }
    
    public final StatementNode synonymDefinition() throws ParseException, StandardException {
        this.jj_consume_token(345);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(144);
        final TableName qualifiedName2 = this.qualifiedName(128);
        this.checkVersion(130, "CREATE SYNONYM");
        return this.getCreateAliasNode(qualifiedName, qualifiedName2, null, 'S');
    }
    
    public final Boolean beforeOrAfter() throws ParseException {
        switch (this.jj_nt.kind) {
            case 189: {
                this.jj_consume_token(189);
                this.jj_consume_token(84);
                this.jj_consume_token(380);
                return Boolean.TRUE;
            }
            case 378: {
                this.jj_consume_token(378);
                return Boolean.FALSE;
            }
            default: {
                this.jj_la1[257] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int triggerEvent(final ResultColumnList list) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 166: {
                this.jj_consume_token(166);
                return 4;
            }
            case 122: {
                this.jj_consume_token(122);
                return 2;
            }
            case 254: {
                this.jj_consume_token(254);
                switch (this.jj_nt.kind) {
                    case 194: {
                        this.jj_consume_token(194);
                        this.columnNameList(list);
                        break;
                    }
                    default: {
                        this.jj_la1[258] = this.jj_gen;
                        break;
                    }
                }
                return 1;
            }
            default: {
                this.jj_la1[259] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final Boolean rowOrStatement() throws ParseException {
        switch (this.jj_nt.kind) {
            case 329: {
                this.token = this.jj_consume_token(329);
                return Boolean.TRUE;
            }
            case 344: {
                this.token = this.jj_consume_token(344);
                return Boolean.FALSE;
            }
            default: {
                this.jj_la1[260] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final List triggerReferencingClause() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        this.jj_consume_token(419);
        this.triggerReferencingExpression(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 405:
                case 406:
                case 410:
                case 411: {
                    this.triggerReferencingExpression(list);
                    continue;
                }
                default: {
                    this.jj_la1[261] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void triggerReferencingExpression(final List list) throws ParseException, StandardException {
        boolean b = true;
        boolean b2 = true;
        Label_0390: {
            switch (this.jj_nt.kind) {
                case 405: {
                    this.jj_consume_token(405);
                    switch (this.jj_nt.kind) {
                        case 239:
                        case 329: {
                            switch (this.jj_nt.kind) {
                                case 329: {
                                    this.jj_consume_token(329);
                                    break Label_0390;
                                }
                                case 239: {
                                    this.jj_consume_token(239);
                                    b2 = false;
                                    break Label_0390;
                                }
                                default: {
                                    this.jj_la1[262] = this.jj_gen;
                                    this.jj_consume_token(-1);
                                    throw new ParseException();
                                }
                            }
                            break;
                        }
                        default: {
                            this.jj_la1[263] = this.jj_gen;
                            break Label_0390;
                        }
                    }
                    break;
                }
                case 410: {
                    this.jj_consume_token(410);
                    b = false;
                    switch (this.jj_nt.kind) {
                        case 239:
                        case 329: {
                            switch (this.jj_nt.kind) {
                                case 329: {
                                    this.jj_consume_token(329);
                                    break Label_0390;
                                }
                                case 239: {
                                    this.jj_consume_token(239);
                                    b2 = false;
                                    break Label_0390;
                                }
                                default: {
                                    this.jj_la1[264] = this.jj_gen;
                                    this.jj_consume_token(-1);
                                    throw new ParseException();
                                }
                            }
                            break;
                        }
                        default: {
                            this.jj_la1[265] = this.jj_gen;
                            break Label_0390;
                        }
                    }
                    break;
                }
                case 406: {
                    this.jj_consume_token(406);
                    b2 = false;
                    break;
                }
                case 411: {
                    this.jj_consume_token(411);
                    b = false;
                    b2 = false;
                    break;
                }
                default: {
                    this.jj_la1[266] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        this.jj_consume_token(72);
        list.add(new TriggerReferencingStruct(b2, b, this.identifier(128, true)));
    }
    
    public final ValueNode defaultClause(final long[] array, final String s) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 119:
            case 267: {
                switch (this.jj_nt.kind) {
                    case 267: {
                        this.jj_consume_token(267);
                        break;
                    }
                    default: {
                        this.jj_la1[267] = this.jj_gen;
                        break;
                    }
                }
                return this.defaultOption(this.jj_consume_token(119), array, s);
            }
            case 291: {
                return this.generatedColumnOption(array);
            }
            default: {
                this.jj_la1[268] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode defaultNullOnlyClause() throws ParseException, StandardException {
        this.jj_consume_token(119);
        this.jj_consume_token(191);
        return (ValueNode)this.nodeFactory.getNode(13, this.getContextManager());
    }
    
    public final ValueNode generatedColumnOption(final long[] array) throws ParseException, StandardException {
        array[0] = 1L;
        array[2] = (array[1] = 1L);
        array[3] = 0L;
        this.jj_consume_token(291);
        switch (this.jj_nt.kind) {
            case 274: {
                return this.generatedAlways(array);
            }
            case 83: {
                return this.generatedByDefault(array);
            }
            default: {
                this.jj_la1[269] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode generatedAlways(final long[] array) throws ParseException, StandardException {
        final ValueNode valueNode = null;
        this.jj_consume_token(274);
        if (this.getToken(1).kind == 72 && this.getToken(2).kind == 158) {
            this.asIdentity(array);
            return valueNode;
        }
        if (this.getToken(1).kind == 72 && this.getToken(2).kind == 449) {
            return this.generationClause();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode generatedByDefault(final long[] array) throws ParseException, StandardException {
        this.jj_consume_token(83);
        this.jj_consume_token(119);
        this.asIdentity(array);
        this.checkVersion(130, "GENERATED BY DEFAULT");
        return (ValueNode)this.nodeFactory.getNode(100, this.getContextManager());
    }
    
    public final void asIdentity(final long[] array) throws ParseException, StandardException {
        this.jj_consume_token(72);
        this.jj_consume_token(158);
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                this.autoIncrementBeginEnd(array);
                this.jj_consume_token(450);
                break;
            }
            default: {
                this.jj_la1[270] = this.jj_gen;
                break;
            }
        }
    }
    
    public final ValueNode generationClause() throws ParseException, StandardException {
        this.jj_consume_token(72);
        final Token jj_consume_token = this.jj_consume_token(449);
        final ValueNode valueExpression = this.valueExpression();
        final Token jj_consume_token2 = this.jj_consume_token(450);
        this.checkVersion(170, "GENERATED COLUMN");
        return (ValueNode)this.nodeFactory.getNode(222, valueExpression, StringUtil.slice(this.statementSQLText, jj_consume_token.endOffset + 1, jj_consume_token2.beginOffset - 1, true), this.getContextManager());
    }
    
    public final void autoIncrementBeginEnd(final long[] array) throws ParseException, StandardException {
        long exactNumber = 1L;
        switch (this.jj_nt.kind) {
            case 293: {
                this.jj_consume_token(293);
                this.jj_consume_token(83);
                array[1] = this.exactNumber();
                array[3] = 0L;
            }
            case 343: {
                this.jj_consume_token(343);
                this.jj_consume_token(267);
                final long exactNumber2 = this.exactNumber();
                switch (this.jj_nt.kind) {
                    case 453: {
                        this.jj_consume_token(453);
                        this.jj_consume_token(293);
                        this.jj_consume_token(83);
                        exactNumber = this.exactNumber();
                        break;
                    }
                    default: {
                        this.jj_la1[271] = this.jj_gen;
                        break;
                    }
                }
                array[0] = exactNumber2;
                array[1] = exactNumber;
                array[3] = 0L;
            }
            default: {
                this.jj_la1[272] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode defaultOption(final Token token, final long[] array, final String s) throws ParseException, StandardException {
        if (this.getToken(1).kind == 191 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458) {
            this.jj_consume_token(191);
            return (ValueNode)this.nodeFactory.getNode(13, this.getContextManager());
        }
        if (this.jj_2_72(1)) {
            final ValueNode db2DefaultOption = this.DB2DefaultOption(s);
            final Token token2 = this.getToken(0);
            db2DefaultOption.setBeginOffset(token.beginOffset);
            db2DefaultOption.setEndOffset(token2.endOffset);
            return (ValueNode)this.nodeFactory.getNode(100, db2DefaultOption, StringUtil.slice(this.statementSQLText, token.beginOffset + 7, token2.endOffset, true), this.getContextManager());
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final ValueNode DB2DefaultOption(final String s) throws ParseException, StandardException {
        if (this.getToken(2).kind == 222 || this.getToken(2).kind == 432) {
            this.jj_consume_token(108);
            switch (this.jj_nt.kind) {
                case 222: {
                    this.jj_consume_token(222);
                    break;
                }
                case 432: {
                    this.jj_consume_token(432);
                    break;
                }
                default: {
                    this.jj_la1[273] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            return (ValueNode)this.nodeFactory.getNode(6, this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 112:
            case 226:
            case 256: {
                return this.userNode();
            }
            case 359: {
                return this.currentRoleNode();
            }
            default: {
                this.jj_la1[274] = this.jj_gen;
                if (this.getToken(1).kind == 285 || this.getToken(1).kind == 347 || this.getToken(1).kind == 348) {
                    return this.miscBuiltins();
                }
                if (this.getToken(2).kind == 449 || (this.getToken(4).kind == 449 && this.getToken(2).kind != 453)) {
                    this.miscBuiltins();
                    throw StandardException.newException("42894", s);
                }
                if (this.jj_2_73(1)) {
                    return this.datetimeValueFunction();
                }
                switch (this.jj_nt.kind) {
                    case 140:
                    case 249:
                    case 447:
                    case 452:
                    case 454:
                    case 482:
                    case 485:
                    case 486:
                    case 487: {
                        return this.literal();
                    }
                    default: {
                        this.jj_la1[275] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final ValueNode literal() throws ParseException, StandardException {
        String sign = "";
        switch (this.jj_nt.kind) {
            case 452:
            case 454:
            case 482:
            case 487: {
                switch (this.jj_nt.kind) {
                    case 452:
                    case 454: {
                        sign = this.sign();
                        break;
                    }
                    default: {
                        this.jj_la1[276] = this.jj_gen;
                        break;
                    }
                }
                return this.numericLiteral(sign);
            }
            case 485: {
                return this.stringLiteral();
            }
            case 486: {
                return this.hexLiteral();
            }
            case 447: {
                return this.dateTimeLiteral();
            }
            case 140:
            case 249: {
                return (ValueNode)this.nodeFactory.getNode(38, StringUtil.SQLEqualsIgnoreCase(this.booleanLiteral().image, "true") ? Boolean.TRUE : Boolean.FALSE, this.getContextManager());
            }
            default: {
                this.jj_la1[277] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final NumericConstantNode intLiteral() throws ParseException, StandardException {
        String sign = null;
        switch (this.jj_nt.kind) {
            case 452:
            case 454: {
                sign = this.sign();
                break;
            }
            default: {
                this.jj_la1[278] = this.jj_gen;
                break;
            }
        }
        String str = this.jj_consume_token(482).image;
        if (sign != null && sign.equals("-")) {
            str = sign.concat(str);
        }
        NumericConstantNode numericNode;
        try {
            numericNode = this.getNumericNode(str, true);
        }
        catch (NumberFormatException ex) {
            throw StandardException.newException("42X20");
        }
        return numericNode;
    }
    
    public final ValueNode numericLiteral(final String str) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 482: {
                String str2 = this.jj_consume_token(482).image;
                if (str.equals("-")) {
                    str2 = str.concat(str2);
                }
                return this.getNumericNode(str2, false);
            }
            case 487: {
                final Token jj_consume_token = this.jj_consume_token(487);
                final StringBuffer sb = new StringBuffer(str);
                sb.append(jj_consume_token.image);
                String s = sb.toString();
                int n = s.indexOf(69);
                if (n == -1) {
                    n = s.indexOf(101);
                }
                if (s.length() > 30) {
                    throw StandardException.newException("42820", s, "DOUBLE");
                }
                if (s.substring(0, n).indexOf(46) == -1) {
                    sb.insert(n, '.');
                    s = sb.toString();
                    ++n;
                }
                Double value;
                try {
                    value = Double.valueOf(s);
                }
                catch (NumberFormatException ex) {
                    throw StandardException.newException("22018", "DOUBLE");
                }
                final double doubleValue = value;
                if (doubleValue == 0.0 && Double.parseDouble(s.substring(0, n - 1)) != 0.0) {
                    throw StandardException.newException("22003", "DOUBLE");
                }
                if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {
                    throw StandardException.newException("22003", "DOUBLE");
                }
                return (ValueNode)this.nodeFactory.getNode(68, value, this.getContextManager());
            }
            default: {
                this.jj_la1[279] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode dateTimeLiteral() throws ParseException, StandardException {
        this.jj_consume_token(447);
        final ValueNode escapedDateTimeLiteral = this.escapedDateTimeLiteral();
        this.jj_consume_token(448);
        return escapedDateTimeLiteral;
    }
    
    public final ValueNode escapedDateTimeLiteral() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 114: {
                this.jj_consume_token(114);
                return this.bareDateLiteral();
            }
            case 238: {
                this.jj_consume_token(238);
                return this.bareTimeLiteral();
            }
            case 250: {
                this.jj_consume_token(250);
                return this.bareTimestampLiteral();
            }
            default: {
                this.jj_la1[280] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode bareDateLiteral() throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(76, this.getLanguageConnectionContext().getDataValueFactory().getDateValue(this.string(), true), this.getContextManager());
    }
    
    public final ValueNode bareTimeLiteral() throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(76, this.getLanguageConnectionContext().getDataValueFactory().getTimeValue(this.string(), true), this.getContextManager());
    }
    
    public final ValueNode bareTimestampLiteral() throws ParseException, StandardException {
        return (ValueNode)this.nodeFactory.getNode(76, this.getLanguageConnectionContext().getDataValueFactory().getTimestampValue(this.string(), true), this.getContextManager());
    }
    
    public final String string() throws ParseException, StandardException {
        final Token jj_consume_token = this.jj_consume_token(485);
        verifyImageLength(jj_consume_token.image);
        return StringUtil.compressQuotes(jj_consume_token.image.substring(1, jj_consume_token.image.length() - 1), "''");
    }
    
    public final CharConstantNode stringLiteral() throws ParseException, StandardException {
        final Token jj_consume_token = this.jj_consume_token(485);
        if (jj_consume_token.image.length() - 2 > 32672) {
            throw StandardException.newException("54002", StringUtil.formatForPrint(jj_consume_token.image));
        }
        return (CharConstantNode)this.nodeFactory.getNode(61, StringUtil.compressQuotes(jj_consume_token.image.substring(1, jj_consume_token.image.length() - 1), "''"), this.getContextManager());
    }
    
    public final ValueNode hexLiteral() throws ParseException, StandardException {
        final String image = this.jj_consume_token(486).image;
        if (image.length() - 3 > 16336) {
            throw StandardException.newException("54002", StringUtil.formatForPrint(image));
        }
        if ((image.length() - 3) % 2 == 1) {
            throw StandardException.newException("42606", StringUtil.formatForPrint(image));
        }
        return (ValueNode)this.nodeFactory.getNode(59, image.substring(2, image.length() - 1), ReuseFactory.getInteger((image.length() - 3) / 2), this.getContextManager());
    }
    
    public final TableName constraintNameDefinition() throws ParseException, StandardException {
        this.jj_consume_token(100);
        return this.qualifiedName(128);
    }
    
    public final ConstraintDefinitionNode checkConstraintDefinition(final TableName tableName, final String s) throws ParseException, StandardException {
        QueryTreeNodeVector queryTreeNodeVector = null;
        this.jj_consume_token(91);
        final Token jj_consume_token = this.jj_consume_token(449);
        final ValueNode valueExpression = this.valueExpression();
        final Token jj_consume_token2 = this.jj_consume_token(450);
        if (s != null) {
            queryTreeNodeVector = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
            queryTreeNodeVector.addElement((QueryTreeNode)this.nodeFactory.getNode(80, s, null, this.getContextManager()));
        }
        valueExpression.setBeginOffset(jj_consume_token.beginOffset);
        valueExpression.setEndOffset(jj_consume_token2.endOffset);
        return (ConstraintDefinitionNode)this.nodeFactory.getNode(131, tableName, ReuseFactory.getInteger(4), queryTreeNodeVector, null, valueExpression, StringUtil.slice(this.statementSQLText, jj_consume_token.beginOffset, jj_consume_token2.endOffset, true), this.getContextManager());
    }
    
    public final StatementNode spsRenameStatement() throws ParseException, StandardException {
        this.jj_consume_token(420);
        StatementNode statementNode = null;
        switch (this.jj_nt.kind) {
            case 239: {
                statementNode = this.renameTableStatement();
                break;
            }
            case 396: {
                statementNode = this.renameIndexStatement();
                break;
            }
            case 96: {
                statementNode = this.renameColumnStatement();
                break;
            }
            default: {
                this.jj_la1[281] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return statementNode;
    }
    
    public final StatementNode renameTableStatement() throws ParseException, StandardException {
        this.jj_consume_token(239);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(243);
        return (StatementNode)this.nodeFactory.getNode(191, qualifiedName, null, this.identifier(128, true), Boolean.FALSE, ReuseFactory.getInteger(1), this.getContextManager());
    }
    
    public final StatementNode renameIndexStatement() throws ParseException, StandardException {
        this.jj_consume_token(396);
        final String identifier = this.identifier(128, true);
        this.jj_consume_token(243);
        return (StatementNode)this.nodeFactory.getNode(191, null, identifier, this.identifier(128, true), Boolean.FALSE, ReuseFactory.getInteger(3), this.getContextManager());
    }
    
    public final StatementNode renameColumnStatement() throws ParseException, StandardException {
        this.jj_consume_token(96);
        final ColumnReference columnReference = this.columnReference();
        this.jj_consume_token(243);
        final String identifier = this.identifier(128, true);
        if (columnReference.getTableNameNode() == null) {
            throw StandardException.newException("42Y55", "RENAME COLUMN", columnReference.getColumnName());
        }
        return (StatementNode)this.nodeFactory.getNode(191, columnReference.getTableNameNode(), columnReference.getColumnName(), identifier, Boolean.FALSE, ReuseFactory.getInteger(2), this.getContextManager());
    }
    
    public final StatementNode lockStatement() throws ParseException, StandardException {
        this.jj_consume_token(401);
        this.jj_consume_token(239);
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(160);
        final Boolean lockMode = this.lockMode();
        this.jj_consume_token(404);
        return (StatementNode)this.nodeFactory.getNode(112, qualifiedName, lockMode, this.getContextManager());
    }
    
    public final Boolean lockMode() throws ParseException {
        switch (this.jj_nt.kind) {
            case 394: {
                this.jj_consume_token(394);
                return Boolean.TRUE;
            }
            case 431: {
                this.jj_consume_token(431);
                return Boolean.FALSE;
            }
            default: {
                this.jj_la1[282] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode execStatement() throws ParseException, StandardException {
        this.jj_consume_token(137);
        this.jj_consume_token(344);
        return (StatementNode)this.nodeFactory.getNode(118, this.qualifiedName(128), this.getContextManager());
    }
    
    public final TransactionStatementNode setIsolationStatement() throws ParseException, StandardException {
        this.setIsolationHeader();
        Label_0128: {
            switch (this.jj_nt.kind) {
                case 243:
                case 462: {
                    switch (this.jj_nt.kind) {
                        case 462: {
                            this.jj_consume_token(462);
                            break Label_0128;
                        }
                        case 243: {
                            this.jj_consume_token(243);
                            break Label_0128;
                        }
                        default: {
                            this.jj_la1[283] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[284] = this.jj_gen;
                    break;
                }
            }
        }
        return this.transactionMode();
    }
    
    public final void setIsolationHeader() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 172: {
                this.jj_consume_token(172);
                break;
            }
            default: {
                this.jj_la1[285] = this.jj_gen;
                if (this.getToken(1).kind == 108 && this.getToken(2).kind == 172) {
                    this.jj_consume_token(108);
                    this.jj_consume_token(172);
                    break;
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final TransactionStatementNode transactionMode() throws ParseException, StandardException {
        return (TransactionStatementNode)this.nodeFactory.getNode(21, ReuseFactory.getInteger(this.isolationLevelDB2OrReset()), this.getContextManager());
    }
    
    public final int isolationLevelDB2OrReset() throws ParseException {
        switch (this.jj_nt.kind) {
            case 421: {
                this.jj_consume_token(421);
                return 0;
            }
            default: {
                this.jj_la1[286] = this.jj_gen;
                if (this.jj_2_74(1)) {
                    return this.isolationLevelDB2();
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int isolationLevelDB2() throws ParseException {
        switch (this.jj_nt.kind) {
            case 384:
            case 425:
            case 426:
            case 441: {
                return this.isolationLevelDB2Abbrev();
            }
            case 325:
            case 333: {
                switch (this.jj_nt.kind) {
                    case 325: {
                        this.jj_consume_token(325);
                        this.jj_consume_token(213);
                        break;
                    }
                    case 333: {
                        this.jj_consume_token(333);
                        break;
                    }
                    default: {
                        this.jj_la1[287] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                return 4;
            }
            case 113: {
                this.jj_consume_token(113);
                this.jj_consume_token(435);
                return 2;
            }
            case 390: {
                this.jj_consume_token(390);
                this.jj_consume_token(213);
                return 1;
            }
            default: {
                this.jj_la1[288] = this.jj_gen;
                if (this.getToken(1).kind == 213 && this.getToken(2).kind == 280) {
                    this.jj_consume_token(213);
                    this.jj_consume_token(280);
                    return 2;
                }
                if (this.getToken(1).kind == 213 && this.getToken(2).kind == 353) {
                    this.jj_consume_token(213);
                    this.jj_consume_token(353);
                    return 1;
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int isolationLevelDB2Abbrev() throws ParseException {
        switch (this.jj_nt.kind) {
            case 425: {
                this.jj_consume_token(425);
                return 4;
            }
            case 426: {
                this.jj_consume_token(426);
                return 3;
            }
            case 384: {
                this.jj_consume_token(384);
                return 2;
            }
            case 441: {
                this.jj_consume_token(441);
                return 1;
            }
            default: {
                this.jj_la1[289] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int isolationLevel() throws ParseException {
        this.jj_consume_token(172);
        this.jj_consume_token(301);
        return this.levelOfIsolation();
    }
    
    public final int levelOfIsolation() throws ParseException {
        switch (this.jj_nt.kind) {
            case 213: {
                this.jj_consume_token(213);
                return this.levelOfIsolationRead();
            }
            case 325: {
                this.jj_consume_token(325);
                this.jj_consume_token(213);
                return 3;
            }
            case 333: {
                this.jj_consume_token(333);
                return 4;
            }
            default: {
                this.jj_la1[290] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int levelOfIsolationRead() throws ParseException {
        switch (this.jj_nt.kind) {
            case 353: {
                this.jj_consume_token(353);
                return 1;
            }
            case 280: {
                this.jj_consume_token(280);
                return 2;
            }
            default: {
                this.jj_la1[291] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode simpleValueSpecification() throws ParseException, StandardException {
        return this.literal();
    }
    
    public final StatementNode setRoleStatement() throws ParseException, StandardException {
        this.jj_consume_token(369);
        final StatementNode setRoleSpecification = this.setRoleSpecification();
        if (this.parameterList != null && this.parameterList.size() > 0) {
            this.setUpAndLinkParameters();
            this.parameterList.get(0).setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(12), false, 128));
        }
        return setRoleSpecification;
    }
    
    public final StatementNode setRoleSpecification() throws ParseException, StandardException {
        final Object o = null;
        this.checkVersion(170, "ROLES");
        this.checkSqlStandardAccess("SET ROLE");
        switch (this.jj_nt.kind) {
            case 367: {
                this.jj_consume_token(367);
                return (StatementNode)this.nodeFactory.getNode(212, o, null, this.getContextManager());
            }
            default: {
                this.jj_la1[292] = this.jj_gen;
                if (this.jj_2_75(1)) {
                    return (StatementNode)this.nodeFactory.getNode(212, this.identifier(128, true), null, this.getContextManager());
                }
                switch (this.jj_nt.kind) {
                    case 467: {
                        this.dynamicParameterSpecification();
                        return (StatementNode)this.nodeFactory.getNode(212, null, ReuseFactory.getInteger(1), this.getContextManager());
                    }
                    case 485: {
                        return (StatementNode)this.nodeFactory.getNode(212, IdUtil.parseRoleId(this.string()), null, this.getContextManager());
                    }
                    default: {
                        this.jj_la1[293] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final StatementNode setSchemaStatement() throws ParseException, StandardException {
        this.setSchemaHeader();
        switch (this.jj_nt.kind) {
            case 462: {
                this.jj_consume_token(462);
                break;
            }
            default: {
                this.jj_la1[294] = this.jj_gen;
                break;
            }
        }
        final StatementNode setSchemaValues = this.setSchemaValues();
        if (this.parameterList != null && this.parameterList.size() > 0) {
            this.setUpAndLinkParameters();
            this.parameterList.get(0).setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(12), false, 128));
        }
        return setSchemaValues;
    }
    
    public final void setSchemaHeader() throws ParseException, StandardException {
        Label_0190: {
            switch (this.jj_nt.kind) {
                case 222: {
                    this.jj_consume_token(222);
                    break;
                }
                default: {
                    this.jj_la1[296] = this.jj_gen;
                    if (this.getToken(1).kind != 108 || (this.getToken(2).kind != 222 && this.getToken(2).kind != 432)) {
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                    this.jj_consume_token(108);
                    switch (this.jj_nt.kind) {
                        case 222: {
                            this.jj_consume_token(222);
                            break Label_0190;
                        }
                        case 432: {
                            this.jj_consume_token(432);
                            break Label_0190;
                        }
                        default: {
                            this.jj_la1[295] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
            }
        }
    }
    
    public final StatementNode setSchemaValues() throws ParseException, StandardException {
        if (this.jj_2_76(1)) {
            return (StatementNode)this.nodeFactory.getNode(81, this.identifier(128, true), null, this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 256: {
                this.jj_consume_token(256);
                return (StatementNode)this.nodeFactory.getNode(81, null, ReuseFactory.getInteger(1), this.getContextManager());
            }
            case 467: {
                this.dynamicParameterSpecification();
                return (StatementNode)this.nodeFactory.getNode(81, null, ReuseFactory.getInteger(2), this.getContextManager());
            }
            case 485: {
                final String string = this.string();
                IdUtil.checkIdentifierLengthLimit(string, 128);
                return (StatementNode)this.nodeFactory.getNode(81, string, null, this.getContextManager());
            }
            default: {
                this.jj_la1[297] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode setMessageLocaleStatement() throws ParseException, StandardException {
        this.jj_consume_token(402);
        this.getContextManager().setMessageLocale(this.string());
        return (StatementNode)this.nodeFactory.getNode(19, this.getContextManager());
    }
    
    public final ValueNode valueSpecification() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 140:
            case 249:
            case 447:
            case 452:
            case 454:
            case 482:
            case 485:
            case 486:
            case 487: {
                return this.literal();
            }
            case 112:
            case 226:
            case 256:
            case 359:
            case 467: {
                return this.generalValueSpecification();
            }
            case 192: {
                this.jj_consume_token(192);
                this.jj_consume_token(449);
                final ValueNode additiveExpression = this.additiveExpression(null, 0);
                this.jj_consume_token(453);
                final ValueNode additiveExpression2 = this.additiveExpression(null, 0);
                this.jj_consume_token(450);
                final ContextManager contextManager = this.getContextManager();
                final ValueNodeList list = (ValueNodeList)this.nodeFactory.getNode(15, contextManager);
                list.addElement((QueryTreeNode)this.nodeFactory.getNode(13, contextManager));
                list.addElement(additiveExpression);
                return (ValueNode)this.nodeFactory.getNode(54, this.nodeFactory.getNode(41, additiveExpression, additiveExpression2, Boolean.FALSE, contextManager), list, Boolean.TRUE, contextManager);
            }
            case 86: {
                this.jj_consume_token(86);
                return this.whenThenExpression();
            }
            default: {
                this.jj_la1[298] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode caseExpression() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 131: {
                this.jj_consume_token(131);
                final ValueNode valueNode = (ValueNode)this.nodeFactory.getNode(60, this.nodeFactory.getNode(13, this.getContextManager()), DataTypeDescriptor.getBuiltInDataTypeDescriptor(1, 1), this.getContextManager());
                ((CastNode)valueNode).setForExternallyGeneratedCASTnode();
                return valueNode;
            }
            case 130: {
                this.jj_consume_token(130);
                final ValueNode thenElseExpression = this.thenElseExpression();
                this.jj_consume_token(131);
                return thenElseExpression;
            }
            case 355: {
                return this.whenThenExpression();
            }
            default: {
                this.jj_la1[299] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ValueNode whenThenExpression() throws ParseException, StandardException {
        this.jj_consume_token(355);
        final ValueNode valueExpression = this.valueExpression();
        this.jj_consume_token(346);
        final ValueNode thenElseExpression = this.thenElseExpression();
        final ValueNode caseExpression = this.caseExpression();
        final ContextManager contextManager = this.getContextManager();
        final ValueNodeList list = (ValueNodeList)this.nodeFactory.getNode(15, contextManager);
        list.addElement(thenElseExpression);
        list.addElement(caseExpression);
        return (ValueNode)this.nodeFactory.getNode(54, valueExpression, list, Boolean.FALSE, contextManager);
    }
    
    public final ValueNode thenElseExpression() throws ParseException, StandardException {
        if (this.getToken(1).kind == 191) {
            this.jj_consume_token(191);
            final ValueNode valueNode = (ValueNode)this.nodeFactory.getNode(60, this.nodeFactory.getNode(13, this.getContextManager()), DataTypeDescriptor.getBuiltInDataTypeDescriptor(1, 1), this.getContextManager());
            ((CastNode)valueNode).setForExternallyGeneratedCASTnode();
            return valueNode;
        }
        if (this.jj_2_77(1)) {
            return this.additiveExpression(null, 0);
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final TableElementNode tableConstraintDefinition() throws ParseException, StandardException {
        Properties propertyList = null;
        TableName constraintNameDefinition = null;
        switch (this.jj_nt.kind) {
            case 100: {
                constraintNameDefinition = this.constraintNameDefinition();
                break;
            }
            default: {
                this.jj_la1[300] = this.jj_gen;
                break;
            }
        }
        final ConstraintDefinitionNode tableConstraint = this.tableConstraint(constraintNameDefinition);
        switch (this.jj_nt.kind) {
            case 59: {
                propertyList = this.propertyList(false);
                this.jj_consume_token(64);
                break;
            }
            default: {
                this.jj_la1[301] = this.jj_gen;
                break;
            }
        }
        if (propertyList != null) {
            tableConstraint.setProperties(propertyList);
        }
        return tableConstraint;
    }
    
    public final ConstraintDefinitionNode tableConstraint(final TableName tableName) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 208:
            case 252: {
                return this.uniqueConstraintDefinition(tableName);
            }
            case 145: {
                return this.referentialConstraintDefinition(tableName);
            }
            case 91: {
                return this.checkConstraintDefinition(tableName, null);
            }
            default: {
                this.jj_la1[302] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ConstraintDefinitionNode uniqueConstraintDefinition(final TableName tableName) throws ParseException, StandardException {
        final int uniqueSpecification = this.uniqueSpecification(null);
        this.jj_consume_token(449);
        final ResultColumnList uniqueColumnList = this.uniqueColumnList();
        this.jj_consume_token(450);
        return (ConstraintDefinitionNode)this.nodeFactory.getNode(131, tableName, ReuseFactory.getInteger(uniqueSpecification), uniqueColumnList, null, null, null, this.getContextManager());
    }
    
    public final int uniqueSpecification(final String s) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 252: {
                this.jj_consume_token(252);
                return 3;
            }
            case 208: {
                this.jj_consume_token(208);
                this.jj_consume_token(174);
                return 2;
            }
            default: {
                this.jj_la1[303] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultColumnList uniqueColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.columnNameList(list);
        return list;
    }
    
    public final ConstraintDefinitionNode referentialConstraintDefinition(final TableName tableName) throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        final ResultColumnList list2 = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        final int[] array = { 2, 2 };
        this.jj_consume_token(145);
        this.jj_consume_token(174);
        this.jj_consume_token(449);
        this.columnNameList(list);
        this.jj_consume_token(450);
        return (ConstraintDefinitionNode)this.nodeFactory.getNode(119, tableName, this.referencesSpecification(list2, array), list, list2, array, this.getContextManager());
    }
    
    public final TableName referencesSpecification(final ResultColumnList list, final int[] array) throws ParseException, StandardException {
        this.jj_consume_token(215);
        final TableName referencedTableAndColumns = this.referencedTableAndColumns(list);
        switch (this.jj_nt.kind) {
            case 195: {
                this.jj_consume_token(195);
                this.referentialTriggeredAction(array);
                break;
            }
            default: {
                this.jj_la1[304] = this.jj_gen;
                break;
            }
        }
        return referencedTableAndColumns;
    }
    
    public final TableName referencedTableAndColumns(final ResultColumnList list) throws ParseException, StandardException {
        final TableName qualifiedName = this.qualifiedName(128);
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                this.columnNameList(list);
                this.jj_consume_token(450);
                break;
            }
            default: {
                this.jj_la1[305] = this.jj_gen;
                break;
            }
        }
        return qualifiedName;
    }
    
    public final void referentialTriggeredAction(final int[] array) throws ParseException, StandardException {
        Label_0187: {
            switch (this.jj_nt.kind) {
                case 254: {
                    array[1] = this.updateRule();
                    switch (this.jj_nt.kind) {
                        case 195: {
                            this.jj_consume_token(195);
                            array[0] = this.deleteRule();
                            break Label_0187;
                        }
                        default: {
                            this.jj_la1[306] = this.jj_gen;
                            break Label_0187;
                        }
                    }
                    break;
                }
                case 122: {
                    array[0] = this.deleteRule();
                    switch (this.jj_nt.kind) {
                        case 195: {
                            this.jj_consume_token(195);
                            array[1] = this.updateRule();
                            break Label_0187;
                        }
                        default: {
                            this.jj_la1[307] = this.jj_gen;
                            break Label_0187;
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[308] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final int updateRule() throws ParseException {
        this.jj_consume_token(254);
        return this.updateReferentialAction();
    }
    
    public final int deleteRule() throws ParseException {
        this.jj_consume_token(122);
        return this.deleteReferentialAction();
    }
    
    public final int updateReferentialAction() throws ParseException {
        switch (this.jj_nt.kind) {
            case 217: {
                this.jj_consume_token(217);
                return 1;
            }
            case 189: {
                this.jj_consume_token(189);
                this.jj_consume_token(273);
                return 2;
            }
            default: {
                this.jj_la1[309] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final int deleteReferentialAction() throws ParseException {
        switch (this.jj_nt.kind) {
            case 84: {
                this.jj_consume_token(84);
                return 0;
            }
            case 217: {
                this.jj_consume_token(217);
                return 1;
            }
            case 189: {
                this.jj_consume_token(189);
                this.jj_consume_token(273);
                return 2;
            }
            case 227: {
                this.jj_consume_token(227);
                switch (this.jj_nt.kind) {
                    case 191: {
                        this.jj_consume_token(191);
                        return 3;
                    }
                    case 119: {
                        this.jj_consume_token(119);
                        return 4;
                    }
                    default: {
                        this.jj_la1[310] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
            default: {
                this.jj_la1[311] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final void columnConstraintDefinition(final DataTypeDescriptor[] array, final TableElementList list, final String s) throws ParseException, StandardException {
        TableName constraintNameDefinition = null;
        switch (this.jj_nt.kind) {
            case 100: {
                constraintNameDefinition = this.constraintNameDefinition();
                break;
            }
            default: {
                this.jj_la1[312] = this.jj_gen;
                break;
            }
        }
        final ConstraintDefinitionNode columnConstraint = this.columnConstraint(constraintNameDefinition, array, s);
        if (columnConstraint == null) {
            return;
        }
        list.addTableElement(columnConstraint);
    }
    
    public final ConstraintDefinitionNode columnConstraint(final TableName tableName, final DataTypeDescriptor[] array, final String s) throws ParseException, StandardException {
        Properties properties = null;
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        final int[] array2 = { 2, 2 };
        switch (this.jj_nt.kind) {
            case 190: {
                this.jj_consume_token(190);
                this.jj_consume_token(191);
                if (array[0] == null) {
                    throw StandardException.newException("42XAB");
                }
                array[0] = array[0].getNullabilityType(false);
                return null;
            }
            case 208:
            case 252: {
                final int uniqueSpecification = this.uniqueSpecification(s);
                switch (this.jj_nt.kind) {
                    case 59: {
                        properties = this.propertyList(false);
                        this.jj_consume_token(64);
                        break;
                    }
                    default: {
                        this.jj_la1[313] = this.jj_gen;
                        break;
                    }
                }
                final ResultColumnList list2 = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
                list2.addElement((QueryTreeNode)this.nodeFactory.getNode(80, s, null, this.getContextManager()));
                return (ConstraintDefinitionNode)this.nodeFactory.getNode(131, tableName, ReuseFactory.getInteger(uniqueSpecification), list2, properties, null, null, this.getContextManager());
            }
            case 215: {
                final TableName referencesSpecification = this.referencesSpecification(list, array2);
                switch (this.jj_nt.kind) {
                    case 59: {
                        properties = this.propertyList(false);
                        this.jj_consume_token(64);
                        break;
                    }
                    default: {
                        this.jj_la1[314] = this.jj_gen;
                        break;
                    }
                }
                final ResultColumnList list3 = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
                list3.addElement((QueryTreeNode)this.nodeFactory.getNode(80, s, null, this.getContextManager()));
                final ConstraintDefinitionNode constraintDefinitionNode = (ConstraintDefinitionNode)this.nodeFactory.getNode(119, tableName, referencesSpecification, list3, list, array2, this.getContextManager());
                if (properties != null) {
                    constraintDefinitionNode.setProperties(properties);
                }
                return constraintDefinitionNode;
            }
            case 91: {
                return this.checkConstraintDefinition(tableName, s);
            }
            default: {
                this.jj_la1[315] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode dropRoleStatement() throws ParseException, StandardException {
        this.jj_consume_token(369);
        final String identifier = this.identifier(128, true);
        this.checkVersion(170, "ROLES");
        this.checkSqlStandardAccess("DROP ROLE");
        return (StatementNode)this.nodeFactory.getNode(214, identifier, this.getContextManager());
    }
    
    public final StatementNode dropSchemaStatement() throws ParseException, StandardException {
        this.jj_consume_token(222);
        final String identifier = this.identifier(128, true);
        this.jj_consume_token(217);
        return (StatementNode)this.nodeFactory.getNode(90, identifier, new Integer(1), this.getContextManager());
    }
    
    public final StatementNode alterTableStatement() throws ParseException, StandardException {
        this.jj_consume_token(239);
        return this.alterTableBody(this.qualifiedName(128));
    }
    
    public final StatementNode alterTableBody(final TableName tableName) throws ParseException, StandardException {
        final TableElementList list = (TableElementList)this.nodeFactory.getNode(12, this.getContextManager());
        final int[] array = { 0 };
        final int[] array2 = { 0 };
        switch (this.jj_nt.kind) {
            case 382: {
                this.jj_consume_token(382);
                StatementNode statementNode = null;
                switch (this.jj_nt.kind) {
                    case 397: {
                        statementNode = this.inplaceCompress(tableName);
                        break;
                    }
                    default: {
                        this.jj_la1[316] = this.jj_gen;
                        statementNode = this.sequentialCompress(tableName);
                        break;
                    }
                }
                return statementNode;
            }
            case 66: {
                this.jj_consume_token(66);
                StatementNode statementNode2 = null;
                switch (this.jj_nt.kind) {
                    case 129: {
                        statementNode2 = this.dropStatistics(tableName);
                        break;
                    }
                    case 254: {
                        statementNode2 = this.updateStatistics(tableName);
                        break;
                    }
                    default: {
                        this.jj_la1[317] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                return statementNode2;
            }
            case 254: {
                this.jj_consume_token(254);
                this.jj_consume_token(427);
                final String identifier = this.identifier(128, true);
                this.checkVersion(170, "SYSCS_UPDATE_STATISTICS");
                this.checkInternalFeature("UPDATE STATISTICS");
                array[0] = 5;
                return (StatementNode)this.nodeFactory.getNode(114, tableName, array, Boolean.FALSE, identifier, null, this.getContextManager());
            }
            case 427: {
                this.jj_consume_token(427);
                this.jj_consume_token(129);
                final String identifier2 = this.identifier(128, true);
                this.checkVersion(210, "SYSCS_UPDATE_STATISTICS");
                this.checkInternalFeature("DROP STATISTICS");
                array[0] = 6;
                return (StatementNode)this.nodeFactory.getNode(114, tableName, array, Boolean.FALSE, identifier2, null, this.getContextManager());
            }
            case 129: {
                this.jj_consume_token(129);
                StatementNode statementNode3;
                if (this.jj_2_78(1)) {
                    statementNode3 = this.dropColumnDefinition(tableName, list, array, array2);
                }
                else {
                    if (!this.jj_2_79(1)) {
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                    statementNode3 = this.dropTableConstraintDefinitionCore(tableName, list, array, array2);
                }
                return statementNode3;
            }
            case 65:
            case 68:
            case 304: {
                return (StatementNode)this.nodeFactory.getNode(114, tableName, array, list, new Character(this.alterTableAction(list, array, array2)), array2, this.getContextManager());
            }
            default: {
                this.jj_la1[318] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode dropStatistics(final TableName tableName) throws ParseException, StandardException {
        this.jj_consume_token(129);
        this.jj_consume_token(427);
        this.checkVersion(210, "SYSCS_DROP_STATISTICS");
        this.checkInternalFeature("DROP STATISTICS");
        return (StatementNode)this.nodeFactory.getNode(114, tableName, new int[] { 6 }, Boolean.TRUE, null, null, this.getContextManager());
    }
    
    public final StatementNode updateStatistics(final TableName tableName) throws ParseException, StandardException {
        this.jj_consume_token(254);
        this.jj_consume_token(427);
        this.checkVersion(170, "SYSCS_UPDATE_STATISTICS");
        this.checkInternalFeature("UPDATE STATISTICS");
        return (StatementNode)this.nodeFactory.getNode(114, tableName, new int[] { 5 }, Boolean.TRUE, null, null, this.getContextManager());
    }
    
    public final StatementNode inplaceCompress(final TableName tableName) throws ParseException, StandardException {
        Token jj_consume_token = null;
        Token jj_consume_token2 = null;
        Token jj_consume_token3 = null;
        this.jj_consume_token(397);
        switch (this.jj_nt.kind) {
            case 416: {
                jj_consume_token = this.jj_consume_token(416);
                break;
            }
            default: {
                this.jj_la1[319] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 389: {
                jj_consume_token2 = this.jj_consume_token(389);
                break;
            }
            default: {
                this.jj_la1[320] = this.jj_gen;
                break;
            }
        }
        switch (this.jj_nt.kind) {
            case 439: {
                jj_consume_token3 = this.jj_consume_token(439);
                break;
            }
            default: {
                this.jj_la1[321] = this.jj_gen;
                break;
            }
        }
        this.checkInternalFeature("COMPRESS");
        return (StatementNode)this.nodeFactory.getNode(114, tableName, new Boolean(jj_consume_token != null), new Boolean(jj_consume_token2 != null), new Boolean(jj_consume_token3 != null), this.getContextManager());
    }
    
    public final StatementNode sequentialCompress(final TableName tableName) throws ParseException, StandardException {
        Token jj_consume_token = null;
        switch (this.jj_nt.kind) {
            case 429: {
                jj_consume_token = this.jj_consume_token(429);
                break;
            }
            default: {
                this.jj_la1[322] = this.jj_gen;
                break;
            }
        }
        this.checkInternalFeature("COMPRESS");
        return (StatementNode)this.nodeFactory.getNode(114, tableName, new Boolean(jj_consume_token != null), this.getContextManager());
    }
    
    public final char alterTableAction(final TableElementList list, final int[] array, final int[] array2) throws ParseException, StandardException {
        final char c = '\0';
        final long[] array3 = new long[4];
        switch (this.jj_nt.kind) {
            case 65: {
                this.jj_consume_token(65);
                TableElementNode tableElementNode = null;
                if (this.jj_2_80(1)) {
                    tableElementNode = this.addColumnDefinition(list);
                }
                else {
                    switch (this.jj_nt.kind) {
                        case 91:
                        case 100:
                        case 145:
                        case 208:
                        case 252: {
                            tableElementNode = this.tableConstraintDefinition();
                            break;
                        }
                        default: {
                            this.jj_la1[323] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                }
                if (tableElementNode instanceof ColumnDefinitionNode && ((ColumnDefinitionNode)tableElementNode).isAutoincrementColumn()) {
                    throw StandardException.newException("42601.S.372");
                }
                array[0] = 1;
                list.addTableElement(tableElementNode);
                return c;
            }
            case 68: {
                this.jj_consume_token(68);
                switch (this.jj_nt.kind) {
                    case 96: {
                        this.jj_consume_token(96);
                        break;
                    }
                    default: {
                        this.jj_la1[324] = this.jj_gen;
                        break;
                    }
                }
                final TableElementNode columnAlterClause = this.columnAlterClause(this.identifier(128, true));
                array[0] = 3;
                list.addTableElement(columnAlterClause);
                return c;
            }
            case 304: {
                final char db2lockGranularityClause = this.DB2lockGranularityClause();
                array[0] = 4;
                return db2lockGranularityClause;
            }
            default: {
                this.jj_la1[325] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode dropColumnDefinition(final TableName tableName, final TableElementList list, final int[] array, final int[] array2) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 96: {
                this.jj_consume_token(96);
                break;
            }
            default: {
                this.jj_la1[326] = this.jj_gen;
                break;
            }
        }
        final String identifier = this.identifier(128, true);
        this.dropColumnReferentialAction(array2);
        final TableElementNode tableElementNode = (TableElementNode)this.nodeFactory.getNode(113, identifier, null, null, null, this.getContextManager());
        array[0] = 2;
        list.addTableElement(tableElementNode);
        return (StatementNode)this.nodeFactory.getNode(114, tableName, array, list, new Character('\0'), array2, this.getContextManager());
    }
    
    public final void dropColumnReferentialAction(final int[] array) throws ParseException {
        int n = 0;
        Label_0131: {
            switch (this.jj_nt.kind) {
                case 84:
                case 217: {
                    switch (this.jj_nt.kind) {
                        case 84: {
                            this.jj_consume_token(84);
                            n = 0;
                            break Label_0131;
                        }
                        case 217: {
                            this.jj_consume_token(217);
                            n = 1;
                            break Label_0131;
                        }
                        default: {
                            this.jj_la1[327] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
                default: {
                    this.jj_la1[328] = this.jj_gen;
                    break;
                }
            }
        }
        array[0] = n;
    }
    
    public final TableElementNode addColumnDefinition(final TableElementList list) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 96: {
                this.jj_consume_token(96);
                break;
            }
            default: {
                this.jj_la1[329] = this.jj_gen;
                break;
            }
        }
        return this.columnDefinition(list);
    }
    
    public final TableElementNode columnAlterClause(final String s) throws ParseException, StandardException {
        final long[] array = new long[4];
        if (this.getToken(2).kind == 284) {
            this.jj_consume_token(227);
            this.jj_consume_token(284);
            this.jj_consume_token(352);
            return (TableElementNode)this.nodeFactory.getNode(186, s, null, this.dataTypeDDL(), null, this.getContextManager());
        }
        if (this.getToken(2).kind == 293) {
            this.jj_consume_token(227);
            this.jj_consume_token(293);
            this.jj_consume_token(83);
            array[1] = this.exactNumber();
            array[3] = 2L;
            return (TableElementNode)this.nodeFactory.getNode(97, s, null, null, array, this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 326: {
                this.jj_consume_token(326);
                this.jj_consume_token(267);
                array[0] = this.exactNumber();
                array[3] = 1L;
                return (TableElementNode)this.nodeFactory.getNode(97, s, null, null, array, this.getContextManager());
            }
            default: {
                this.jj_la1[331] = this.jj_gen;
                if (this.getToken(1).kind == 267 || this.getToken(1).kind == 119 || (this.getToken(1).kind == 227 && this.getToken(2).kind == 119)) {
                    switch (this.jj_nt.kind) {
                        case 227: {
                            this.jj_consume_token(227);
                            break;
                        }
                        default: {
                            this.jj_la1[330] = this.jj_gen;
                            break;
                        }
                    }
                    return this.wrapAlterColumnDefaultValue(this.defaultClause(array, s), s, array);
                }
                switch (this.jj_nt.kind) {
                    case 129: {
                        this.jj_consume_token(129);
                        this.jj_consume_token(119);
                        return this.wrapAlterColumnDefaultValue((ValueNode)this.nodeFactory.getNode(13, this.getContextManager()), s, array);
                    }
                    default: {
                        this.jj_la1[332] = this.jj_gen;
                        if (this.getToken(1).kind == 191) {
                            this.jj_consume_token(191);
                            return (TableElementNode)this.nodeFactory.getNode(187, s, null, null, null, this.getContextManager());
                        }
                        if (this.getToken(1).kind == 190) {
                            this.jj_consume_token(190);
                            this.jj_consume_token(191);
                            return (TableElementNode)this.nodeFactory.getNode(193, s, null, null, null, this.getContextManager());
                        }
                        this.jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                break;
            }
        }
    }
    
    public final StatementNode dropTableConstraintDefinitionCore(final TableName tableName, final TableElementList list, final int[] array, final int[] array2) throws ParseException, StandardException {
        final TableElementNode dropTableConstraintDefinition = this.dropTableConstraintDefinition();
        array[0] = 2;
        list.addTableElement(dropTableConstraintDefinition);
        return (StatementNode)this.nodeFactory.getNode(114, tableName, array, list, new Character('\0'), array2, this.getContextManager());
    }
    
    public final TableElementNode dropTableConstraintDefinition() throws ParseException, StandardException {
        if (this.getToken(1).kind == 100) {
            this.jj_consume_token(100);
            return (TableElementNode)this.nodeFactory.getNode(131, this.qualifiedName(128), ReuseFactory.getInteger(5), null, null, null, null, ReuseFactory.getInteger(2), this.getContextManager());
        }
        if (this.getToken(1).kind == 208) {
            this.jj_consume_token(208);
            this.jj_consume_token(174);
            return (TableElementNode)this.nodeFactory.getNode(131, null, ReuseFactory.getInteger(5), null, null, null, null, ReuseFactory.getInteger(2), this.getContextManager());
        }
        if (this.getToken(1).kind == 145) {
            this.jj_consume_token(145);
            this.jj_consume_token(174);
            return (TableElementNode)this.nodeFactory.getNode(131, this.qualifiedName(128), ReuseFactory.getInteger(5), null, null, null, null, ReuseFactory.getInteger(2), ReuseFactory.getInteger(6), this.getContextManager());
        }
        if (this.getToken(1).kind == 252) {
            this.jj_consume_token(252);
            return (TableElementNode)this.nodeFactory.getNode(131, this.qualifiedName(128), ReuseFactory.getInteger(5), null, null, null, null, ReuseFactory.getInteger(2), ReuseFactory.getInteger(3), this.getContextManager());
        }
        switch (this.jj_nt.kind) {
            case 91: {
                this.jj_consume_token(91);
                return (TableElementNode)this.nodeFactory.getNode(131, this.qualifiedName(128), ReuseFactory.getInteger(5), null, null, null, null, ReuseFactory.getInteger(2), ReuseFactory.getInteger(4), this.getContextManager());
            }
            default: {
                this.jj_la1[333] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode dropTableStatement() throws ParseException, StandardException {
        this.jj_consume_token(239);
        return (StatementNode)this.nodeFactory.getNode(91, this.qualifiedName(128), new Integer(2), this.getContextManager());
    }
    
    public final StatementNode dropIndexStatement() throws ParseException, StandardException {
        this.jj_consume_token(396);
        return (StatementNode)this.nodeFactory.getNode(63, this.qualifiedName(128), this.getContextManager());
    }
    
    public final StatementNode dropAliasStatement() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 211: {
                this.jj_consume_token(211);
                return this.dropAliasNode(this.qualifiedName(128), 'P');
            }
            case 149: {
                this.jj_consume_token(149);
                return this.dropAliasNode(this.qualifiedName(128), 'F');
            }
            case 345: {
                this.jj_consume_token(345);
                final TableName qualifiedName = this.qualifiedName(128);
                this.checkVersion(130, "DROP SYNONYM");
                return this.dropAliasNode(qualifiedName, 'S');
            }
            case 352: {
                this.jj_consume_token(352);
                final TableName qualifiedName2 = this.qualifiedName(128);
                this.jj_consume_token(217);
                this.checkVersion(180, "DROP TYPE");
                return this.dropAliasNode(qualifiedName2, 'A');
            }
            case 387: {
                this.jj_consume_token(387);
                this.jj_consume_token(379);
                final TableName qualifiedName3 = this.qualifiedName(128);
                this.jj_consume_token(217);
                this.checkVersion(220, "DROP DERBY AGGREGATE");
                return this.dropAliasNode(qualifiedName3, 'G');
            }
            default: {
                this.jj_la1[334] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode dropViewStatement() throws ParseException, StandardException {
        this.jj_consume_token(263);
        return (StatementNode)this.nodeFactory.getNode(92, this.qualifiedName(128), this.getContextManager());
    }
    
    public final StatementNode dropTriggerStatement() throws ParseException, StandardException {
        this.jj_consume_token(438);
        return (StatementNode)this.nodeFactory.getNode(65, this.qualifiedName(128), this.getContextManager());
    }
    
    public final StatementNode truncateTableStatement() throws ParseException, StandardException {
        this.jj_consume_token(351);
        this.jj_consume_token(239);
        return (StatementNode)this.nodeFactory.getNode(114, this.qualifiedName(128), this.getContextManager());
    }
    
    public final StatementNode grantStatement() throws ParseException, StandardException {
        if (this.getToken(1).kind == 154 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 195)) || this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind))) {
            this.jj_consume_token(154);
            this.checkVersion(140, "GRANT");
            this.checkSqlStandardAccess("GRANT");
            StatementNode statementNode = null;
            switch (this.jj_nt.kind) {
                case 66:
                case 122:
                case 166:
                case 215:
                case 225:
                case 254:
                case 438: {
                    statementNode = this.tableGrantStatement();
                    break;
                }
                case 137: {
                    statementNode = this.routineGrantStatement();
                    break;
                }
                case 354: {
                    statementNode = this.usageGrantStatement();
                    break;
                }
                default: {
                    this.jj_la1[335] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            return statementNode;
        }
        if (this.getToken(1).kind == 154 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && !this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 243)) || !this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind))) {
            this.jj_consume_token(154);
            return this.roleGrantStatement();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode tableGrantStatement() throws ParseException, StandardException {
        final PrivilegeNode tablePrivileges = this.tablePrivileges();
        this.jj_consume_token(243);
        return (StatementNode)this.nodeFactory.getNode(89, tablePrivileges, this.granteeList(), this.getContextManager());
    }
    
    public final PrivilegeNode tablePrivileges() throws ParseException, StandardException {
        final TablePrivilegesNode tableActions = this.tableActions();
        this.jj_consume_token(195);
        switch (this.jj_nt.kind) {
            case 239: {
                this.jj_consume_token(239);
                break;
            }
            default: {
                this.jj_la1[336] = this.jj_gen;
                break;
            }
        }
        return (PrivilegeNode)this.nodeFactory.getNode(103, ReuseFactory.getInteger(0), this.qualifiedName(128), tableActions, this.getContextManager());
    }
    
    public final TablePrivilegesNode tableActions() throws ParseException, StandardException {
        final TablePrivilegesNode tablePrivilegesNode = (TablePrivilegesNode)this.nodeFactory.getNode(106, this.getContextManager());
        switch (this.jj_nt.kind) {
            case 66: {
                this.jj_consume_token(66);
                this.jj_consume_token(210);
                tablePrivilegesNode.addAll();
                return tablePrivilegesNode;
            }
            case 122:
            case 166:
            case 215:
            case 225:
            case 254:
            case 438: {
                this.tableAction(tablePrivilegesNode);
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 453: {
                            this.jj_consume_token(453);
                            this.tableAction(tablePrivilegesNode);
                            continue;
                        }
                        default: {
                            this.jj_la1[337] = this.jj_gen;
                            return tablePrivilegesNode;
                        }
                    }
                }
                break;
            }
            default: {
                this.jj_la1[338] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final StatementNode routineGrantStatement() throws ParseException, StandardException {
        this.jj_consume_token(137);
        this.jj_consume_token(195);
        final RoutineDesignator routineDesignator = this.routineDesignator();
        this.jj_consume_token(243);
        return (StatementNode)this.nodeFactory.getNode(89, this.nodeFactory.getNode(103, ReuseFactory.getInteger(1), routineDesignator, null, this.getContextManager()), this.granteeList(), this.getContextManager());
    }
    
    public final StatementNode usageGrantStatement() throws ParseException, StandardException {
        this.jj_consume_token(354);
        this.jj_consume_token(195);
        final Integer usableObjects = this.usableObjects();
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(243);
        final List granteeList = this.granteeList();
        this.checkVersion(180, "GRANT USAGE");
        return (StatementNode)this.nodeFactory.getNode(89, this.nodeFactory.getNode(103, usableObjects, qualifiedName, "USAGE", Boolean.FALSE, this.getContextManager()), granteeList, this.getContextManager());
    }
    
    public final Integer usableObjects() throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 387: {
                this.jj_consume_token(387);
                this.jj_consume_token(379);
                return ReuseFactory.getInteger(4);
            }
            case 428: {
                this.jj_consume_token(428);
                return ReuseFactory.getInteger(2);
            }
            case 352: {
                this.jj_consume_token(352);
                return ReuseFactory.getInteger(3);
            }
            default: {
                this.jj_la1[339] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final RoutineDesignator routineDesignator() throws ParseException, StandardException {
        List parameterTypeList = null;
        Token token = null;
        switch (this.jj_nt.kind) {
            case 149: {
                token = this.jj_consume_token(149);
                break;
            }
            case 211: {
                token = this.jj_consume_token(211);
                break;
            }
            default: {
                this.jj_la1[340] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        final TableName qualifiedName = this.qualifiedName(128);
        switch (this.jj_nt.kind) {
            case 449: {
                this.jj_consume_token(449);
                parameterTypeList = this.parameterTypeList();
                this.jj_consume_token(450);
                break;
            }
            default: {
                this.jj_la1[341] = this.jj_gen;
                break;
            }
        }
        return new RoutineDesignator(false, qualifiedName, token.kind == 149, parameterTypeList);
    }
    
    public final List parameterTypeList() throws ParseException, StandardException {
        final ArrayList<TypeDescriptor> list = new ArrayList<TypeDescriptor>();
        Label_0092: {
            if (this.jj_2_81(1)) {
                list.add(this.catalogType());
                while (true) {
                    switch (this.jj_nt.kind) {
                        case 453: {
                            this.jj_consume_token(453);
                            list.add(this.catalogType());
                            continue;
                        }
                        default: {
                            this.jj_la1[342] = this.jj_gen;
                            break Label_0092;
                        }
                    }
                }
            }
        }
        return list;
    }
    
    public final void tableAction(final TablePrivilegesNode tablePrivilegesNode) throws ParseException, StandardException {
        ResultColumnList list = null;
        switch (this.jj_nt.kind) {
            case 225: {
                this.jj_consume_token(225);
                switch (this.jj_nt.kind) {
                    case 449: {
                        list = this.privilegeColumnList();
                        break;
                    }
                    default: {
                        this.jj_la1[343] = this.jj_gen;
                        break;
                    }
                }
                tablePrivilegesNode.addAction(0, list);
                break;
            }
            case 122: {
                this.jj_consume_token(122);
                tablePrivilegesNode.addAction(1, null);
                break;
            }
            case 166: {
                this.jj_consume_token(166);
                tablePrivilegesNode.addAction(2, null);
                break;
            }
            case 254: {
                this.jj_consume_token(254);
                switch (this.jj_nt.kind) {
                    case 449: {
                        list = this.privilegeColumnList();
                        break;
                    }
                    default: {
                        this.jj_la1[344] = this.jj_gen;
                        break;
                    }
                }
                tablePrivilegesNode.addAction(3, list);
                break;
            }
            case 215: {
                this.jj_consume_token(215);
                switch (this.jj_nt.kind) {
                    case 449: {
                        list = this.privilegeColumnList();
                        break;
                    }
                    default: {
                        this.jj_la1[345] = this.jj_gen;
                        break;
                    }
                }
                tablePrivilegesNode.addAction(4, list);
                break;
            }
            case 438: {
                this.jj_consume_token(438);
                tablePrivilegesNode.addAction(5, null);
                break;
            }
            default: {
                this.jj_la1[346] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final ResultColumnList privilegeColumnList() throws ParseException, StandardException {
        final ResultColumnList list = (ResultColumnList)this.nodeFactory.getNode(9, this.getContextManager());
        this.jj_consume_token(449);
        this.columnNameList(list);
        this.jj_consume_token(450);
        return list;
    }
    
    public final List granteeList() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        this.grantee(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.grantee(list);
                    continue;
                }
                default: {
                    this.jj_la1[347] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void grantee(final List list) throws ParseException, StandardException {
        if (this.jj_2_82(1)) {
            list.add(this.identifier(128, true));
        }
        else {
            switch (this.jj_nt.kind) {
                case 212: {
                    this.jj_consume_token(212);
                    list.add("PUBLIC");
                    break;
                }
                default: {
                    this.jj_la1[348] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }
    
    public final StatementNode roleGrantStatement() throws ParseException, StandardException {
        final List roleList = this.roleList();
        this.jj_consume_token(243);
        final List granteeList = this.granteeList();
        this.checkSqlStandardAccess("GRANT <role>");
        this.checkVersion(170, "ROLES");
        return (StatementNode)this.nodeFactory.getNode(215, roleList, granteeList, this.getContextManager());
    }
    
    public final List roleList() throws ParseException, StandardException {
        final ArrayList list = new ArrayList();
        this.roleElement(list);
        while (true) {
            switch (this.jj_nt.kind) {
                case 453: {
                    this.jj_consume_token(453);
                    this.roleElement(list);
                    continue;
                }
                default: {
                    this.jj_la1[349] = this.jj_gen;
                    return list;
                }
            }
        }
    }
    
    public final void roleElement(final List list) throws ParseException, StandardException {
        list.add(this.identifier(128, true));
    }
    
    public final StatementNode revokeStatement() throws ParseException, StandardException {
        if (this.getToken(1).kind == 218 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 195)) || this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind))) {
            this.jj_consume_token(218);
            this.checkVersion(140, "REVOKE");
            this.checkSqlStandardAccess("REVOKE");
            StatementNode statementNode = null;
            switch (this.jj_nt.kind) {
                case 66:
                case 122:
                case 166:
                case 215:
                case 225:
                case 254:
                case 438: {
                    statementNode = this.tableRevokeStatement();
                    break;
                }
                case 137: {
                    statementNode = this.routineRevokeStatement();
                    break;
                }
                case 354: {
                    statementNode = this.usageRevokeStatement();
                    break;
                }
                default: {
                    this.jj_la1[350] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            return statementNode;
        }
        if (this.getToken(1).kind == 218 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && !this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 147)) || !this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind))) {
            this.jj_consume_token(218);
            this.checkVersion(170, "ROLES");
            this.checkSqlStandardAccess("REVOKE <role>");
            return this.roleRevokeStatement();
        }
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    
    public final StatementNode tableRevokeStatement() throws ParseException, StandardException {
        final PrivilegeNode tablePrivileges = this.tablePrivileges();
        this.jj_consume_token(147);
        return (StatementNode)this.nodeFactory.getNode(86, tablePrivileges, this.granteeList(), this.getContextManager());
    }
    
    public final StatementNode routineRevokeStatement() throws ParseException, StandardException {
        this.jj_consume_token(137);
        this.jj_consume_token(195);
        final RoutineDesignator routineDesignator = this.routineDesignator();
        this.jj_consume_token(147);
        final List granteeList = this.granteeList();
        this.jj_consume_token(217);
        return (StatementNode)this.nodeFactory.getNode(86, this.nodeFactory.getNode(103, ReuseFactory.getInteger(1), routineDesignator, null, this.getContextManager()), granteeList, this.getContextManager());
    }
    
    public final StatementNode usageRevokeStatement() throws ParseException, StandardException {
        this.jj_consume_token(354);
        this.jj_consume_token(195);
        final Integer usableObjects = this.usableObjects();
        final TableName qualifiedName = this.qualifiedName(128);
        this.jj_consume_token(147);
        final List granteeList = this.granteeList();
        this.jj_consume_token(217);
        this.checkVersion(180, "REVOKE USAGE");
        return (StatementNode)this.nodeFactory.getNode(86, this.nodeFactory.getNode(103, usableObjects, qualifiedName, "USAGE", Boolean.TRUE, this.getContextManager()), granteeList, this.getContextManager());
    }
    
    public final StatementNode roleRevokeStatement() throws ParseException, StandardException {
        final List roleList = this.roleList();
        this.jj_consume_token(147);
        return (StatementNode)this.nodeFactory.getNode(216, roleList, this.granteeList(), this.getContextManager());
    }
    
    public final String internalIdentifier(final int n, final boolean b) throws ParseException, StandardException {
        switch (this.jj_nt.kind) {
            case 475: {
                final Token jj_consume_token = this.jj_consume_token(475);
                final String sqlToUpperCase = StringUtil.SQLToUpperCase(jj_consume_token.image);
                if (b) {
                    IdUtil.checkIdentifierLengthLimit(sqlToUpperCase, n);
                }
                this.nextToLastTokenDelimitedIdentifier = this.lastTokenDelimitedIdentifier;
                this.lastTokenDelimitedIdentifier = Boolean.FALSE;
                this.nextToLastIdentifierToken = this.lastIdentifierToken;
                this.lastIdentifierToken = jj_consume_token;
                return sqlToUpperCase;
            }
            case 481: {
                final String delimitedIdentifier = this.delimitedIdentifier();
                if (b) {
                    IdUtil.checkIdentifierLengthLimit(delimitedIdentifier, n);
                }
                return delimitedIdentifier;
            }
            default: {
                this.jj_la1[351] = this.jj_gen;
                if (this.jj_2_83(1)) {
                    return StringUtil.SQLToUpperCase(this.nonReservedKeyword());
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final String identifier(final int n, final boolean b) throws ParseException, StandardException {
        return this.internalIdentifier(n, b);
    }
    
    public final String delimitedIdentifier() throws ParseException {
        final Token jj_consume_token = this.jj_consume_token(481);
        final String normalizeDelimitedID = normalizeDelimitedID(jj_consume_token.image.substring(1, jj_consume_token.image.length() - 1));
        this.nextToLastTokenDelimitedIdentifier = this.lastTokenDelimitedIdentifier;
        this.lastTokenDelimitedIdentifier = Boolean.TRUE;
        this.nextToLastIdentifierToken = this.lastIdentifierToken;
        this.lastIdentifierToken = jj_consume_token;
        return normalizeDelimitedID;
    }
    
    public final String reservedKeyword() throws ParseException {
        Token token = null;
        switch (this.jj_nt.kind) {
            case 65: {
                token = this.jj_consume_token(65);
                break;
            }
            case 66: {
                token = this.jj_consume_token(66);
                break;
            }
            case 67: {
                token = this.jj_consume_token(67);
                break;
            }
            case 68: {
                token = this.jj_consume_token(68);
                break;
            }
            case 69: {
                token = this.jj_consume_token(69);
                break;
            }
            case 70: {
                token = this.jj_consume_token(70);
                break;
            }
            case 71: {
                token = this.jj_consume_token(71);
                break;
            }
            case 72: {
                token = this.jj_consume_token(72);
                break;
            }
            case 73: {
                token = this.jj_consume_token(73);
                break;
            }
            case 74: {
                token = this.jj_consume_token(74);
                break;
            }
            case 75: {
                token = this.jj_consume_token(75);
                break;
            }
            case 76: {
                token = this.jj_consume_token(76);
                break;
            }
            case 77: {
                token = this.jj_consume_token(77);
                break;
            }
            case 78: {
                token = this.jj_consume_token(78);
                break;
            }
            case 79: {
                token = this.jj_consume_token(79);
                break;
            }
            case 81: {
                token = this.jj_consume_token(81);
                break;
            }
            case 82: {
                token = this.jj_consume_token(82);
                break;
            }
            case 83: {
                token = this.jj_consume_token(83);
                break;
            }
            case 84: {
                token = this.jj_consume_token(84);
                break;
            }
            case 85: {
                token = this.jj_consume_token(85);
                break;
            }
            case 86: {
                token = this.jj_consume_token(86);
                break;
            }
            case 87: {
                token = this.jj_consume_token(87);
                break;
            }
            case 88: {
                token = this.jj_consume_token(88);
                break;
            }
            case 89: {
                token = this.jj_consume_token(89);
                break;
            }
            case 91: {
                token = this.jj_consume_token(91);
                break;
            }
            case 92: {
                token = this.jj_consume_token(92);
                break;
            }
            case 94: {
                token = this.jj_consume_token(94);
                break;
            }
            case 95: {
                token = this.jj_consume_token(95);
                break;
            }
            case 96: {
                token = this.jj_consume_token(96);
                break;
            }
            case 97: {
                token = this.jj_consume_token(97);
                break;
            }
            case 98: {
                token = this.jj_consume_token(98);
                break;
            }
            case 99: {
                token = this.jj_consume_token(99);
                break;
            }
            case 100: {
                token = this.jj_consume_token(100);
                break;
            }
            case 101: {
                token = this.jj_consume_token(101);
                break;
            }
            case 102: {
                token = this.jj_consume_token(102);
                break;
            }
            case 103: {
                token = this.jj_consume_token(103);
                break;
            }
            case 104: {
                token = this.jj_consume_token(104);
                break;
            }
            case 106: {
                token = this.jj_consume_token(106);
                break;
            }
            case 107: {
                token = this.jj_consume_token(107);
                break;
            }
            case 108: {
                token = this.jj_consume_token(108);
                break;
            }
            case 109: {
                token = this.jj_consume_token(109);
                break;
            }
            case 110: {
                token = this.jj_consume_token(110);
                break;
            }
            case 111: {
                token = this.jj_consume_token(111);
                break;
            }
            case 112: {
                token = this.jj_consume_token(112);
                break;
            }
            case 113: {
                token = this.jj_consume_token(113);
                break;
            }
            case 115: {
                token = this.jj_consume_token(115);
                break;
            }
            case 116: {
                token = this.jj_consume_token(116);
                break;
            }
            case 117: {
                token = this.jj_consume_token(117);
                break;
            }
            case 118: {
                token = this.jj_consume_token(118);
                break;
            }
            case 119: {
                token = this.jj_consume_token(119);
                break;
            }
            case 120: {
                token = this.jj_consume_token(120);
                break;
            }
            case 121: {
                token = this.jj_consume_token(121);
                break;
            }
            case 122: {
                token = this.jj_consume_token(122);
                break;
            }
            case 123: {
                token = this.jj_consume_token(123);
                break;
            }
            case 124: {
                token = this.jj_consume_token(124);
                break;
            }
            case 125: {
                token = this.jj_consume_token(125);
                break;
            }
            case 126: {
                token = this.jj_consume_token(126);
                break;
            }
            case 127: {
                token = this.jj_consume_token(127);
                break;
            }
            case 128: {
                token = this.jj_consume_token(128);
                break;
            }
            case 129: {
                token = this.jj_consume_token(129);
                break;
            }
            case 130: {
                token = this.jj_consume_token(130);
                break;
            }
            case 131: {
                token = this.jj_consume_token(131);
                break;
            }
            case 132: {
                token = this.jj_consume_token(132);
                break;
            }
            case 133: {
                token = this.jj_consume_token(133);
                break;
            }
            case 134: {
                token = this.jj_consume_token(134);
                break;
            }
            case 135: {
                token = this.jj_consume_token(135);
                break;
            }
            case 136: {
                token = this.jj_consume_token(136);
                break;
            }
            case 137: {
                token = this.jj_consume_token(137);
                break;
            }
            case 138: {
                token = this.jj_consume_token(138);
                break;
            }
            case 139: {
                token = this.jj_consume_token(139);
                break;
            }
            case 140: {
                token = this.jj_consume_token(140);
                break;
            }
            case 141: {
                token = this.jj_consume_token(141);
                break;
            }
            case 142: {
                token = this.jj_consume_token(142);
                break;
            }
            case 143: {
                token = this.jj_consume_token(143);
                break;
            }
            case 144: {
                token = this.jj_consume_token(144);
                break;
            }
            case 145: {
                token = this.jj_consume_token(145);
                break;
            }
            case 146: {
                token = this.jj_consume_token(146);
                break;
            }
            case 147: {
                token = this.jj_consume_token(147);
                break;
            }
            case 148: {
                token = this.jj_consume_token(148);
                break;
            }
            case 149: {
                token = this.jj_consume_token(149);
                break;
            }
            case 150: {
                token = this.jj_consume_token(150);
                break;
            }
            case 362: {
                token = this.jj_consume_token(362);
                break;
            }
            case 151: {
                token = this.jj_consume_token(151);
                break;
            }
            case 152: {
                token = this.jj_consume_token(152);
                break;
            }
            case 153: {
                token = this.jj_consume_token(153);
                break;
            }
            case 154: {
                token = this.jj_consume_token(154);
                break;
            }
            case 155: {
                token = this.jj_consume_token(155);
                break;
            }
            case 156: {
                token = this.jj_consume_token(156);
                break;
            }
            case 157: {
                token = this.jj_consume_token(157);
                break;
            }
            case 158: {
                token = this.jj_consume_token(158);
                break;
            }
            case 159: {
                token = this.jj_consume_token(159);
                break;
            }
            case 160: {
                token = this.jj_consume_token(160);
                break;
            }
            case 161: {
                token = this.jj_consume_token(161);
                break;
            }
            case 162: {
                token = this.jj_consume_token(162);
                break;
            }
            case 163: {
                token = this.jj_consume_token(163);
                break;
            }
            case 295: {
                token = this.jj_consume_token(295);
                break;
            }
            case 164: {
                token = this.jj_consume_token(164);
                break;
            }
            case 165: {
                token = this.jj_consume_token(165);
                break;
            }
            case 166: {
                token = this.jj_consume_token(166);
                break;
            }
            case 167: {
                token = this.jj_consume_token(167);
                break;
            }
            case 168: {
                token = this.jj_consume_token(168);
                break;
            }
            case 169: {
                token = this.jj_consume_token(169);
                break;
            }
            case 170: {
                token = this.jj_consume_token(170);
                break;
            }
            case 171: {
                token = this.jj_consume_token(171);
                break;
            }
            case 172: {
                token = this.jj_consume_token(172);
                break;
            }
            case 173: {
                token = this.jj_consume_token(173);
                break;
            }
            case 174: {
                token = this.jj_consume_token(174);
                break;
            }
            case 175: {
                token = this.jj_consume_token(175);
                break;
            }
            case 176: {
                token = this.jj_consume_token(176);
                break;
            }
            case 177: {
                token = this.jj_consume_token(177);
                break;
            }
            case 178: {
                token = this.jj_consume_token(178);
                break;
            }
            case 179: {
                token = this.jj_consume_token(179);
                break;
            }
            case 180: {
                token = this.jj_consume_token(180);
                break;
            }
            case 181: {
                token = this.jj_consume_token(181);
                break;
            }
            case 182: {
                token = this.jj_consume_token(182);
                break;
            }
            case 183: {
                token = this.jj_consume_token(183);
                break;
            }
            case 185: {
                token = this.jj_consume_token(185);
                break;
            }
            case 186: {
                token = this.jj_consume_token(186);
                break;
            }
            case 187: {
                token = this.jj_consume_token(187);
                break;
            }
            case 407: {
                token = this.jj_consume_token(407);
                break;
            }
            case 188: {
                token = this.jj_consume_token(188);
                break;
            }
            case 189: {
                token = this.jj_consume_token(189);
                break;
            }
            case 367: {
                token = this.jj_consume_token(367);
                break;
            }
            case 190: {
                token = this.jj_consume_token(190);
                break;
            }
            case 191: {
                token = this.jj_consume_token(191);
                break;
            }
            case 192: {
                token = this.jj_consume_token(192);
                break;
            }
            case 193: {
                token = this.jj_consume_token(193);
                break;
            }
            case 194: {
                token = this.jj_consume_token(194);
                break;
            }
            case 195: {
                token = this.jj_consume_token(195);
                break;
            }
            case 196: {
                token = this.jj_consume_token(196);
                break;
            }
            case 197: {
                token = this.jj_consume_token(197);
                break;
            }
            case 198: {
                token = this.jj_consume_token(198);
                break;
            }
            case 199: {
                token = this.jj_consume_token(199);
                break;
            }
            case 200: {
                token = this.jj_consume_token(200);
                break;
            }
            case 412: {
                token = this.jj_consume_token(412);
                break;
            }
            case 201: {
                token = this.jj_consume_token(201);
                break;
            }
            case 202: {
                token = this.jj_consume_token(202);
                break;
            }
            case 203: {
                token = this.jj_consume_token(203);
                break;
            }
            case 204: {
                token = this.jj_consume_token(204);
                break;
            }
            case 205: {
                token = this.jj_consume_token(205);
                break;
            }
            case 206: {
                token = this.jj_consume_token(206);
                break;
            }
            case 207: {
                token = this.jj_consume_token(207);
                break;
            }
            case 208: {
                token = this.jj_consume_token(208);
                break;
            }
            case 209: {
                token = this.jj_consume_token(209);
                break;
            }
            case 210: {
                token = this.jj_consume_token(210);
                break;
            }
            case 211: {
                token = this.jj_consume_token(211);
                break;
            }
            case 212: {
                token = this.jj_consume_token(212);
                break;
            }
            case 213: {
                token = this.jj_consume_token(213);
                break;
            }
            case 214: {
                token = this.jj_consume_token(214);
                break;
            }
            case 215: {
                token = this.jj_consume_token(215);
                break;
            }
            case 216: {
                token = this.jj_consume_token(216);
                break;
            }
            case 217: {
                token = this.jj_consume_token(217);
                break;
            }
            case 218: {
                token = this.jj_consume_token(218);
                break;
            }
            case 219: {
                token = this.jj_consume_token(219);
                break;
            }
            case 220: {
                token = this.jj_consume_token(220);
                break;
            }
            case 221: {
                token = this.jj_consume_token(221);
                break;
            }
            case 222: {
                token = this.jj_consume_token(222);
                break;
            }
            case 223: {
                token = this.jj_consume_token(223);
                break;
            }
            case 224: {
                token = this.jj_consume_token(224);
                break;
            }
            case 225: {
                token = this.jj_consume_token(225);
                break;
            }
            case 226: {
                token = this.jj_consume_token(226);
                break;
            }
            case 227: {
                token = this.jj_consume_token(227);
                break;
            }
            case 228: {
                token = this.jj_consume_token(228);
                break;
            }
            case 229: {
                token = this.jj_consume_token(229);
                break;
            }
            case 230: {
                token = this.jj_consume_token(230);
                break;
            }
            case 231: {
                token = this.jj_consume_token(231);
                break;
            }
            case 232: {
                token = this.jj_consume_token(232);
                break;
            }
            case 233: {
                token = this.jj_consume_token(233);
                break;
            }
            case 234: {
                token = this.jj_consume_token(234);
                break;
            }
            case 235: {
                token = this.jj_consume_token(235);
                break;
            }
            case 236: {
                token = this.jj_consume_token(236);
                break;
            }
            case 237: {
                token = this.jj_consume_token(237);
                break;
            }
            case 239: {
                token = this.jj_consume_token(239);
                break;
            }
            case 240: {
                token = this.jj_consume_token(240);
                break;
            }
            case 241: {
                token = this.jj_consume_token(241);
                break;
            }
            case 242: {
                token = this.jj_consume_token(242);
                break;
            }
            case 243: {
                token = this.jj_consume_token(243);
                break;
            }
            case 247: {
                token = this.jj_consume_token(247);
                break;
            }
            case 244: {
                token = this.jj_consume_token(244);
                break;
            }
            case 245: {
                token = this.jj_consume_token(245);
                break;
            }
            case 246: {
                token = this.jj_consume_token(246);
                break;
            }
            case 249: {
                token = this.jj_consume_token(249);
                break;
            }
            case 251: {
                token = this.jj_consume_token(251);
                break;
            }
            case 252: {
                token = this.jj_consume_token(252);
                break;
            }
            case 253: {
                token = this.jj_consume_token(253);
                break;
            }
            case 254: {
                token = this.jj_consume_token(254);
                break;
            }
            case 255: {
                token = this.jj_consume_token(255);
                break;
            }
            case 256: {
                token = this.jj_consume_token(256);
                break;
            }
            case 257: {
                token = this.jj_consume_token(257);
                break;
            }
            case 259: {
                token = this.jj_consume_token(259);
                break;
            }
            case 261: {
                token = this.jj_consume_token(261);
                break;
            }
            case 262: {
                token = this.jj_consume_token(262);
                break;
            }
            case 263: {
                token = this.jj_consume_token(263);
                break;
            }
            case 264: {
                token = this.jj_consume_token(264);
                break;
            }
            case 265: {
                token = this.jj_consume_token(265);
                break;
            }
            case 267: {
                token = this.jj_consume_token(267);
                break;
            }
            case 268: {
                token = this.jj_consume_token(268);
                break;
            }
            case 269: {
                token = this.jj_consume_token(269);
                break;
            }
            case 270: {
                token = this.jj_consume_token(270);
                break;
            }
            case 356: {
                token = this.jj_consume_token(356);
                break;
            }
            case 357: {
                token = this.jj_consume_token(357);
                break;
            }
            case 359: {
                token = this.jj_consume_token(359);
                break;
            }
            case 363: {
                token = this.jj_consume_token(363);
                break;
            }
            case 364: {
                token = this.jj_consume_token(364);
                break;
            }
            case 366: {
                token = this.jj_consume_token(366);
                break;
            }
            case 371: {
                token = this.jj_consume_token(371);
                break;
            }
            case 248: {
                token = this.jj_consume_token(248);
                break;
            }
            case 372: {
                token = this.jj_consume_token(372);
                break;
            }
            case 373: {
                token = this.jj_consume_token(373);
                break;
            }
            case 375: {
                token = this.jj_consume_token(375);
                break;
            }
            case 377: {
                token = this.jj_consume_token(377);
                break;
            }
            case 374: {
                token = this.jj_consume_token(374);
                break;
            }
            case 376: {
                token = this.jj_consume_token(376);
                break;
            }
            default: {
                this.jj_la1[352] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
        this.nextToLastTokenDelimitedIdentifier = this.lastTokenDelimitedIdentifier;
        this.lastTokenDelimitedIdentifier = Boolean.FALSE;
        return token.image;
    }
    
    public final String nonReservedKeyword() throws ParseException {
        Token lastIdentifierToken = null;
        Label_3987: {
            switch (this.jj_nt.kind) {
                case 271: {
                    lastIdentifierToken = this.jj_consume_token(271);
                    break;
                }
                case 272: {
                    lastIdentifierToken = this.jj_consume_token(272);
                    break;
                }
                case 273: {
                    lastIdentifierToken = this.jj_consume_token(273);
                    break;
                }
                case 378: {
                    lastIdentifierToken = this.jj_consume_token(378);
                    break;
                }
                case 379: {
                    lastIdentifierToken = this.jj_consume_token(379);
                    break;
                }
                case 274: {
                    lastIdentifierToken = this.jj_consume_token(274);
                    break;
                }
                case 380: {
                    lastIdentifierToken = this.jj_consume_token(380);
                    break;
                }
                case 80: {
                    lastIdentifierToken = this.jj_consume_token(80);
                    break;
                }
                case 275: {
                    lastIdentifierToken = this.jj_consume_token(275);
                    break;
                }
                case 276: {
                    lastIdentifierToken = this.jj_consume_token(276);
                    break;
                }
                case 277: {
                    lastIdentifierToken = this.jj_consume_token(277);
                    break;
                }
                case 381: {
                    lastIdentifierToken = this.jj_consume_token(381);
                    break;
                }
                case 278: {
                    lastIdentifierToken = this.jj_consume_token(278);
                    break;
                }
                case 93: {
                    lastIdentifierToken = this.jj_consume_token(93);
                    break;
                }
                case 279: {
                    lastIdentifierToken = this.jj_consume_token(279);
                    break;
                }
                case 280: {
                    lastIdentifierToken = this.jj_consume_token(280);
                    break;
                }
                case 382: {
                    lastIdentifierToken = this.jj_consume_token(382);
                    break;
                }
                case 281: {
                    lastIdentifierToken = this.jj_consume_token(281);
                    break;
                }
                case 282: {
                    lastIdentifierToken = this.jj_consume_token(282);
                    break;
                }
                case 383: {
                    lastIdentifierToken = this.jj_consume_token(383);
                    break;
                }
                case 105: {
                    lastIdentifierToken = this.jj_consume_token(105);
                    break;
                }
                case 384: {
                    lastIdentifierToken = this.jj_consume_token(384);
                    break;
                }
                case 358: {
                    lastIdentifierToken = this.jj_consume_token(358);
                    break;
                }
                case 360: {
                    lastIdentifierToken = this.jj_consume_token(360);
                    break;
                }
                case 283: {
                    lastIdentifierToken = this.jj_consume_token(283);
                    break;
                }
                case 114: {
                    lastIdentifierToken = this.jj_consume_token(114);
                    break;
                }
                case 284: {
                    lastIdentifierToken = this.jj_consume_token(284);
                    break;
                }
                case 285: {
                    lastIdentifierToken = this.jj_consume_token(285);
                    break;
                }
                case 286: {
                    lastIdentifierToken = this.jj_consume_token(286);
                    break;
                }
                case 389: {
                    lastIdentifierToken = this.jj_consume_token(389);
                    break;
                }
                case 390: {
                    lastIdentifierToken = this.jj_consume_token(390);
                    break;
                }
                case 289: {
                    lastIdentifierToken = this.jj_consume_token(289);
                    break;
                }
                case 361: {
                    lastIdentifierToken = this.jj_consume_token(361);
                    break;
                }
                case 386: {
                    lastIdentifierToken = this.jj_consume_token(386);
                    break;
                }
                case 387: {
                    lastIdentifierToken = this.jj_consume_token(387);
                    break;
                }
                case 388: {
                    lastIdentifierToken = this.jj_consume_token(388);
                    break;
                }
                case 391: {
                    lastIdentifierToken = this.jj_consume_token(391);
                    break;
                }
                case 392: {
                    lastIdentifierToken = this.jj_consume_token(392);
                    break;
                }
                case 393: {
                    lastIdentifierToken = this.jj_consume_token(393);
                    break;
                }
                case 394: {
                    lastIdentifierToken = this.jj_consume_token(394);
                    break;
                }
                case 395: {
                    lastIdentifierToken = this.jj_consume_token(395);
                    break;
                }
                case 290: {
                    lastIdentifierToken = this.jj_consume_token(290);
                    break;
                }
                case 291: {
                    lastIdentifierToken = this.jj_consume_token(291);
                    break;
                }
                case 292: {
                    lastIdentifierToken = this.jj_consume_token(292);
                    break;
                }
                case 293: {
                    lastIdentifierToken = this.jj_consume_token(293);
                    break;
                }
                case 396: {
                    lastIdentifierToken = this.jj_consume_token(396);
                    break;
                }
                case 294: {
                    lastIdentifierToken = this.jj_consume_token(294);
                    break;
                }
                case 397: {
                    lastIdentifierToken = this.jj_consume_token(397);
                    break;
                }
                case 296: {
                    lastIdentifierToken = this.jj_consume_token(296);
                    break;
                }
                case 398: {
                    lastIdentifierToken = this.jj_consume_token(398);
                    break;
                }
                case 298: {
                    lastIdentifierToken = this.jj_consume_token(298);
                    break;
                }
                case 299: {
                    lastIdentifierToken = this.jj_consume_token(299);
                    break;
                }
                case 399: {
                    lastIdentifierToken = this.jj_consume_token(399);
                    break;
                }
                case 300: {
                    lastIdentifierToken = this.jj_consume_token(300);
                    break;
                }
                case 301: {
                    lastIdentifierToken = this.jj_consume_token(301);
                    break;
                }
                case 302: {
                    lastIdentifierToken = this.jj_consume_token(302);
                    break;
                }
                case 400: {
                    lastIdentifierToken = this.jj_consume_token(400);
                    break;
                }
                case 401: {
                    lastIdentifierToken = this.jj_consume_token(401);
                    break;
                }
                case 303: {
                    lastIdentifierToken = this.jj_consume_token(303);
                    break;
                }
                case 304: {
                    lastIdentifierToken = this.jj_consume_token(304);
                    break;
                }
                case 305: {
                    lastIdentifierToken = this.jj_consume_token(305);
                    break;
                }
                case 365: {
                    lastIdentifierToken = this.jj_consume_token(365);
                    break;
                }
                case 306: {
                    lastIdentifierToken = this.jj_consume_token(306);
                    break;
                }
                case 307: {
                    lastIdentifierToken = this.jj_consume_token(307);
                    break;
                }
                case 402: {
                    lastIdentifierToken = this.jj_consume_token(402);
                    break;
                }
                case 403: {
                    lastIdentifierToken = this.jj_consume_token(403);
                    break;
                }
                case 308: {
                    lastIdentifierToken = this.jj_consume_token(308);
                    break;
                }
                case 404: {
                    lastIdentifierToken = this.jj_consume_token(404);
                    break;
                }
                case 309: {
                    lastIdentifierToken = this.jj_consume_token(309);
                    break;
                }
                case 310: {
                    lastIdentifierToken = this.jj_consume_token(310);
                    break;
                }
                case 184: {
                    lastIdentifierToken = this.jj_consume_token(184);
                    break;
                }
                case 311: {
                    lastIdentifierToken = this.jj_consume_token(311);
                    break;
                }
                case 312: {
                    lastIdentifierToken = this.jj_consume_token(312);
                    break;
                }
                case 313: {
                    lastIdentifierToken = this.jj_consume_token(313);
                    break;
                }
                case 314: {
                    lastIdentifierToken = this.jj_consume_token(314);
                    break;
                }
                case 315: {
                    lastIdentifierToken = this.jj_consume_token(315);
                    break;
                }
                case 405: {
                    lastIdentifierToken = this.jj_consume_token(405);
                    break;
                }
                case 406: {
                    lastIdentifierToken = this.jj_consume_token(406);
                    break;
                }
                case 316: {
                    lastIdentifierToken = this.jj_consume_token(316);
                    break;
                }
                case 317: {
                    lastIdentifierToken = this.jj_consume_token(317);
                    break;
                }
                case 318: {
                    lastIdentifierToken = this.jj_consume_token(318);
                    break;
                }
                case 319: {
                    lastIdentifierToken = this.jj_consume_token(319);
                    break;
                }
                case 409: {
                    lastIdentifierToken = this.jj_consume_token(409);
                    break;
                }
                default: {
                    this.jj_la1[353] = this.jj_gen;
                    if (this.getToken(1).kind == 320 && !this.seeingOffsetClause()) {
                        lastIdentifierToken = this.jj_consume_token(320);
                        break;
                    }
                    switch (this.jj_nt.kind) {
                        case 410: {
                            lastIdentifierToken = this.jj_consume_token(410);
                            break Label_3987;
                        }
                        case 411: {
                            lastIdentifierToken = this.jj_consume_token(411);
                            break Label_3987;
                        }
                        case 408: {
                            lastIdentifierToken = this.jj_consume_token(408);
                            break Label_3987;
                        }
                        case 368: {
                            lastIdentifierToken = this.jj_consume_token(368);
                            break Label_3987;
                        }
                        case 321: {
                            lastIdentifierToken = this.jj_consume_token(321);
                            break Label_3987;
                        }
                        case 414: {
                            lastIdentifierToken = this.jj_consume_token(414);
                            break Label_3987;
                        }
                        case 322: {
                            lastIdentifierToken = this.jj_consume_token(322);
                            break Label_3987;
                        }
                        case 323: {
                            lastIdentifierToken = this.jj_consume_token(323);
                            break Label_3987;
                        }
                        case 415: {
                            lastIdentifierToken = this.jj_consume_token(415);
                            break Label_3987;
                        }
                        case 416: {
                            lastIdentifierToken = this.jj_consume_token(416);
                            break Label_3987;
                        }
                        case 417: {
                            lastIdentifierToken = this.jj_consume_token(417);
                            break Label_3987;
                        }
                        case 418: {
                            lastIdentifierToken = this.jj_consume_token(418);
                            break Label_3987;
                        }
                        case 324: {
                            lastIdentifierToken = this.jj_consume_token(324);
                            break Label_3987;
                        }
                        case 420: {
                            lastIdentifierToken = this.jj_consume_token(420);
                            break Label_3987;
                        }
                        case 325: {
                            lastIdentifierToken = this.jj_consume_token(325);
                            break Label_3987;
                        }
                        case 419: {
                            lastIdentifierToken = this.jj_consume_token(419);
                            break Label_3987;
                        }
                        case 421: {
                            lastIdentifierToken = this.jj_consume_token(421);
                            break Label_3987;
                        }
                        case 326: {
                            lastIdentifierToken = this.jj_consume_token(326);
                            break Label_3987;
                        }
                        case 422: {
                            lastIdentifierToken = this.jj_consume_token(422);
                            break Label_3987;
                        }
                        case 423: {
                            lastIdentifierToken = this.jj_consume_token(423);
                            break Label_3987;
                        }
                        case 424: {
                            lastIdentifierToken = this.jj_consume_token(424);
                            break Label_3987;
                        }
                        case 327: {
                            lastIdentifierToken = this.jj_consume_token(327);
                            break Label_3987;
                        }
                        case 369: {
                            lastIdentifierToken = this.jj_consume_token(369);
                            break Label_3987;
                        }
                        case 328: {
                            lastIdentifierToken = this.jj_consume_token(328);
                            break Label_3987;
                        }
                        case 329: {
                            lastIdentifierToken = this.jj_consume_token(329);
                            break Label_3987;
                        }
                        case 370: {
                            lastIdentifierToken = this.jj_consume_token(370);
                            break Label_3987;
                        }
                        case 425: {
                            lastIdentifierToken = this.jj_consume_token(425);
                            break Label_3987;
                        }
                        case 426: {
                            lastIdentifierToken = this.jj_consume_token(426);
                            break Label_3987;
                        }
                        case 331: {
                            lastIdentifierToken = this.jj_consume_token(331);
                            break Label_3987;
                        }
                        case 330: {
                            lastIdentifierToken = this.jj_consume_token(330);
                            break Label_3987;
                        }
                        case 332: {
                            lastIdentifierToken = this.jj_consume_token(332);
                            break Label_3987;
                        }
                        case 428: {
                            lastIdentifierToken = this.jj_consume_token(428);
                            break Label_3987;
                        }
                        case 429: {
                            lastIdentifierToken = this.jj_consume_token(429);
                            break Label_3987;
                        }
                        case 333: {
                            lastIdentifierToken = this.jj_consume_token(333);
                            break Label_3987;
                        }
                        case 430: {
                            lastIdentifierToken = this.jj_consume_token(430);
                            break Label_3987;
                        }
                        case 431: {
                            lastIdentifierToken = this.jj_consume_token(431);
                            break Label_3987;
                        }
                        case 433: {
                            lastIdentifierToken = this.jj_consume_token(433);
                            break Label_3987;
                        }
                        case 432: {
                            lastIdentifierToken = this.jj_consume_token(432);
                            break Label_3987;
                        }
                        case 334: {
                            lastIdentifierToken = this.jj_consume_token(334);
                            break Label_3987;
                        }
                        case 335: {
                            lastIdentifierToken = this.jj_consume_token(335);
                            break Label_3987;
                        }
                        case 336: {
                            lastIdentifierToken = this.jj_consume_token(336);
                            break Label_3987;
                        }
                        case 337: {
                            lastIdentifierToken = this.jj_consume_token(337);
                            break Label_3987;
                        }
                        case 338: {
                            lastIdentifierToken = this.jj_consume_token(338);
                            break Label_3987;
                        }
                        case 339: {
                            lastIdentifierToken = this.jj_consume_token(339);
                            break Label_3987;
                        }
                        case 340: {
                            lastIdentifierToken = this.jj_consume_token(340);
                            break Label_3987;
                        }
                        case 341: {
                            lastIdentifierToken = this.jj_consume_token(341);
                            break Label_3987;
                        }
                        case 342: {
                            lastIdentifierToken = this.jj_consume_token(342);
                            break Label_3987;
                        }
                        case 434: {
                            lastIdentifierToken = this.jj_consume_token(434);
                            break Label_3987;
                        }
                        case 435: {
                            lastIdentifierToken = this.jj_consume_token(435);
                            break Label_3987;
                        }
                        case 343: {
                            lastIdentifierToken = this.jj_consume_token(343);
                            break Label_3987;
                        }
                        case 344: {
                            lastIdentifierToken = this.jj_consume_token(344);
                            break Label_3987;
                        }
                        case 427: {
                            lastIdentifierToken = this.jj_consume_token(427);
                            break Label_3987;
                        }
                        case 436: {
                            lastIdentifierToken = this.jj_consume_token(436);
                            break Label_3987;
                        }
                        case 345: {
                            lastIdentifierToken = this.jj_consume_token(345);
                            break Label_3987;
                        }
                        case 437: {
                            lastIdentifierToken = this.jj_consume_token(437);
                            break Label_3987;
                        }
                        case 238: {
                            lastIdentifierToken = this.jj_consume_token(238);
                            break Label_3987;
                        }
                        case 346: {
                            lastIdentifierToken = this.jj_consume_token(346);
                            break Label_3987;
                        }
                        case 347: {
                            lastIdentifierToken = this.jj_consume_token(347);
                            break Label_3987;
                        }
                        case 348: {
                            lastIdentifierToken = this.jj_consume_token(348);
                            break Label_3987;
                        }
                        case 349: {
                            lastIdentifierToken = this.jj_consume_token(349);
                            break Label_3987;
                        }
                        case 350: {
                            lastIdentifierToken = this.jj_consume_token(350);
                            break Label_3987;
                        }
                        case 438: {
                            lastIdentifierToken = this.jj_consume_token(438);
                            break Label_3987;
                        }
                        case 351: {
                            lastIdentifierToken = this.jj_consume_token(351);
                            break Label_3987;
                        }
                        case 439: {
                            lastIdentifierToken = this.jj_consume_token(439);
                            break Label_3987;
                        }
                        case 250: {
                            lastIdentifierToken = this.jj_consume_token(250);
                            break Label_3987;
                        }
                        case 352: {
                            lastIdentifierToken = this.jj_consume_token(352);
                            break Label_3987;
                        }
                        case 440: {
                            lastIdentifierToken = this.jj_consume_token(440);
                            break Label_3987;
                        }
                        case 353: {
                            lastIdentifierToken = this.jj_consume_token(353);
                            break Label_3987;
                        }
                        case 441: {
                            lastIdentifierToken = this.jj_consume_token(441);
                            break Label_3987;
                        }
                        case 354: {
                            lastIdentifierToken = this.jj_consume_token(354);
                            break Label_3987;
                        }
                        case 258: {
                            lastIdentifierToken = this.jj_consume_token(258);
                            break Label_3987;
                        }
                        case 260: {
                            lastIdentifierToken = this.jj_consume_token(260);
                            break Label_3987;
                        }
                        case 413: {
                            lastIdentifierToken = this.jj_consume_token(413);
                            break Label_3987;
                        }
                        case 355: {
                            lastIdentifierToken = this.jj_consume_token(355);
                            break Label_3987;
                        }
                        case 442: {
                            lastIdentifierToken = this.jj_consume_token(442);
                            break Label_3987;
                        }
                        default: {
                            this.jj_la1[354] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    break;
                }
            }
        }
        this.nextToLastTokenDelimitedIdentifier = this.lastTokenDelimitedIdentifier;
        this.lastTokenDelimitedIdentifier = Boolean.FALSE;
        this.nextToLastIdentifierToken = this.lastIdentifierToken;
        this.lastIdentifierToken = lastIdentifierToken;
        return lastIdentifierToken.image;
    }
    
    public final String caseSensitiveIdentifierPlusReservedWords() throws ParseException {
        if (this.jj_2_84(1)) {
            return this.caseSensitiveIdentifier();
        }
        switch (this.jj_nt.kind) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 259:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 267:
            case 268:
            case 269:
            case 270:
            case 295:
            case 356:
            case 357:
            case 359:
            case 362:
            case 363:
            case 364:
            case 366:
            case 367:
            case 371:
            case 372:
            case 373:
            case 374:
            case 375:
            case 376:
            case 377:
            case 407:
            case 412: {
                return this.reservedKeyword();
            }
            default: {
                this.jj_la1[355] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final String caseInsensitiveIdentifierPlusReservedWords() throws ParseException, StandardException {
        if (this.jj_2_85(1)) {
            return this.identifier(128, true);
        }
        switch (this.jj_nt.kind) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 259:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 267:
            case 268:
            case 269:
            case 270:
            case 295:
            case 356:
            case 357:
            case 359:
            case 362:
            case 363:
            case 364:
            case 366:
            case 367:
            case 371:
            case 372:
            case 373:
            case 374:
            case 375:
            case 376:
            case 377:
            case 407:
            case 412: {
                return StringUtil.SQLToUpperCase(this.reservedKeyword());
            }
            default: {
                this.jj_la1[356] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    public final String caseSensitiveIdentifier() throws ParseException {
        switch (this.jj_nt.kind) {
            case 475: {
                final Token jj_consume_token = this.jj_consume_token(475);
                this.nextToLastTokenDelimitedIdentifier = this.lastTokenDelimitedIdentifier;
                this.lastTokenDelimitedIdentifier = Boolean.FALSE;
                return jj_consume_token.image;
            }
            case 481: {
                return this.delimitedIdentifier();
            }
            default: {
                this.jj_la1[357] = this.jj_gen;
                if (this.jj_2_86(1)) {
                    return this.nonReservedKeyword();
                }
                this.jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    
    private final boolean jj_2_1(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_1();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(0, jj_la);
        }
    }
    
    private final boolean jj_2_2(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_2();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(1, jj_la);
        }
    }
    
    private final boolean jj_2_3(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_3();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(2, jj_la);
        }
    }
    
    private final boolean jj_2_4(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_4();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(3, jj_la);
        }
    }
    
    private final boolean jj_2_5(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_5();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(4, jj_la);
        }
    }
    
    private final boolean jj_2_6(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_6();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(5, jj_la);
        }
    }
    
    private final boolean jj_2_7(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_7();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(6, jj_la);
        }
    }
    
    private final boolean jj_2_8(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_8();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(7, jj_la);
        }
    }
    
    private final boolean jj_2_9(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_9();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(8, jj_la);
        }
    }
    
    private final boolean jj_2_10(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_10();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(9, jj_la);
        }
    }
    
    private final boolean jj_2_11(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_11();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(10, jj_la);
        }
    }
    
    private final boolean jj_2_12(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_12();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(11, jj_la);
        }
    }
    
    private final boolean jj_2_13(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_13();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(12, jj_la);
        }
    }
    
    private final boolean jj_2_14(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_14();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(13, jj_la);
        }
    }
    
    private final boolean jj_2_15(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_15();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(14, jj_la);
        }
    }
    
    private final boolean jj_2_16(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_16();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(15, jj_la);
        }
    }
    
    private final boolean jj_2_17(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_17();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(16, jj_la);
        }
    }
    
    private final boolean jj_2_18(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_18();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(17, jj_la);
        }
    }
    
    private final boolean jj_2_19(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_19();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(18, jj_la);
        }
    }
    
    private final boolean jj_2_20(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_20();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(19, jj_la);
        }
    }
    
    private final boolean jj_2_21(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_21();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(20, jj_la);
        }
    }
    
    private final boolean jj_2_22(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_22();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(21, jj_la);
        }
    }
    
    private final boolean jj_2_23(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_23();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(22, jj_la);
        }
    }
    
    private final boolean jj_2_24(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_24();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(23, jj_la);
        }
    }
    
    private final boolean jj_2_25(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_25();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(24, jj_la);
        }
    }
    
    private final boolean jj_2_26(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_26();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(25, jj_la);
        }
    }
    
    private final boolean jj_2_27(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_27();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(26, jj_la);
        }
    }
    
    private final boolean jj_2_28(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_28();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(27, jj_la);
        }
    }
    
    private final boolean jj_2_29(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_29();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(28, jj_la);
        }
    }
    
    private final boolean jj_2_30(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_30();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(29, jj_la);
        }
    }
    
    private final boolean jj_2_31(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_31();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(30, jj_la);
        }
    }
    
    private final boolean jj_2_32(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_32();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(31, jj_la);
        }
    }
    
    private final boolean jj_2_33(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_33();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(32, jj_la);
        }
    }
    
    private final boolean jj_2_34(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_34();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(33, jj_la);
        }
    }
    
    private final boolean jj_2_35(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_35();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(34, jj_la);
        }
    }
    
    private final boolean jj_2_36(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_36();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(35, jj_la);
        }
    }
    
    private final boolean jj_2_37(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_37();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(36, jj_la);
        }
    }
    
    private final boolean jj_2_38(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_38();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(37, jj_la);
        }
    }
    
    private final boolean jj_2_39(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_39();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(38, jj_la);
        }
    }
    
    private final boolean jj_2_40(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_40();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(39, jj_la);
        }
    }
    
    private final boolean jj_2_41(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_41();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(40, jj_la);
        }
    }
    
    private final boolean jj_2_42(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_42();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(41, jj_la);
        }
    }
    
    private final boolean jj_2_43(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_43();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(42, jj_la);
        }
    }
    
    private final boolean jj_2_44(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_44();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(43, jj_la);
        }
    }
    
    private final boolean jj_2_45(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_45();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(44, jj_la);
        }
    }
    
    private final boolean jj_2_46(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_46();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(45, jj_la);
        }
    }
    
    private final boolean jj_2_47(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_47();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(46, jj_la);
        }
    }
    
    private final boolean jj_2_48(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_48();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(47, jj_la);
        }
    }
    
    private final boolean jj_2_49(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_49();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(48, jj_la);
        }
    }
    
    private final boolean jj_2_50(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_50();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(49, jj_la);
        }
    }
    
    private final boolean jj_2_51(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_51();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(50, jj_la);
        }
    }
    
    private final boolean jj_2_52(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_52();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(51, jj_la);
        }
    }
    
    private final boolean jj_2_53(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_53();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(52, jj_la);
        }
    }
    
    private final boolean jj_2_54(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_54();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(53, jj_la);
        }
    }
    
    private final boolean jj_2_55(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_55();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(54, jj_la);
        }
    }
    
    private final boolean jj_2_56(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_56();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(55, jj_la);
        }
    }
    
    private final boolean jj_2_57(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_57();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(56, jj_la);
        }
    }
    
    private final boolean jj_2_58(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_58();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(57, jj_la);
        }
    }
    
    private final boolean jj_2_59(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_59();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(58, jj_la);
        }
    }
    
    private final boolean jj_2_60(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_60();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(59, jj_la);
        }
    }
    
    private final boolean jj_2_61(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_61();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(60, jj_la);
        }
    }
    
    private final boolean jj_2_62(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_62();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(61, jj_la);
        }
    }
    
    private final boolean jj_2_63(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_63();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(62, jj_la);
        }
    }
    
    private final boolean jj_2_64(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_64();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(63, jj_la);
        }
    }
    
    private final boolean jj_2_65(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_65();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(64, jj_la);
        }
    }
    
    private final boolean jj_2_66(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_66();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(65, jj_la);
        }
    }
    
    private final boolean jj_2_67(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_67();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(66, jj_la);
        }
    }
    
    private final boolean jj_2_68(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_68();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(67, jj_la);
        }
    }
    
    private final boolean jj_2_69(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_69();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(68, jj_la);
        }
    }
    
    private final boolean jj_2_70(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_70();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(69, jj_la);
        }
    }
    
    private final boolean jj_2_71(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_71();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(70, jj_la);
        }
    }
    
    private final boolean jj_2_72(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_72();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(71, jj_la);
        }
    }
    
    private final boolean jj_2_73(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_73();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(72, jj_la);
        }
    }
    
    private final boolean jj_2_74(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_74();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(73, jj_la);
        }
    }
    
    private final boolean jj_2_75(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_75();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(74, jj_la);
        }
    }
    
    private final boolean jj_2_76(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_76();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(75, jj_la);
        }
    }
    
    private final boolean jj_2_77(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_77();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(76, jj_la);
        }
    }
    
    private final boolean jj_2_78(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_78();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(77, jj_la);
        }
    }
    
    private final boolean jj_2_79(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_79();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(78, jj_la);
        }
    }
    
    private final boolean jj_2_80(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_80();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(79, jj_la);
        }
    }
    
    private final boolean jj_2_81(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_81();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(80, jj_la);
        }
    }
    
    private final boolean jj_2_82(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_82();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(81, jj_la);
        }
    }
    
    private final boolean jj_2_83(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_83();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(82, jj_la);
        }
    }
    
    private final boolean jj_2_84(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_84();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(83, jj_la);
        }
    }
    
    private final boolean jj_2_85(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_85();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(84, jj_la);
        }
    }
    
    private final boolean jj_2_86(final int jj_la) {
        this.jj_la = jj_la;
        final Token token = this.token;
        this.jj_scanpos = token;
        this.jj_lastpos = token;
        try {
            return !this.jj_3_86();
        }
        catch (LookaheadSuccess lookaheadSuccess) {
            return true;
        }
        finally {
            this.jj_save(85, jj_la);
        }
    }
    
    private final boolean jj_3R_164() {
        return this.jj_scan_token(93);
    }
    
    private final boolean jj_3_63() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_399() {
        return this.jj_scan_token(157);
    }
    
    private final boolean jj_3_42() {
        return this.jj_3R_84();
    }
    
    private final boolean jj_3R_398() {
        return this.jj_scan_token(286);
    }
    
    private final boolean jj_3_55() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(72)) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_52() {
        return this.jj_3R_126();
    }
    
    private final boolean jj_3R_163() {
        return this.jj_3R_241();
    }
    
    private final boolean jj_3R_397() {
        return this.jj_scan_token(311);
    }
    
    private final boolean jj_3R_321() {
        return this.jj_scan_token(226);
    }
    
    private final boolean jj_3R_309() {
        return this.jj_scan_token(261);
    }
    
    private final boolean jj_3R_162() {
        return this.jj_3R_240();
    }
    
    private final boolean jj_3R_396() {
        return this.jj_scan_token(270);
    }
    
    private final boolean jj_3R_390() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_396()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_397()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_398()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_399()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_400()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_308() {
        return this.jj_scan_token(88);
    }
    
    private final boolean jj_3R_246() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_308()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_309()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_233() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(190)) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_280();
    }
    
    private final boolean jj_3R_132() {
        return this.jj_scan_token(195);
    }
    
    private final boolean jj_3R_320() {
        return this.jj_scan_token(112);
    }
    
    private final boolean jj_3R_131() {
        return this.jj_scan_token(195);
    }
    
    private final boolean jj_3R_130() {
        return this.jj_scan_token(190);
    }
    
    private final boolean jj_3R_125() {
        return this.jj_scan_token(137);
    }
    
    private final boolean jj_3R_80() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_161()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_162()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_163()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3_42()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_164()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_165()) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_3R_166()) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_3R_167()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_161() {
        return this.jj_scan_token(362);
    }
    
    private final boolean jj_3R_319() {
        return this.jj_scan_token(256);
    }
    
    private final boolean jj_3R_253() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_319()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_320()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_321()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_187() {
        return this.jj_scan_token(447);
    }
    
    private final boolean jj_3R_119() {
        return this.jj_scan_token(106);
    }
    
    private final boolean jj_3R_58() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_130()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 195 && this.getToken(2).kind == 97);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_131()) {
                this.jj_scanpos = jj_scanpos;
                this.lookingAhead = true;
                this.jj_semLA = (this.getToken(1).kind == 195 && this.getToken(2).kind == 220);
                this.lookingAhead = false;
                if (!this.jj_semLA || this.jj_3R_132()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_91() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_54()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_187()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_54() {
        return this.jj_3R_92();
    }
    
    private final boolean jj_3R_373() {
        return this.jj_3R_254();
    }
    
    private final boolean jj_3R_79() {
        return this.jj_3R_160();
    }
    
    private final boolean jj_3R_238() {
        return this.jj_scan_token(188);
    }
    
    private final boolean jj_3R_372() {
        return this.jj_3R_253();
    }
    
    private final boolean jj_3R_358() {
        return this.jj_3R_386();
    }
    
    private final boolean jj_3R_51() {
        return this.jj_3R_125();
    }
    
    private final boolean jj_3_3() {
        return this.jj_3R_44();
    }
    
    private final boolean jj_3_2() {
        return this.jj_3R_43();
    }
    
    private final boolean jj_3R_50() {
        return this.jj_3R_124();
    }
    
    private final boolean jj_3R_149() {
        return this.jj_3R_233();
    }
    
    private final boolean jj_3R_371() {
        return this.jj_3R_388();
    }
    
    private final boolean jj_3R_346() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_371()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_372()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_373()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_53() {
        return this.jj_3R_91();
    }
    
    private final boolean jj_3_41() {
        return this.jj_3R_83();
    }
    
    private final boolean jj_3_15() {
        return this.jj_3R_58();
    }
    
    private final boolean jj_3_34() {
        return this.jj_3R_79();
    }
    
    private final boolean jj_3_40() {
        return this.jj_3R_82();
    }
    
    private final boolean jj_3_1() {
        return this.jj_3R_42();
    }
    
    private final boolean jj_3R_49() {
        return this.jj_3R_123();
    }
    
    private final boolean jj_3R_48() {
        return this.jj_3R_122();
    }
    
    private final boolean jj_3R_47() {
        return this.jj_3R_121();
    }
    
    private final boolean jj_3R_386() {
        return this.jj_3R_160();
    }
    
    private final boolean jj_3R_46() {
        return this.jj_3R_120();
    }
    
    private final boolean jj_3R_45() {
        return this.jj_3R_119();
    }
    
    private final boolean jj_3R_382() {
        return this.jj_scan_token(140);
    }
    
    private final boolean jj_3R_122() {
        return this.jj_scan_token(118);
    }
    
    private final boolean jj_3R_77() {
        return this.jj_3R_149();
    }
    
    private final boolean jj_3_4() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_45()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_46()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_47()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_48()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_49()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3_1()) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_3R_50()) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_3_2()) {
                                        this.jj_scanpos = jj_scanpos;
                                        if (this.jj_3_3()) {
                                            this.jj_scanpos = jj_scanpos;
                                            if (this.jj_3R_51()) {
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_381() {
        return this.jj_scan_token(249);
    }
    
    private final boolean jj_3R_355() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_381()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_382()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_270() {
        return this.jj_3R_337();
    }
    
    private final boolean jj_3R_237() {
        return this.jj_scan_token(87);
    }
    
    private final boolean jj_3R_61() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3R_72() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(72)) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_289() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(65)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(66)) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_scan_token(67)) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_scan_token(68)) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_scan_token(69)) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_scan_token(70)) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_scan_token(71)) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_scan_token(72)) {
                                        this.jj_scanpos = jj_scanpos;
                                        if (this.jj_scan_token(73)) {
                                            this.jj_scanpos = jj_scanpos;
                                            if (this.jj_scan_token(74)) {
                                                this.jj_scanpos = jj_scanpos;
                                                if (this.jj_scan_token(75)) {
                                                    this.jj_scanpos = jj_scanpos;
                                                    if (this.jj_scan_token(76)) {
                                                        this.jj_scanpos = jj_scanpos;
                                                        if (this.jj_scan_token(77)) {
                                                            this.jj_scanpos = jj_scanpos;
                                                            if (this.jj_scan_token(78)) {
                                                                this.jj_scanpos = jj_scanpos;
                                                                if (this.jj_scan_token(79)) {
                                                                    this.jj_scanpos = jj_scanpos;
                                                                    if (this.jj_scan_token(81)) {
                                                                        this.jj_scanpos = jj_scanpos;
                                                                        if (this.jj_scan_token(82)) {
                                                                            this.jj_scanpos = jj_scanpos;
                                                                            if (this.jj_scan_token(83)) {
                                                                                this.jj_scanpos = jj_scanpos;
                                                                                if (this.jj_scan_token(84)) {
                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                    if (this.jj_scan_token(85)) {
                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                        if (this.jj_scan_token(86)) {
                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                            if (this.jj_scan_token(87)) {
                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                if (this.jj_scan_token(88)) {
                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                    if (this.jj_scan_token(89)) {
                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                        if (this.jj_scan_token(91)) {
                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                            if (this.jj_scan_token(92)) {
                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                if (this.jj_scan_token(94)) {
                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                    if (this.jj_scan_token(95)) {
                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                        if (this.jj_scan_token(96)) {
                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                            if (this.jj_scan_token(97)) {
                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                if (this.jj_scan_token(98)) {
                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                    if (this.jj_scan_token(99)) {
                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                        if (this.jj_scan_token(100)) {
                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                            if (this.jj_scan_token(101)) {
                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                if (this.jj_scan_token(102)) {
                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                    if (this.jj_scan_token(103)) {
                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                        if (this.jj_scan_token(104)) {
                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                            if (this.jj_scan_token(106)) {
                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                if (this.jj_scan_token(107)) {
                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                    if (this.jj_scan_token(108)) {
                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                        if (this.jj_scan_token(109)) {
                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                            if (this.jj_scan_token(110)) {
                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                if (this.jj_scan_token(111)) {
                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                    if (this.jj_scan_token(112)) {
                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                        if (this.jj_scan_token(113)) {
                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                            if (this.jj_scan_token(115)) {
                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                if (this.jj_scan_token(116)) {
                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                    if (this.jj_scan_token(117)) {
                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                        if (this.jj_scan_token(118)) {
                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                            if (this.jj_scan_token(119)) {
                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                if (this.jj_scan_token(120)) {
                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                    if (this.jj_scan_token(121)) {
                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                        if (this.jj_scan_token(122)) {
                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                            if (this.jj_scan_token(123)) {
                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                if (this.jj_scan_token(124)) {
                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                    if (this.jj_scan_token(125)) {
                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                        if (this.jj_scan_token(126)) {
                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                            if (this.jj_scan_token(127)) {
                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                if (this.jj_scan_token(128)) {
                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                    if (this.jj_scan_token(129)) {
                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                        if (this.jj_scan_token(130)) {
                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                            if (this.jj_scan_token(131)) {
                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                if (this.jj_scan_token(132)) {
                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                    if (this.jj_scan_token(133)) {
                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                        if (this.jj_scan_token(134)) {
                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                            if (this.jj_scan_token(135)) {
                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                if (this.jj_scan_token(136)) {
                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(137)) {
                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(138)) {
                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(139)) {
                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(140)) {
                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(141)) {
                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(142)) {
                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(143)) {
                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(144)) {
                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(145)) {
                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(146)) {
                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(147)) {
                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(148)) {
                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(149)) {
                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(150)) {
                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(362)) {
                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(151)) {
                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(152)) {
                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(153)) {
                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(154)) {
                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(155)) {
                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(156)) {
                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(157)) {
                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(158)) {
                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(159)) {
                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(160)) {
                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(161)) {
                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(162)) {
                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(163)) {
                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(295)) {
                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(164)) {
                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(165)) {
                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(166)) {
                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(167)) {
                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(168)) {
                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(169)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(170)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(171)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(172)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(173)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(174)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(175)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(176)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(177)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(178)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(179)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(180)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(181)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(182)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(183)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(185)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(186)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(187)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(407)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(188)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(189)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(367)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(190)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(191)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(192)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(193)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(194)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(195)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(196)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(197)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(198)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(199)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(200)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(412)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(201)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(202)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(203)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(204)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(205)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(206)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(207)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(208)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(209)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(210)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(211)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(212)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(213)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(214)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(215)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(216)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(217)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(218)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(219)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(220)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(221)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(222)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(223)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(224)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(225)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(226)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(227)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(228)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(229)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(230)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(231)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(232)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(233)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(234)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(235)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(236)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(237)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(239)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(240)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(241)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(242)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(243)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(247)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(244)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(245)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(246)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(249)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(251)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(252)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(253)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(254)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(255)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(256)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(257)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(259)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(261)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(262)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(263)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(264)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(265)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(267)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(268)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(269)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(270)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(356)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(357)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(359)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(363)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(364)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(366)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(371)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(248)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(372)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(373)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(375)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(377)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(374)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(376)) {
return true;
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_27() {
        return this.jj_3R_72();
    }
    
    private final boolean jj_3_33() {
        return this.jj_3R_78();
    }
    
    private final boolean jj_3R_374() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(181)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(77)) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_scan_token(182)) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_scan_token(236)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_128() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = this.javaClassFollows();
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_223()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_33()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_223() {
        return this.jj_3R_270();
    }
    
    private final boolean jj_3_14() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_262() {
        return this.jj_scan_token(91);
    }
    
    private final boolean jj_3R_71() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3R_288() {
        return this.jj_3R_80();
    }
    
    private final boolean jj_3R_236() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = ((this.getToken(1).kind == 362 || this.getToken(1).kind == 271 || this.getToken(1).kind == 272 || this.getToken(1).kind == 434 || this.getToken(1).kind == 308 || this.getToken(1).kind == 93 || this.getToken(1).kind == 258 || this.getToken(1).kind == 292 || this.getToken(1).kind == 235 || this.getToken(1).kind == 372 || this.getToken(1).kind == 255 || this.getToken(1).kind == 179 || this.getToken(1).kind == 440 || this.getToken(1).kind == 399 || this.getToken(1).kind == 366 || this.getToken(1).kind == 371 || this.getToken(1).kind == 248 || this.getToken(1).kind == 285 || this.getToken(1).kind == 347 || this.getToken(1).kind == 348 || this.getToken(1).kind == 128 || this.getToken(1).kind == 88 || this.getToken(1).kind == 261 || this.getToken(1).kind == 168 || this.getToken(1).kind == 167 || this.getToken(1).kind == 228 || this.getToken(1).kind == 364 || this.getToken(1).kind == 270 || this.getToken(1).kind == 311 || this.getToken(1).kind == 286 || this.getToken(1).kind == 157 || this.getToken(1).kind == 183 || this.getToken(1).kind == 224 || this.getToken(1).kind == 300 || this.getToken(1).kind == 400 || this.getToken(1).kind == 375 || this.getToken(1).kind == 377 || this.getToken(1).kind == 374 || this.getToken(1).kind == 376) && this.getToken(2).kind == 449);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_288()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_40()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3_41()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_307() {
        return this.jj_3R_349();
    }
    
    private final boolean jj_3R_183() {
        return this.jj_3R_248();
    }
    
    private final boolean jj_3R_263() {
        return this.jj_scan_token(481);
    }
    
    private final boolean jj_3R_347() {
        return this.jj_3R_374();
    }
    
    private final boolean jj_3R_306() {
        return this.jj_scan_token(348);
    }
    
    private final boolean jj_3R_88() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_32()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_183()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_32() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3R_261() {
        return this.jj_scan_token(252);
    }
    
    private final boolean jj_3_26() {
        return this.jj_3R_71();
    }
    
    private final boolean jj_3R_341() {
        return this.jj_scan_token(373);
    }
    
    private final boolean jj_3R_305() {
        return this.jj_scan_token(285);
    }
    
    private final boolean jj_3_38() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3R_159() {
        return this.jj_3R_238();
    }
    
    private final boolean jj_3R_158() {
        return this.jj_3R_237();
    }
    
    private final boolean jj_3R_336() {
        return this.jj_scan_token(324);
    }
    
    private final boolean jj_3_49() {
        return this.jj_3R_89();
    }
    
    private final boolean jj_3_62() {
        return this.jj_3R_69();
    }
    
    private final boolean jj_3R_57() {
        return this.jj_3R_129();
    }
    
    private final boolean jj_3R_335() {
        return this.jj_scan_token(220);
    }
    
    private final boolean jj_3R_304() {
        return this.jj_scan_token(347);
    }
    
    private final boolean jj_3R_245() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_304()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_305()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_306()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_307()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_95() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_62()) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_260() {
        return this.jj_scan_token(145);
    }
    
    private final boolean jj_3R_146() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 455 && (this.getToken(3).kind == 451 || (this.getToken(4).kind == 455 && this.getToken(5).kind == 451)));
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_229()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_26()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_229() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3_83() {
        return this.jj_3R_111();
    }
    
    private final boolean jj_3R_334() {
        return this.jj_scan_token(330);
    }
    
    private final boolean jj_3R_269() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_334()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_335()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_336()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_225() {
        return this.jj_3R_263();
    }
    
    private final boolean jj_3R_157() {
        return this.jj_scan_token(449);
    }
    
    private final boolean jj_3R_259() {
        return this.jj_scan_token(208);
    }
    
    private final boolean jj_3R_178() {
        return this.jj_3R_247();
    }
    
    private final boolean jj_3R_339() {
        return this.jj_scan_token(365);
    }
    
    private final boolean jj_3R_185() {
        return this.jj_scan_token(317);
    }
    
    private final boolean jj_3_39() {
        return this.jj_3R_81();
    }
    
    private final boolean jj_3_61() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_70() {
        return this.jj_3R_146();
    }
    
    private final boolean jj_3R_85() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_47()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_178()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_47() {
        return this.jj_3R_68();
    }
    
    private final boolean jj_3R_191() {
        return false;
    }
    
    private final boolean jj_3R_156() {
        return this.jj_3R_236();
    }
    
    private final boolean jj_3R_89() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 175);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_184()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_185()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_184() {
        return this.jj_scan_token(317);
    }
    
    private final boolean jj_3_13() {
        return this.jj_3R_56();
    }
    
    private final boolean jj_3_60() {
        return this.jj_3R_96();
    }
    
    private final boolean jj_3R_129() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_224()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_225()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3_83()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_224() {
        return this.jj_scan_token(475);
    }
    
    private final boolean jj_3R_258() {
        return this.jj_scan_token(100);
    }
    
    private final boolean jj_3R_143() {
        return this.jj_scan_token(128);
    }
    
    private final boolean jj_3_25() {
        return this.jj_3R_70();
    }
    
    private final boolean jj_3R_212() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 100);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_258()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 208);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_259()) {
                this.jj_scanpos = jj_scanpos;
                this.lookingAhead = true;
                this.jj_semLA = (this.getToken(1).kind == 145);
                this.lookingAhead = false;
                if (!this.jj_semLA || this.jj_3R_260()) {
                    this.jj_scanpos = jj_scanpos;
                    this.lookingAhead = true;
                    this.jj_semLA = (this.getToken(1).kind == 252);
                    this.lookingAhead = false;
                    if (!this.jj_semLA || this.jj_3R_261()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_262()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_155() {
        return this.jj_3R_235();
    }
    
    private final boolean jj_3R_96() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 449 || this.getToken(2).kind == 475);
        this.lookingAhead = false;
        return !this.jj_semLA || this.jj_3R_191() || this.jj_scan_token(368);
    }
    
    private final boolean jj_3R_68() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 323);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_143()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(128)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_393() {
        return this.jj_scan_token(138);
    }
    
    private final boolean jj_3R_344() {
        return this.jj_3R_83();
    }
    
    private final boolean jj_3R_279() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 455 && this.getToken(4).kind == 449);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_344()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_13()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_23() {
        return this.jj_3R_68();
    }
    
    private final boolean jj_3R_154() {
        return this.jj_3R_189();
    }
    
    private final boolean jj_3R_109() {
        return this.jj_3R_212();
    }
    
    private final boolean jj_3R_287() {
        return this.jj_scan_token(370);
    }
    
    private final boolean jj_3_59() {
        return this.jj_3R_96();
    }
    
    private final boolean jj_3R_153() {
        return this.jj_3R_234();
    }
    
    private final boolean jj_3R_142() {
        return this.jj_scan_token(214);
    }
    
    private final boolean jj_3R_286() {
        return this.jj_3R_347();
    }
    
    private final boolean jj_3R_152() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_232() {
        return this.jj_scan_token(455);
    }
    
    private final boolean jj_3_58() {
        return this.jj_3R_95();
    }
    
    private final boolean jj_3R_151() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_182() {
        return this.jj_scan_token(424);
    }
    
    private final boolean jj_3R_145() {
        return this.jj_scan_token(66);
    }
    
    private final boolean jj_3R_78() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = this.escapedValueFunctionFollows();
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_150()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(2).kind == 222 || this.getToken(2).kind == 432);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_151()) {
                this.jj_scanpos = jj_scanpos;
                this.lookingAhead = true;
                this.jj_semLA = (this.getToken(2).kind == 172);
                this.lookingAhead = false;
                if (!this.jj_semLA || this.jj_3R_152()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_153()) {
                        this.jj_scanpos = jj_scanpos;
                        this.lookingAhead = true;
                        this.jj_semLA = this.newInvocationFollows(1);
                        this.lookingAhead = false;
                        if (!this.jj_semLA || this.jj_3R_154()) {
                            this.jj_scanpos = jj_scanpos;
                            this.lookingAhead = true;
                            this.jj_semLA = this.windowOrAggregateFunctionFollows();
                            this.lookingAhead = false;
                            if (!this.jj_semLA || this.jj_3R_155()) {
                                this.jj_scanpos = jj_scanpos;
                                this.lookingAhead = true;
                                this.jj_semLA = this.miscBuiltinFollows();
                                this.lookingAhead = false;
                                if (!this.jj_semLA || this.jj_3R_156()) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_3_39()) {
                                        this.jj_scanpos = jj_scanpos;
                                        if (this.jj_3R_157()) {
                                            this.jj_scanpos = jj_scanpos;
                                            if (this.jj_3R_158()) {
                                                this.jj_scanpos = jj_scanpos;
                                                if (this.jj_3R_159()) {
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_150() {
        return this.jj_scan_token(447);
    }
    
    private final boolean jj_3R_87() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 428);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_181()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_182()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_181() {
        return this.jj_scan_token(424);
    }
    
    private final boolean jj_3R_285() {
        return this.jj_scan_token(105);
    }
    
    private final boolean jj_3R_235() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_285()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_286()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_287()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_69() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 127 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_144()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 66 && this.getToken(2).kind != 455 && this.getToken(2).kind != 458);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_145()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_144() {
        return this.jj_scan_token(127);
    }
    
    private final boolean jj_3R_67() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_141()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_142()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3_23()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_141() {
        return this.jj_scan_token(143);
    }
    
    private final boolean jj_3R_385() {
        return this.jj_3R_388();
    }
    
    private final boolean jj_3R_395() {
        return this.jj_scan_token(366);
    }
    
    private final boolean jj_3R_353() {
        return this.jj_scan_token(486);
    }
    
    private final boolean jj_3_24() {
        return this.jj_3R_69();
    }
    
    private final boolean jj_3R_148() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(3).kind == 449);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_231()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_232()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_231() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(473)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(455)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_394() {
        return this.jj_scan_token(371);
    }
    
    private final boolean jj_3R_389() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_394()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_395()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_173() {
        return this.jj_scan_token(111);
    }
    
    private final boolean jj_3R_404() {
        return this.jj_scan_token(225);
    }
    
    private final boolean jj_3R_312() {
        return this.jj_scan_token(364);
    }
    
    private final boolean jj_3R_384() {
        return this.jj_scan_token(357);
    }
    
    private final boolean jj_3R_357() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_384()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_385()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_311() {
        return this.jj_scan_token(228);
    }
    
    private final boolean jj_3R_76() {
        return this.jj_3R_148();
    }
    
    private final boolean jj_3R_180() {
        return this.jj_scan_token(83);
    }
    
    private final boolean jj_3R_172() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_352() {
        return this.jj_scan_token(485);
    }
    
    private final boolean jj_3R_310() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(168)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(167)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_247() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_310()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_311()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_312()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_86() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 418);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_179()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_180()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_179() {
        return this.jj_scan_token(83);
    }
    
    private final boolean jj_3_31() {
        return this.jj_3R_76();
    }
    
    private final boolean jj_3R_171() {
        return this.jj_scan_token(110);
    }
    
    private final boolean jj_3R_403() {
        return this.jj_3R_405();
    }
    
    private final boolean jj_3R_333() {
        return this.jj_scan_token(447);
    }
    
    private final boolean jj_3R_277() {
        return this.jj_3R_247();
    }
    
    private final boolean jj_3R_332() {
        return this.jj_3R_357();
    }
    
    private final boolean jj_3R_56() {
        return this.jj_3R_128();
    }
    
    private final boolean jj_3R_402() {
        return this.jj_3R_404();
    }
    
    private final boolean jj_3R_401() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_402()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_403()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_170() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_268() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_332()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_333()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_169() {
        return this.jj_scan_token(109);
    }
    
    private final boolean jj_3R_369() {
        return this.jj_scan_token(454);
    }
    
    private final boolean jj_3_36() {
        return this.jj_scan_token(147);
    }
    
    private final boolean jj_3R_186() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_368() {
        return this.jj_scan_token(452);
    }
    
    private final boolean jj_3R_343() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_368()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_369()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_37() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_82() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 108 && this.getToken(2).kind == 285);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_168()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_169()) {
                this.jj_scanpos = jj_scanpos;
                this.lookingAhead = true;
                this.jj_semLA = (this.getToken(1).kind == 108 && this.getToken(2).kind == 347);
                this.lookingAhead = false;
                if (!this.jj_semLA || this.jj_3R_170()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_171()) {
                        this.jj_scanpos = jj_scanpos;
                        this.lookingAhead = true;
                        this.jj_semLA = (this.getToken(1).kind == 108 && this.getToken(2).kind == 348);
                        this.lookingAhead = false;
                        if (!this.jj_semLA || this.jj_3R_172()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_173()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_168() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_118() {
        return this.jj_scan_token(218);
    }
    
    private final boolean jj_3_77() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3_11() {
        return this.jj_3R_54();
    }
    
    private final boolean jj_3R_90() {
        return this.jj_3R_186();
    }
    
    private final boolean jj_3R_342() {
        return this.jj_scan_token(193);
    }
    
    private final boolean jj_3R_276() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_342()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(117)) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_scan_token(116)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_228() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_276()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_277()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_110() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(96)) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_59();
    }
    
    private final boolean jj_3_46() {
        return this.jj_3R_86();
    }
    
    private final boolean jj_3R_376() {
        return this.jj_scan_token(248);
    }
    
    private final boolean jj_3_52() {
        return this.jj_3R_90();
    }
    
    private final boolean jj_3R_44() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 218 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 195)) || this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind)));
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_117()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 218 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && !this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 147)) || !this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind)));
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_118()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_117() {
        return this.jj_scan_token(218);
    }
    
    private final boolean jj_3R_375() {
        return this.jj_3R_389();
    }
    
    private final boolean jj_3R_348() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_375()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_376()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_392() {
        return this.jj_scan_token(449);
    }
    
    private final boolean jj_3R_391() {
        return this.jj_3R_401();
    }
    
    private final boolean jj_3R_383() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_391()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_392()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_278() {
        return this.jj_3R_343();
    }
    
    private final boolean jj_3R_405() {
        return this.jj_scan_token(259);
    }
    
    private final boolean jj_3_12() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3_22() {
        return this.jj_3R_67();
    }
    
    private final boolean jj_3R_66() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_140()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_22()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_140() {
        return this.jj_3R_228();
    }
    
    private final boolean jj_3R_230() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_278()) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_279();
    }
    
    private final boolean jj_3R_367() {
        return this.jj_scan_token(185);
    }
    
    private final boolean jj_3R_108() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(96)) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_366() {
        return this.jj_3R_227();
    }
    
    private final boolean jj_3R_299() {
        return this.jj_scan_token(400);
    }
    
    private final boolean jj_3R_298() {
        return this.jj_3R_348();
    }
    
    private final boolean jj_3R_365() {
        return this.jj_scan_token(80);
    }
    
    private final boolean jj_3_86() {
        return this.jj_3R_111();
    }
    
    private final boolean jj_3R_81() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_364() {
        return this.jj_scan_token(315);
    }
    
    private final boolean jj_3R_214() {
        return this.jj_3R_263();
    }
    
    private final boolean jj_3R_297() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(440)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(399)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_363() {
        return this.jj_scan_token(278);
    }
    
    private final boolean jj_3R_354() {
        return this.jj_scan_token(447);
    }
    
    private final boolean jj_3R_112() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_213()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_214()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3_86()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_213() {
        return this.jj_scan_token(475);
    }
    
    private final boolean jj_3R_362() {
        return this.jj_scan_token(275);
    }
    
    private final boolean jj_3R_296() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(255)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(179)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_315() {
        return this.jj_scan_token(189);
    }
    
    private final boolean jj_3R_295() {
        return this.jj_scan_token(372);
    }
    
    private final boolean jj_3R_241() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_295()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_296()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_297()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_298()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_299()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_314() {
        return this.jj_scan_token(283);
    }
    
    private final boolean jj_3R_251() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_314()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_315()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_340() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_362()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_363()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_364()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_365()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_366()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_367()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_80() {
        return this.jj_3R_110();
    }
    
    private final boolean jj_3R_284() {
        return this.jj_scan_token(86);
    }
    
    private final boolean jj_3R_267() {
        return this.jj_scan_token(254);
    }
    
    private final boolean jj_3_85() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_378() {
        return this.jj_scan_token(224);
    }
    
    private final boolean jj_3_44() {
        return this.jj_3R_86();
    }
    
    private final boolean jj_3R_377() {
        return this.jj_3R_390();
    }
    
    private final boolean jj_3R_349() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_377()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_378()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_10() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3R_196() {
        return this.jj_3R_251();
    }
    
    private final boolean jj_3R_102() {
        return this.jj_scan_token(189);
    }
    
    private final boolean jj_3R_147() {
        return this.jj_3R_230();
    }
    
    private final boolean jj_3R_239() {
        return this.jj_3R_289();
    }
    
    private final boolean jj_3R_139() {
        return this.jj_scan_token(407);
    }
    
    private final boolean jj_3R_101() {
        return this.jj_scan_token(307);
    }
    
    private final boolean jj_3R_283() {
        return this.jj_scan_token(192);
    }
    
    private final boolean jj_3_82() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3_84() {
        return this.jj_3R_112();
    }
    
    private final boolean jj_3R_160() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_84()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_239()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_68() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_101()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(2).kind == 307);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_102()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_100() {
        return this.jj_scan_token(189);
    }
    
    private final boolean jj_3R_282() {
        return this.jj_3R_346();
    }
    
    private final boolean jj_3R_99() {
        return this.jj_scan_token(306);
    }
    
    private final boolean jj_3R_281() {
        return this.jj_3R_255();
    }
    
    private final boolean jj_3R_138() {
        return this.jj_scan_token(187);
    }
    
    private final boolean jj_3_67() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_99()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(2).kind == 306);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_100()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_234() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_281()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_282()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_283()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_284()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_45() {
        return this.jj_3R_87();
    }
    
    private final boolean jj_3R_195() {
        return this.jj_scan_token(293);
    }
    
    private final boolean jj_3R_194() {
        return this.jj_scan_token(343);
    }
    
    private final boolean jj_3R_356() {
        return this.jj_3R_383();
    }
    
    private final boolean jj_3R_193() {
        return this.jj_scan_token(72);
    }
    
    private final boolean jj_3R_137() {
        return this.jj_scan_token(185);
    }
    
    private final boolean jj_3R_98() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_193()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_194()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_195()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3_67()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3_68()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_196()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_266() {
        return this.jj_scan_token(166);
    }
    
    private final boolean jj_3_51() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3R_380() {
        return this.jj_scan_token(487);
    }
    
    private final boolean jj_3R_65() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_137()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_138()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_139()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_379() {
        return this.jj_scan_token(482);
    }
    
    private final boolean jj_3R_351() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_379()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_380()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_331() {
        return this.jj_3R_356();
    }
    
    private final boolean jj_3_71() {
        return this.jj_3R_105();
    }
    
    private final boolean jj_3R_265() {
        return this.jj_3R_331();
    }
    
    private final boolean jj_3R_73() {
        return this.jj_3R_147();
    }
    
    private final boolean jj_3R_227() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(88)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(89)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_66() {
        return this.jj_3R_98();
    }
    
    private final boolean jj_3R_337() {
        return this.jj_3R_358();
    }
    
    private final boolean jj_3_76() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_294() {
        return this.jj_scan_token(292);
    }
    
    private final boolean jj_3_81() {
        return this.jj_3R_105();
    }
    
    private final boolean jj_3R_293() {
        return this.jj_scan_token(308);
    }
    
    private final boolean jj_3R_199() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_222() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_127() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(222)) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 108 && (this.getToken(2).kind == 222 || this.getToken(2).kind == 432));
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_222()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_104() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_199()) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_60();
    }
    
    private final boolean jj_3R_292() {
        return this.jj_scan_token(434);
    }
    
    private final boolean jj_3R_136() {
        return this.jj_3R_227();
    }
    
    private final boolean jj_3R_291() {
        return this.jj_scan_token(272);
    }
    
    private final boolean jj_3R_244() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3R_53() {
        return this.jj_3R_127();
    }
    
    private final boolean jj_3R_313() {
        return this.jj_scan_token(449);
    }
    
    private final boolean jj_3R_135() {
        return this.jj_scan_token(261);
    }
    
    private final boolean jj_3R_326() {
        return this.jj_3R_355();
    }
    
    private final boolean jj_3R_290() {
        return this.jj_scan_token(271);
    }
    
    private final boolean jj_3R_240() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_290()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_291()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_292()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_293()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_294()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_70() {
        return this.jj_3R_104();
    }
    
    private final boolean jj_3R_325() {
        return this.jj_3R_354();
    }
    
    private final boolean jj_3R_63() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_135()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_136()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_324() {
        return this.jj_3R_353();
    }
    
    private final boolean jj_3R_323() {
        return this.jj_3R_352();
    }
    
    private final boolean jj_3R_55() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_350() {
        return this.jj_3R_343();
    }
    
    private final boolean jj_3R_275() {
        return this.jj_3R_341();
    }
    
    private final boolean jj_3R_322() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_350()) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_351();
    }
    
    private final boolean jj_3R_274() {
        return this.jj_3R_340();
    }
    
    private final boolean jj_3R_255() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_322()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_323()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_324()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_325()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_326()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_273() {
        return this.jj_3R_339();
    }
    
    private final boolean jj_3_9() {
        return this.jj_3R_54();
    }
    
    private final boolean jj_3R_64() {
        return false;
    }
    
    private final boolean jj_3R_243() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3R_62() {
        return false;
    }
    
    private final boolean jj_3R_271() {
        return this.jj_3R_338();
    }
    
    private final boolean jj_3_21() {
        return this.jj_3R_66();
    }
    
    private final boolean jj_3_75() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_361() {
        return this.jj_scan_token(348);
    }
    
    private final boolean jj_3_65() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_272() {
        return this.jj_scan_token(356);
    }
    
    private final boolean jj_3_20() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(3).kind != 299);
        this.lookingAhead = false;
        return !this.jj_semLA || this.jj_3R_64() || this.jj_3R_65();
    }
    
    private final boolean jj_3R_75() {
        return this.jj_scan_token(447);
    }
    
    private final boolean jj_3R_205() {
        return this.jj_3R_255();
    }
    
    private final boolean jj_3R_74() {
        return this.jj_scan_token(133);
    }
    
    private final boolean jj_3_30() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_74()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 447 && this.getToken(2).kind != 302);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_75()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_19() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind != 299);
        this.lookingAhead = false;
        return !this.jj_semLA || this.jj_3R_62() || this.jj_3R_63();
    }
    
    private final boolean jj_3_73() {
        return this.jj_3R_82();
    }
    
    private final boolean jj_3R_175() {
        return this.jj_3R_244();
    }
    
    private final boolean jj_3R_83() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = !this.distinctUDAFollows();
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_174()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = this.distinctUDAFollows();
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_175()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_174() {
        return this.jj_3R_243();
    }
    
    private final boolean jj_3_79() {
        return this.jj_3R_109();
    }
    
    private final boolean jj_3R_360() {
        return this.jj_scan_token(347);
    }
    
    private final boolean jj_3_78() {
        return this.jj_3R_108();
    }
    
    private final boolean jj_3_48() {
        return this.jj_3R_88();
    }
    
    private final boolean jj_3R_226() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_19()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_20()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3_21()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_271()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_272()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_273()) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_3R_274()) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_3R_275()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_359() {
        return this.jj_scan_token(285);
    }
    
    private final boolean jj_3R_338() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_359()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_360()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_361()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_318() {
        return this.jj_scan_token(295);
    }
    
    private final boolean jj_3R_317() {
        return this.jj_scan_token(412);
    }
    
    private final boolean jj_3R_316() {
        return this.jj_scan_token(160);
    }
    
    private final boolean jj_3R_252() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_316()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_317()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_318()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_18() {
        return this.jj_3R_61();
    }
    
    private final boolean jj_3R_204() {
        return this.jj_3R_236();
    }
    
    private final boolean jj_3_29() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_197() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_252()) {
            this.jj_scanpos = jj_scanpos;
        }
        return false;
    }
    
    private final boolean jj_3R_203() {
        return this.jj_3R_236();
    }
    
    private final boolean jj_3R_111() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(271)) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(272)) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_scan_token(273)) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_scan_token(378)) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_scan_token(379)) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_scan_token(274)) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_scan_token(380)) {
                                    this.jj_scanpos = jj_scanpos;
                                    if (this.jj_scan_token(80)) {
                                        this.jj_scanpos = jj_scanpos;
                                        if (this.jj_scan_token(275)) {
                                            this.jj_scanpos = jj_scanpos;
                                            if (this.jj_scan_token(276)) {
                                                this.jj_scanpos = jj_scanpos;
                                                if (this.jj_scan_token(277)) {
                                                    this.jj_scanpos = jj_scanpos;
                                                    if (this.jj_scan_token(381)) {
                                                        this.jj_scanpos = jj_scanpos;
                                                        if (this.jj_scan_token(278)) {
                                                            this.jj_scanpos = jj_scanpos;
                                                            if (this.jj_scan_token(93)) {
                                                                this.jj_scanpos = jj_scanpos;
                                                                if (this.jj_scan_token(279)) {
                                                                    this.jj_scanpos = jj_scanpos;
                                                                    if (this.jj_scan_token(280)) {
                                                                        this.jj_scanpos = jj_scanpos;
                                                                        if (this.jj_scan_token(382)) {
                                                                            this.jj_scanpos = jj_scanpos;
                                                                            if (this.jj_scan_token(281)) {
                                                                                this.jj_scanpos = jj_scanpos;
                                                                                if (this.jj_scan_token(282)) {
                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                    if (this.jj_scan_token(383)) {
                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                        if (this.jj_scan_token(105)) {
                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                            if (this.jj_scan_token(384)) {
                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                if (this.jj_scan_token(358)) {
                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                    if (this.jj_scan_token(360)) {
                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                        if (this.jj_scan_token(283)) {
                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                            if (this.jj_scan_token(114)) {
                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                if (this.jj_scan_token(284)) {
                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                    if (this.jj_scan_token(285)) {
                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                        if (this.jj_scan_token(286)) {
                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                            if (this.jj_scan_token(389)) {
                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                if (this.jj_scan_token(390)) {
                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                    if (this.jj_scan_token(289)) {
                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                        if (this.jj_scan_token(361)) {
                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                            if (this.jj_scan_token(386)) {
                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                if (this.jj_scan_token(387)) {
                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                    if (this.jj_scan_token(388)) {
                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                        if (this.jj_scan_token(391)) {
                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                            if (this.jj_scan_token(392)) {
                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                if (this.jj_scan_token(393)) {
                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                    if (this.jj_scan_token(394)) {
                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                        if (this.jj_scan_token(395)) {
                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                            if (this.jj_scan_token(290)) {
                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                if (this.jj_scan_token(291)) {
                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                    if (this.jj_scan_token(292)) {
                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                        if (this.jj_scan_token(293)) {
                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                            if (this.jj_scan_token(396)) {
                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                if (this.jj_scan_token(294)) {
                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                    if (this.jj_scan_token(397)) {
                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                        if (this.jj_scan_token(296)) {
                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                            if (this.jj_scan_token(398)) {
                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                if (this.jj_scan_token(298)) {
                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                    if (this.jj_scan_token(299)) {
                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                        if (this.jj_scan_token(399)) {
                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                            if (this.jj_scan_token(300)) {
                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                if (this.jj_scan_token(301)) {
                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                    if (this.jj_scan_token(302)) {
                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                        if (this.jj_scan_token(400)) {
                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                            if (this.jj_scan_token(401)) {
                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                if (this.jj_scan_token(303)) {
                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                    if (this.jj_scan_token(304)) {
                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                        if (this.jj_scan_token(305)) {
                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                            if (this.jj_scan_token(365)) {
                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                if (this.jj_scan_token(306)) {
                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                    if (this.jj_scan_token(307)) {
                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                        if (this.jj_scan_token(402)) {
                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                            if (this.jj_scan_token(403)) {
                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                if (this.jj_scan_token(308)) {
                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(404)) {
                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(309)) {
                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(310)) {
                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(184)) {
                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(311)) {
                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(312)) {
                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(313)) {
                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(314)) {
                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(315)) {
                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(405)) {
                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(406)) {
                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(316)) {
                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(317)) {
                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(318)) {
                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(319)) {
                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(409)) {
                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                    this.lookingAhead = true;
                                                                                                                                                                                                                                                                                                                                                    this.jj_semLA = (this.getToken(1).kind == 320 && !this.seeingOffsetClause());
                                                                                                                                                                                                                                                                                                                                                    this.lookingAhead = false;
                                                                                                                                                                                                                                                                                                                                                    if (!this.jj_semLA || this.jj_scan_token(320)) {
                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(410)) {
                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(411)) {
                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(408)) {
                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(368)) {
                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(321)) {
                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(414)) {
                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(322)) {
                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(323)) {
                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(415)) {
                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(416)) {
                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(417)) {
                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(418)) {
                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(324)) {
                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(420)) {
                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(325)) {
                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(419)) {
                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(421)) {
                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(326)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(422)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(423)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(424)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(327)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(369)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(328)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(329)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(370)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(425)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(426)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(331)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(330)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(332)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(428)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(429)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(333)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(430)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(431)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(433)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(432)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(334)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(335)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(336)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(337)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(338)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(339)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(340)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(341)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(342)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(434)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(435)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(343)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (this.jj_scan_token(344)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(427)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(436)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(345)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(437)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(238)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(346)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(347)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(348)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (this.jj_scan_token(349)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(350)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(438)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(351)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(439)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(250)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(352)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(440)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(353)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(441)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (this.jj_scan_token(354)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(258)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(260)) {
this.jj_scanpos = jj_scanpos;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (this.jj_scan_token(413)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(355)) {
this.jj_scanpos = jj_scanpos;
if (this.jj_scan_token(442)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_202() {
        return this.jj_3R_254();
    }
    
    private final boolean jj_3R_198() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3R_201() {
        return this.jj_3R_253();
    }
    
    private final boolean jj_3R_105() {
        return this.jj_3R_60();
    }
    
    private final boolean jj_3R_103() {
        if (this.jj_3R_197()) {
            return true;
        }
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_198()) {
            this.jj_scanpos = jj_scanpos;
        }
        return this.jj_3R_60();
    }
    
    private final boolean jj_3R_106() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(2).kind == 222 || this.getToken(2).kind == 432);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_200()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_201()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_202()) {
                    this.jj_scanpos = jj_scanpos;
                    this.lookingAhead = true;
                    this.jj_semLA = (this.getToken(1).kind == 285 || this.getToken(1).kind == 347 || this.getToken(1).kind == 348);
                    this.lookingAhead = false;
                    if (!this.jj_semLA || this.jj_3R_203()) {
                        this.jj_scanpos = jj_scanpos;
                        this.lookingAhead = true;
                        this.jj_semLA = (this.getToken(2).kind == 449 || (this.getToken(4).kind == 449 && this.getToken(2).kind != 453));
                        this.lookingAhead = false;
                        if (!this.jj_semLA || this.jj_3R_204()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3_73()) {
                                this.jj_scanpos = jj_scanpos;
                                if (this.jj_3R_205()) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_200() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_250() {
        return this.jj_scan_token(449);
    }
    
    private final boolean jj_3R_264() {
        return this.jj_scan_token(122);
    }
    
    private final boolean jj_3_69() {
        return this.jj_3R_103();
    }
    
    private final boolean jj_3R_134() {
        return this.jj_3R_61();
    }
    
    private final boolean jj_3R_60() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = this.commonDatatypeName(false);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_133()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind != 291);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_134()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_133() {
        return this.jj_3R_226();
    }
    
    private final boolean jj_3R_303() {
        return this.jj_scan_token(376);
    }
    
    private final boolean jj_3R_220() {
        return this.jj_3R_269();
    }
    
    private final boolean jj_3R_302() {
        return this.jj_scan_token(374);
    }
    
    private final boolean jj_3R_219() {
        return this.jj_3R_268();
    }
    
    private final boolean jj_3R_301() {
        return this.jj_scan_token(377);
    }
    
    private final boolean jj_3R_249() {
        return this.jj_3R_313();
    }
    
    private final boolean jj_3R_218() {
        return this.jj_3R_267();
    }
    
    private final boolean jj_3R_300() {
        return this.jj_scan_token(375);
    }
    
    private final boolean jj_3R_242() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_300()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_301()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_302()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_303()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_72() {
        return this.jj_3R_106();
    }
    
    private final boolean jj_3R_217() {
        return this.jj_3R_266();
    }
    
    private final boolean jj_3R_216() {
        return this.jj_3R_265();
    }
    
    private final boolean jj_3R_192() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_123() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_215()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_216()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_217()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_218()) {
                        this.jj_scanpos = jj_scanpos;
                        if (this.jj_3R_219()) {
                            this.jj_scanpos = jj_scanpos;
                            if (this.jj_3R_220()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_215() {
        return this.jj_3R_264();
    }
    
    private final boolean jj_3R_248() {
        return this.jj_scan_token(191);
    }
    
    private final boolean jj_3R_330() {
        return this.jj_scan_token(441);
    }
    
    private final boolean jj_3R_329() {
        return this.jj_scan_token(384);
    }
    
    private final boolean jj_3R_328() {
        return this.jj_scan_token(426);
    }
    
    private final boolean jj_3R_190() {
        return this.jj_scan_token(239);
    }
    
    private final boolean jj_3R_387() {
        return this.jj_3R_393();
    }
    
    private final boolean jj_3_28() {
        return this.jj_3R_73();
    }
    
    private final boolean jj_3R_97() {
        return this.jj_3R_192();
    }
    
    private final boolean jj_3R_327() {
        return this.jj_scan_token(425);
    }
    
    private final boolean jj_3_57() {
        return this.jj_3R_55();
    }
    
    private final boolean jj_3R_116() {
        return this.jj_scan_token(154);
    }
    
    private final boolean jj_3R_211() {
        return this.jj_scan_token(213);
    }
    
    private final boolean jj_3_8() {
        return this.jj_3R_52();
    }
    
    private final boolean jj_3R_370() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_28()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_387()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3_7() {
        return this.jj_3R_53();
    }
    
    private final boolean jj_3_17() {
        return this.jj_3R_60();
    }
    
    private final boolean jj_3R_177() {
        return this.jj_3R_246();
    }
    
    private final boolean jj_3R_256() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_327()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_328()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_329()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_330()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_210() {
        return this.jj_scan_token(213);
    }
    
    private final boolean jj_3R_59() {
        return this.jj_3R_57();
    }
    
    private final boolean jj_3_64() {
        return this.jj_3R_97();
    }
    
    private final boolean jj_3_50() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3_6() {
        return this.jj_3R_53();
    }
    
    private final boolean jj_3R_114() {
        return this.jj_scan_token(227);
    }
    
    private final boolean jj_3_5() {
        return this.jj_3R_52();
    }
    
    private final boolean jj_3R_94() {
        return this.jj_3R_190();
    }
    
    private final boolean jj_3R_209() {
        return this.jj_scan_token(390);
    }
    
    private final boolean jj_3R_93() {
        return this.jj_3R_189();
    }
    
    private final boolean jj_3R_345() {
        return this.jj_3R_370();
    }
    
    private final boolean jj_3_43() {
        return this.jj_3R_85();
    }
    
    private final boolean jj_3_56() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = this.newInvocationFollows(1);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_93()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_94()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_188() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3_56()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_57()) {
                this.jj_scanpos = jj_scanpos;
                this.lookingAhead = true;
                this.jj_semLA = (this.getToken(1).kind == 449 && (this.getToken(2).kind == 225 || this.getToken(2).kind == 259));
                this.lookingAhead = false;
                if (!this.jj_semLA || this.jj_3R_249()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_250()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_257() {
        return this.jj_scan_token(325);
    }
    
    private final boolean jj_3R_208() {
        return this.jj_scan_token(113);
    }
    
    private final boolean jj_3R_43() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 154 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 195)) || this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind)));
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_115()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 154 && ((this.getToken(2).kind == 438 && ((this.getToken(3).kind == 453 && !this.isPrivilegeKeywordExceptTrigger(this.getToken(4).kind)) || this.getToken(3).kind == 243)) || !this.isPrivilegeKeywordExceptTrigger(this.getToken(2).kind)));
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_116()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_115() {
        return this.jj_scan_token(154);
    }
    
    private final boolean jj_3R_207() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_257()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_scan_token(333)) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_84() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_176()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3_43()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_177()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3R_176() {
        return this.jj_3R_245();
    }
    
    private final boolean jj_3R_206() {
        return this.jj_3R_256();
    }
    
    private final boolean jj_3R_42() {
        final Token jj_scanpos = this.jj_scanpos;
        this.lookingAhead = true;
        this.jj_semLA = (this.getToken(1).kind == 227 && this.getToken(2).kind != 108);
        this.lookingAhead = false;
        if (!this.jj_semLA || this.jj_3R_113()) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 227 && this.getToken(2).kind == 108);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_114()) {
                return true;
            }
        }
        return false;
    }
    
    private final boolean jj_3R_113() {
        return this.jj_scan_token(227);
    }
    
    private final boolean jj_3_74() {
        return this.jj_3R_107();
    }
    
    private final boolean jj_3R_107() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_3R_206()) {
            this.jj_scanpos = jj_scanpos;
            if (this.jj_3R_207()) {
                this.jj_scanpos = jj_scanpos;
                if (this.jj_3R_208()) {
                    this.jj_scanpos = jj_scanpos;
                    if (this.jj_3R_209()) {
                        this.jj_scanpos = jj_scanpos;
                        this.lookingAhead = true;
                        this.jj_semLA = (this.getToken(1).kind == 213 && this.getToken(2).kind == 280);
                        this.lookingAhead = false;
                        if (!this.jj_semLA || this.jj_3R_210()) {
                            this.jj_scanpos = jj_scanpos;
                            this.lookingAhead = true;
                            this.jj_semLA = (this.getToken(1).kind == 213 && this.getToken(2).kind == 353);
                            this.lookingAhead = false;
                            if (!this.jj_semLA || this.jj_3R_211()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private final boolean jj_3_16() {
        return this.jj_3R_59();
    }
    
    private final boolean jj_3R_54() {
        return this.jj_3R_77();
    }
    
    private final boolean jj_3R_121() {
        return this.jj_scan_token(68);
    }
    
    private final boolean jj_3R_167() {
        return this.jj_3R_242();
    }
    
    private final boolean jj_3R_189() {
        return this.jj_scan_token(405);
    }
    
    private final boolean jj_3R_92() {
        return this.jj_3R_188();
    }
    
    private final boolean jj_3R_388() {
        return this.jj_scan_token(467);
    }
    
    private final boolean jj_3_35() {
        return this.jj_3R_80();
    }
    
    private final boolean jj_3R_280() {
        return this.jj_3R_345();
    }
    
    private final boolean jj_3R_124() {
        return this.jj_scan_token(351);
    }
    
    private final boolean jj_3R_166() {
        return this.jj_scan_token(300);
    }
    
    private final boolean jj_3R_120() {
        return this.jj_scan_token(129);
    }
    
    private final boolean jj_3R_165() {
        return this.jj_scan_token(258);
    }
    
    private final boolean jj_3R_254() {
        return this.jj_scan_token(359);
    }
    
    private final boolean jj_3R_400() {
        return this.jj_scan_token(183);
    }
    
    private final boolean jj_3R_221() {
        return this.jj_scan_token(108);
    }
    
    private final boolean jj_3R_126() {
        final Token jj_scanpos = this.jj_scanpos;
        if (this.jj_scan_token(172)) {
            this.jj_scanpos = jj_scanpos;
            this.lookingAhead = true;
            this.jj_semLA = (this.getToken(1).kind == 108 && this.getToken(2).kind == 172);
            this.lookingAhead = false;
            if (!this.jj_semLA || this.jj_3R_221()) {
                return true;
            }
        }
        return false;
    }
    
    private static void jj_la1_0() {
        SQLParser.jj_la1_0 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    }
    
    private static void jj_la1_1() {
        SQLParser.jj_la1_1 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 134217728, 134217728, 0, 0, 0, 134217728, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    }
    
    private static void jj_la1_2() {
        SQLParser.jj_la1_2 = new int[] { 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 134217728, 134217728, 134217728, 0, 134217728, 134217728, 50397184, 0, 0, 50331648, 0, 50331648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50397184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 256, 0, 32, 0, 0, 0, 0, 32768, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 4194304, 8388608, 0, 536870912, 0, 0, 16777216, 0, 0, 256, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 64, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 256, 0, 0, 256, 0, 0, 0, 0, 0, 512, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 8192, 16777216, 0, 0, 0, 0, 4096, 4096, 0, 0, 256, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4194304, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 134217728, 0, 0, 22, 0, 0, 0, 0, 134217728, 0, 18, 0, 1048576, 1048576, 0, 0, 0, 0, 134217728, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, -604045314, 536936448, 0, -604045314, -604045314, 0 };
    }
    
    private static void jj_la1_3() {
        SQLParser.jj_la1_3 = new int[] { 67108864, 0, 71304192, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 16, 8388624, 16, 16, 8388608, 16, 8388624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3145728, 3145728, 0, 0, 3145728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, 0, 0, Integer.MIN_VALUE, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 65536, 0, 0, 134217728, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 134217728, 2048, 0, 0, 0, 0, 0, 0, 0, 8192, 16384, 32768, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 262144, 1, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 16, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 8388608, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 67108864, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 67108864, 0, -262657, 262656, 0, -262657, -262657, 0 };
    }
    
    private static void jj_la1_4() {
        SQLParser.jj_la1_4 = new int[] { 0, 0, 2, 0, 512, 0, 0, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 524288, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 1, 65536, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 4096, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 12, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2097152, 512, 0, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, -1, 0, 0, -1, -1, 0 };
    }
    
    private static void jj_la1_5() {
        SQLParser.jj_la1_5 = new int[] { 64, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 33554432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167772160, 0, 0, 0, 0, 33554432, 384, 0, 0, 0, 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 2048, 0, 1073741824, 1074003969, 0, 262145, 0, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, 8388608, 0, 0, 0, 0, 0, 0, 8388608, 0, 524288, 0, 0, 524288, 0, 0, 65536, 0, 0, 0, 268435456, 524288, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, 384, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, 0, 0, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67248136, 131080, 131080, 0, 131080, 131072, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 6291456, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0, 0, 536870912, 0, 0, 0, 0, 1610612736, 0, 0, 1610612736, 0, 0, 0, 0, 0, 1, 1, 1610612736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, Integer.MIN_VALUE, 536870912, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 64, 0, -16777217, 16777216, 0, -16777217, -16777217, 0 };
    }
    
    private static void jj_la1_6() {
        SQLParser.jj_la1_6 = new int[] { 0, 0, 268435456, 0, 0, 0, 1073741824, 1074266112, 1074266112, 0, 268435456, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 268435456, 8, 0, 0, 32768, 0, 65536, 8454144, 8454144, 8454144, 0, 8454144, 8454144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 4194304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 1, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 536870912, 4, 2097152, 0, 0, 0, 0, 256, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 134217728, 134217728, 512, 134217728, 134217728, 8, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097152, 0, 0, 0, 0, 1073741824, 1073741824, 0, 1, 0, 0, 0, 65536, 65536, 8, 0, 8, 8, 0, 33554432, 0, 33554432, 0, 0, 0, 8454144, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 33554432, 33554432, 0, 0, 0, 0, 0, 524288, 8388608, 0, 0, 8388608, 0, 524288, 0, 0, 0, 0, 0, 8388608, 0, 1048576, 0, 8388608, 0, -1, 0, 0, -1, -1, 0 };
    }
    
    private static void jj_la1_7() {
        SQLParser.jj_la1_7 = new int[] { 1073741826, 0, 1073741826, 0, 0, 0, 0, 268468224, 32768, 0, 1073741826, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 268435456, 0, 524288, 0, 268435456, 0, 0, 0, 0, 268435456, 268435456, 268435456, 268435456, 0, 268435456, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 0, 0, 1, 0, Integer.MIN_VALUE, 0, 0, -2130706432, 16777216, 0, 8388608, 0, 0, 33554436, 0, -2130706432, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 33554432, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 32768, 32768, 32768, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 4, 33554432, 0, 33554432, 0, 0, 67125248, 32768, 0, 524288, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33554436, 0, 0, 0, 268435456, 268435456, 0, 0, 0, 0, 1073741824, 0, 0, 8, 0, 0, 0, 268435456, 0, 1073741824, 1073741824, 0, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1073741826, 32768, 0, 1073741826, 0, 0, 0, 0, 0, 0, 0, 1073741826, 0, 0, 0, 1073741826, 0, -67125249, 0, 67125248, -67125249, -67125249, 0 };
    }
    
    private static void jj_la1_8() {
        SQLParser.jj_la1_8 = new int[] { 8, 0, 8, 0, 0, 0, 128, 128, 128, 0, 8, 512, 0, 0, 512, 0, 0, 0, 2048, 0, 512, 0, 0, 0, 512, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 2048, 0, 2048, 541589504, 0, 64, 32, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 4718592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073758208, 0, 33554433, 0, 0, 98304, 0, 1073758208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 98304, 4, 0, 1610629120, 32, 0, 0, 0, 0, 0, 0, 0, 0, 1610629120, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 134217728, 0, 0, 0, 0, 0, 0, 0, 69206016, 0, 0, 69206016, 2097152, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 69206016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 2048, 262144, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16777216, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31723, 2147450880, 20, 31723, 31723, 0 };
    }
    
    private static void jj_la1_9() {
        SQLParser.jj_la1_9 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 8, 0, 0, 8, 0, 8, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 1048592, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048592, 4096, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 524288, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2098179, 2, 67108864, 2098179, 0, 512, 0, 0, 0, 128, 128, 2098179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, -642, 0, 128, 128, 0 };
    }
    
    private static void jj_la1_10() {
        SQLParser.jj_la1_10 = new int[] { 0, 0, 1040, Integer.MIN_VALUE, 0, 0, 33554432, 33554432, 33554432, 0, 1040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402653184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402653184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612736, 1610612736, 8372224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402653184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402653184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 512, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 512, 0, 0, 128, 0, 4096, 128, 128, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 16777728, 0, 512, 512, 512, 512, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8224, 8224, 0, 8224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 33554432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0 };
    }
    
    private static void jj_la1_11() {
        SQLParser.jj_la1_11 = new int[] { 32, 0, 32, 0, 0, 0, 131072, 131073, 131073, 131072, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 4096, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1589248, 540672, 0, 0, 540672, 0, 128, 0, 1590272, 62914560, 0, 0, 0, 62914560, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32768, 0, 0, 0, 0, 0, 128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 66641072, -67099840, 458767, 66641072, 66641072, 0 };
    }
    
    private static void jj_la1_12() {
        SQLParser.jj_la1_12 = new int[] { 0, 131072, 0, 0, 0, 131072, 0, 4104, 4104, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 536870912, 0, 0, 16408, 0, 0, 268435456, 268435456, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 0, 207618048, 0, 0, 0, 0, 207618048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 1024, 0, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276824064, 41943037, -318767104, 276824064, 276824064, 0 };
    }
    
    private static void jj_la1_13() {
        SQLParser.jj_la1_13 = new int[] { Integer.MIN_VALUE, 16, Integer.MIN_VALUE, 0, 0, 16, 4198400, 4198400, 4198400, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 16777216, 0, 16777216, 0, 0, 0, 0, 65536, Integer.MIN_VALUE, 0, 17039360, 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131138, 0, 0, 131138, 0, 0, 0, 0, 0, 0, 0, 131138, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, Integer.MIN_VALUE, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 32768, 0, 0, 0, 32, 0, 33555968, 33555968, 0, 0, 0, 0, 0, 65536, 0, 0, Integer.MIN_VALUE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 1, 0, 8388608, 8192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4194304, 0, 0, 4194304, 4096, 0, 0, 0, 0, 0, 0, 4194304, 0, 0, 0, 4194304, 0, 0, 0, 134217727, 0, 0, 0 };
    }
    
    private static void jj_la1_14() {
        SQLParser.jj_la1_14 = new int[] { 524290, 0, 524290, 0, 0, 0, 0, 0, 0, 0, 524290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 32, 2, 0, 0, 0, 2, 0, 0, 0, 0, 128, 134217728, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 32, 0, 0, 0, 0, 0, 0, 0, 520192, 0, 0, 520192, 80, 80, 16777480, 16777480, 80, 33554560, 128, 0, 0, 32, 0, 0, 0, 0, 32, 0, 32, 0, 0, 32, 0, 0, 4, 0, 0, 0, 524368, 2, 0, 0, 32, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 36, 0, 524288, 0, 32, 32, 0, 0, 0, 0, 0, 524368, 524368, 0, 524368, 0, 0, 524368, 524368, 0, 0, 0, 32, 32, 0, 0, 0, 32, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 2, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 67108864, 0, 0, 0, 32, 67108864, 0, 32, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 80, 80, 80, 80, 0, 0, 0, 0, 16384, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 16384, 0, 0, 524288, 524368, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 32, 2, 2, 2, 0, 32, 0, 32, 0, 134217728, 0, 0, 0, 0, 0, 134217728 };
    }
    
    private static void jj_la1_15() {
        SQLParser.jj_la1_15 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 228, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 32, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2 };
    }
    
    public SQLParser(final CharStream charStream) {
        this.lastTokenDelimitedIdentifier = Boolean.FALSE;
        this.nextToLastTokenDelimitedIdentifier = Boolean.FALSE;
        this.lookingAhead = false;
        this.jj_la1 = new int[358];
        this.jj_2_rtns = new JJCalls[86];
        this.jj_rescan = false;
        this.jj_gc = 0;
        this.jj_ls = new LookaheadSuccess();
        this.jj_expentries = new Vector();
        this.jj_kind = -1;
        this.jj_lasttokens = new int[100];
        this.token_source = new SQLParserTokenManager(charStream);
        this.token = new Token();
        final Token token = this.token;
        final Token nextToken = this.token_source.getNextToken();
        this.jj_nt = nextToken;
        token.next = nextToken;
        this.jj_gen = 0;
        for (int i = 0; i < 358; ++i) {
            this.jj_la1[i] = -1;
        }
        for (int j = 0; j < this.jj_2_rtns.length; ++j) {
            this.jj_2_rtns[j] = new JJCalls();
        }
    }
    
    public void ReInit(final CharStream charStream) {
        this.token_source.ReInit(charStream);
        this.token = new Token();
        final Token token = this.token;
        final Token nextToken = this.token_source.getNextToken();
        this.jj_nt = nextToken;
        token.next = nextToken;
        this.jj_gen = 0;
        for (int i = 0; i < 358; ++i) {
            this.jj_la1[i] = -1;
        }
        for (int j = 0; j < this.jj_2_rtns.length; ++j) {
            this.jj_2_rtns[j] = new JJCalls();
        }
    }
    
    public SQLParser(final SQLParserTokenManager token_source) {
        this.lastTokenDelimitedIdentifier = Boolean.FALSE;
        this.nextToLastTokenDelimitedIdentifier = Boolean.FALSE;
        this.lookingAhead = false;
        this.jj_la1 = new int[358];
        this.jj_2_rtns = new JJCalls[86];
        this.jj_rescan = false;
        this.jj_gc = 0;
        this.jj_ls = new LookaheadSuccess();
        this.jj_expentries = new Vector();
        this.jj_kind = -1;
        this.jj_lasttokens = new int[100];
        this.token_source = token_source;
        this.token = new Token();
        final Token token = this.token;
        final Token nextToken = this.token_source.getNextToken();
        this.jj_nt = nextToken;
        token.next = nextToken;
        this.jj_gen = 0;
        for (int i = 0; i < 358; ++i) {
            this.jj_la1[i] = -1;
        }
        for (int j = 0; j < this.jj_2_rtns.length; ++j) {
            this.jj_2_rtns[j] = new JJCalls();
        }
    }
    
    public void ReInit(final SQLParserTokenManager token_source) {
        this.token_source = token_source;
        this.token = new Token();
        final Token token = this.token;
        final Token nextToken = this.token_source.getNextToken();
        this.jj_nt = nextToken;
        token.next = nextToken;
        this.jj_gen = 0;
        for (int i = 0; i < 358; ++i) {
            this.jj_la1[i] = -1;
        }
        for (int j = 0; j < this.jj_2_rtns.length; ++j) {
            this.jj_2_rtns[j] = new JJCalls();
        }
    }
    
    private final Token jj_consume_token(final int jj_kind) throws ParseException {
        final Token token = this.token;
        final Token jj_nt = this.jj_nt;
        this.token = jj_nt;
        if (jj_nt.next != null) {
            this.jj_nt = this.jj_nt.next;
        }
        else {
            final Token jj_nt2 = this.jj_nt;
            final Token nextToken = this.token_source.getNextToken();
            jj_nt2.next = nextToken;
            this.jj_nt = nextToken;
        }
        if (this.token.kind == jj_kind) {
            ++this.jj_gen;
            if (++this.jj_gc > 100) {
                this.jj_gc = 0;
                for (int i = 0; i < this.jj_2_rtns.length; ++i) {
                    for (JJCalls next = this.jj_2_rtns[i]; next != null; next = next.next) {
                        if (next.gen < this.jj_gen) {
                            next.first = null;
                        }
                    }
                }
            }
            return this.token;
        }
        this.jj_nt = this.token;
        this.token = token;
        this.jj_kind = jj_kind;
        throw this.generateParseException();
    }
    
    private final boolean jj_scan_token(final int n) {
        if (this.jj_scanpos == this.jj_lastpos) {
            --this.jj_la;
            if (this.jj_scanpos.next == null) {
                final Token jj_scanpos = this.jj_scanpos;
                final Token nextToken = this.token_source.getNextToken();
                jj_scanpos.next = nextToken;
                this.jj_scanpos = nextToken;
                this.jj_lastpos = nextToken;
            }
            else {
                final Token next = this.jj_scanpos.next;
                this.jj_scanpos = next;
                this.jj_lastpos = next;
            }
        }
        else {
            this.jj_scanpos = this.jj_scanpos.next;
        }
        if (this.jj_rescan) {
            int n2 = 0;
            Token token;
            for (token = this.token; token != null && token != this.jj_scanpos; token = token.next) {
                ++n2;
            }
            if (token != null) {
                this.jj_add_error_token(n, n2);
            }
        }
        if (this.jj_scanpos.kind != n) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            throw this.jj_ls;
        }
        return false;
    }
    
    public final Token getNextToken() {
        final Token jj_nt = this.jj_nt;
        this.token = jj_nt;
        if (jj_nt.next != null) {
            this.jj_nt = this.jj_nt.next;
        }
        else {
            final Token jj_nt2 = this.jj_nt;
            final Token nextToken = this.token_source.getNextToken();
            jj_nt2.next = nextToken;
            this.jj_nt = nextToken;
        }
        ++this.jj_gen;
        return this.token;
    }
    
    public final Token getToken(final int n) {
        Token next = this.lookingAhead ? this.jj_scanpos : this.token;
        for (int i = 0; i < n; ++i) {
            if (next.next != null) {
                next = next.next;
            }
            else {
                final Token token = next;
                final Token nextToken = this.token_source.getNextToken();
                token.next = nextToken;
                next = nextToken;
            }
        }
        return next;
    }
    
    private void jj_add_error_token(final int n, final int jj_endpos) {
        if (jj_endpos >= 100) {
            return;
        }
        if (jj_endpos == this.jj_endpos + 1) {
            this.jj_lasttokens[this.jj_endpos++] = n;
        }
        else if (this.jj_endpos != 0) {
            this.jj_expentry = new int[this.jj_endpos];
            for (int i = 0; i < this.jj_endpos; ++i) {
                this.jj_expentry[i] = this.jj_lasttokens[i];
            }
            boolean b = false;
            final Enumeration<int[]> elements = (Enumeration<int[]>)this.jj_expentries.elements();
            while (elements.hasMoreElements()) {
                final int[] array = elements.nextElement();
                if (array.length == this.jj_expentry.length) {
                    b = true;
                    for (int j = 0; j < this.jj_expentry.length; ++j) {
                        if (array[j] != this.jj_expentry[j]) {
                            b = false;
                            break;
                        }
                    }
                    if (b) {
                        break;
                    }
                    continue;
                }
            }
            if (!b) {
                this.jj_expentries.addElement(this.jj_expentry);
            }
            if (jj_endpos != 0) {
                this.jj_lasttokens[(this.jj_endpos = jj_endpos) - 1] = n;
            }
        }
    }
    
    public ParseException generateParseException() {
        this.jj_expentries.removeAllElements();
        final boolean[] array = new boolean[500];
        for (int i = 0; i < 500; ++i) {
            array[i] = false;
        }
        if (this.jj_kind >= 0) {
            array[this.jj_kind] = true;
            this.jj_kind = -1;
        }
        for (int j = 0; j < 358; ++j) {
            if (this.jj_la1[j] == this.jj_gen) {
                for (int k = 0; k < 32; ++k) {
                    if ((SQLParser.jj_la1_0[j] & 1 << k) != 0x0) {
                        array[k] = true;
                    }
                    if ((SQLParser.jj_la1_1[j] & 1 << k) != 0x0) {
                        array[32 + k] = true;
                    }
                    if ((SQLParser.jj_la1_2[j] & 1 << k) != 0x0) {
                        array[64 + k] = true;
                    }
                    if ((SQLParser.jj_la1_3[j] & 1 << k) != 0x0) {
                        array[96 + k] = true;
                    }
                    if ((SQLParser.jj_la1_4[j] & 1 << k) != 0x0) {
                        array[128 + k] = true;
                    }
                    if ((SQLParser.jj_la1_5[j] & 1 << k) != 0x0) {
                        array[160 + k] = true;
                    }
                    if ((SQLParser.jj_la1_6[j] & 1 << k) != 0x0) {
                        array[192 + k] = true;
                    }
                    if ((SQLParser.jj_la1_7[j] & 1 << k) != 0x0) {
                        array[224 + k] = true;
                    }
                    if ((SQLParser.jj_la1_8[j] & 1 << k) != 0x0) {
                        array[256 + k] = true;
                    }
                    if ((SQLParser.jj_la1_9[j] & 1 << k) != 0x0) {
                        array[288 + k] = true;
                    }
                    if ((SQLParser.jj_la1_10[j] & 1 << k) != 0x0) {
                        array[320 + k] = true;
                    }
                    if ((SQLParser.jj_la1_11[j] & 1 << k) != 0x0) {
                        array[352 + k] = true;
                    }
                    if ((SQLParser.jj_la1_12[j] & 1 << k) != 0x0) {
                        array[384 + k] = true;
                    }
                    if ((SQLParser.jj_la1_13[j] & 1 << k) != 0x0) {
                        array[416 + k] = true;
                    }
                    if ((SQLParser.jj_la1_14[j] & 1 << k) != 0x0) {
                        array[448 + k] = true;
                    }
                    if ((SQLParser.jj_la1_15[j] & 1 << k) != 0x0) {
                        array[480 + k] = true;
                    }
                }
            }
        }
        for (int l = 0; l < 500; ++l) {
            if (array[l]) {
                (this.jj_expentry = new int[1])[0] = l;
                this.jj_expentries.addElement(this.jj_expentry);
            }
        }
        this.jj_endpos = 0;
        this.jj_rescan_token();
        this.jj_add_error_token(0, 0);
        final int[][] array2 = new int[this.jj_expentries.size()][];
        for (int index = 0; index < this.jj_expentries.size(); ++index) {
            array2[index] = (int[])this.jj_expentries.elementAt(index);
        }
        return new ParseException(this.token, array2, SQLParserConstants.tokenImage);
    }
    
    public final void enable_tracing() {
    }
    
    public final void disable_tracing() {
    }
    
    private final void jj_rescan_token() {
        this.jj_rescan = true;
        for (int i = 0; i < 86; ++i) {
            try {
                JJCalls next = this.jj_2_rtns[i];
                do {
                    if (next.gen > this.jj_gen) {
                        this.jj_la = next.arg;
                        final Token first = next.first;
                        this.jj_scanpos = first;
                        this.jj_lastpos = first;
                        switch (i) {
                            case 0: {
                                this.jj_3_1();
                                break;
                            }
                            case 1: {
                                this.jj_3_2();
                                break;
                            }
                            case 2: {
                                this.jj_3_3();
                                break;
                            }
                            case 3: {
                                this.jj_3_4();
                                break;
                            }
                            case 4: {
                                this.jj_3_5();
                                break;
                            }
                            case 5: {
                                this.jj_3_6();
                                break;
                            }
                            case 6: {
                                this.jj_3_7();
                                break;
                            }
                            case 7: {
                                this.jj_3_8();
                                break;
                            }
                            case 8: {
                                this.jj_3_9();
                                break;
                            }
                            case 9: {
                                this.jj_3_10();
                                break;
                            }
                            case 10: {
                                this.jj_3_11();
                                break;
                            }
                            case 11: {
                                this.jj_3_12();
                                break;
                            }
                            case 12: {
                                this.jj_3_13();
                                break;
                            }
                            case 13: {
                                this.jj_3_14();
                                break;
                            }
                            case 14: {
                                this.jj_3_15();
                                break;
                            }
                            case 15: {
                                this.jj_3_16();
                                break;
                            }
                            case 16: {
                                this.jj_3_17();
                                break;
                            }
                            case 17: {
                                this.jj_3_18();
                                break;
                            }
                            case 18: {
                                this.jj_3_19();
                                break;
                            }
                            case 19: {
                                this.jj_3_20();
                                break;
                            }
                            case 20: {
                                this.jj_3_21();
                                break;
                            }
                            case 21: {
                                this.jj_3_22();
                                break;
                            }
                            case 22: {
                                this.jj_3_23();
                                break;
                            }
                            case 23: {
                                this.jj_3_24();
                                break;
                            }
                            case 24: {
                                this.jj_3_25();
                                break;
                            }
                            case 25: {
                                this.jj_3_26();
                                break;
                            }
                            case 26: {
                                this.jj_3_27();
                                break;
                            }
                            case 27: {
                                this.jj_3_28();
                                break;
                            }
                            case 28: {
                                this.jj_3_29();
                                break;
                            }
                            case 29: {
                                this.jj_3_30();
                                break;
                            }
                            case 30: {
                                this.jj_3_31();
                                break;
                            }
                            case 31: {
                                this.jj_3_32();
                                break;
                            }
                            case 32: {
                                this.jj_3_33();
                                break;
                            }
                            case 33: {
                                this.jj_3_34();
                                break;
                            }
                            case 34: {
                                this.jj_3_35();
                                break;
                            }
                            case 35: {
                                this.jj_3_36();
                                break;
                            }
                            case 36: {
                                this.jj_3_37();
                                break;
                            }
                            case 37: {
                                this.jj_3_38();
                                break;
                            }
                            case 38: {
                                this.jj_3_39();
                                break;
                            }
                            case 39: {
                                this.jj_3_40();
                                break;
                            }
                            case 40: {
                                this.jj_3_41();
                                break;
                            }
                            case 41: {
                                this.jj_3_42();
                                break;
                            }
                            case 42: {
                                this.jj_3_43();
                                break;
                            }
                            case 43: {
                                this.jj_3_44();
                                break;
                            }
                            case 44: {
                                this.jj_3_45();
                                break;
                            }
                            case 45: {
                                this.jj_3_46();
                                break;
                            }
                            case 46: {
                                this.jj_3_47();
                                break;
                            }
                            case 47: {
                                this.jj_3_48();
                                break;
                            }
                            case 48: {
                                this.jj_3_49();
                                break;
                            }
                            case 49: {
                                this.jj_3_50();
                                break;
                            }
                            case 50: {
                                this.jj_3_51();
                                break;
                            }
                            case 51: {
                                this.jj_3_52();
                                break;
                            }
                            case 52: {
                                this.jj_3_53();
                                break;
                            }
                            case 53: {
                                this.jj_3_54();
                                break;
                            }
                            case 54: {
                                this.jj_3_55();
                                break;
                            }
                            case 55: {
                                this.jj_3_56();
                                break;
                            }
                            case 56: {
                                this.jj_3_57();
                                break;
                            }
                            case 57: {
                                this.jj_3_58();
                                break;
                            }
                            case 58: {
                                this.jj_3_59();
                                break;
                            }
                            case 59: {
                                this.jj_3_60();
                                break;
                            }
                            case 60: {
                                this.jj_3_61();
                                break;
                            }
                            case 61: {
                                this.jj_3_62();
                                break;
                            }
                            case 62: {
                                this.jj_3_63();
                                break;
                            }
                            case 63: {
                                this.jj_3_64();
                                break;
                            }
                            case 64: {
                                this.jj_3_65();
                                break;
                            }
                            case 65: {
                                this.jj_3_66();
                                break;
                            }
                            case 66: {
                                this.jj_3_67();
                                break;
                            }
                            case 67: {
                                this.jj_3_68();
                                break;
                            }
                            case 68: {
                                this.jj_3_69();
                                break;
                            }
                            case 69: {
                                this.jj_3_70();
                                break;
                            }
                            case 70: {
                                this.jj_3_71();
                                break;
                            }
                            case 71: {
                                this.jj_3_72();
                                break;
                            }
                            case 72: {
                                this.jj_3_73();
                                break;
                            }
                            case 73: {
                                this.jj_3_74();
                                break;
                            }
                            case 74: {
                                this.jj_3_75();
                                break;
                            }
                            case 75: {
                                this.jj_3_76();
                                break;
                            }
                            case 76: {
                                this.jj_3_77();
                                break;
                            }
                            case 77: {
                                this.jj_3_78();
                                break;
                            }
                            case 78: {
                                this.jj_3_79();
                                break;
                            }
                            case 79: {
                                this.jj_3_80();
                                break;
                            }
                            case 80: {
                                this.jj_3_81();
                                break;
                            }
                            case 81: {
                                this.jj_3_82();
                                break;
                            }
                            case 82: {
                                this.jj_3_83();
                                break;
                            }
                            case 83: {
                                this.jj_3_84();
                                break;
                            }
                            case 84: {
                                this.jj_3_85();
                                break;
                            }
                            case 85: {
                                this.jj_3_86();
                                break;
                            }
                        }
                    }
                    next = next.next;
                } while (next != null);
            }
            catch (LookaheadSuccess lookaheadSuccess) {}
        }
        this.jj_rescan = false;
    }
    
    private final void jj_save(final int n, final int arg) {
        JJCalls next;
        for (next = this.jj_2_rtns[n]; next.gen > this.jj_gen; next = next.next) {
            if (next.next == null) {
                final JJCalls jjCalls = next;
                final JJCalls next2 = new JJCalls();
                jjCalls.next = next2;
                next = next2;
                break;
            }
        }
        next.gen = this.jj_gen + arg - this.jj_la;
        next.first = this.token;
        next.arg = arg;
    }
    
    static {
        SAVEPOINT_CLAUSE_NAMES = new String[] { "UNIQUE", "ON ROLLBACK RETAIN LOCKS", "ON ROLLBACK RETAIN CURSORS" };
        ROUTINE_CLAUSE_NAMES = new String[] { null, "SPECIFIC", "RESULT SET", "LANGUAGE", "EXTERNAL NAME", "PARAMETER STYLE", "SQL", "DETERMINISTIC", "ON NULL INPUT", "RETURN TYPE", "EXTERNAL SECURITY", null };
        JAVA_ROUTINE_CLAUSES = new int[] { 3, 4, 5 };
        TEMPORARY_TABLE_CLAUSE_NAMES = new String[] { "NOT LOGGED", "ON COMMIT", "ON ROLLBACK" };
        ESCAPED_SYSFUN_FUNCTIONS = new String[] { "ACOS", "ASIN", "ATAN", "ATAN2", "COS", "SIN", "TAN", "PI", "DEGREES", "RADIANS", "EXP", "LOG", "LOG10", "CEILING", "FLOOR", "SIGN", "RAND", "COT" };
        jj_la1_0();
        jj_la1_1();
        jj_la1_2();
        jj_la1_3();
        jj_la1_4();
        jj_la1_5();
        jj_la1_6();
        jj_la1_7();
        jj_la1_8();
        jj_la1_9();
        jj_la1_10();
        jj_la1_11();
        jj_la1_12();
        jj_la1_13();
        jj_la1_14();
        jj_la1_15();
    }
    
    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
    
    private static final class LookaheadSuccess extends Error
    {
    }
}
