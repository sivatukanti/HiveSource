// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.derby.impl.sql.execute;

import org.apache.derby.iapi.sql.depend.Provider;
import org.apache.derby.catalog.DependableFinder;
import java.sql.SQLException;
import org.apache.derby.iapi.jdbc.ConnectionContext;
import java.sql.Connection;
import org.apache.derby.iapi.types.DataValueFactory;
import org.apache.derby.iapi.store.access.TransactionController;
import java.util.GregorianCalendar;
import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
import org.apache.derby.iapi.services.io.FormatableBitSet;
import java.util.Vector;
import org.apache.derby.iapi.sql.Row;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.services.property.PersistentSet;
import org.apache.derby.iapi.services.property.PropertyUtil;
import org.apache.derby.iapi.util.ReuseFactory;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.sql.execute.ExecutionFactory;
import org.apache.derby.iapi.sql.execute.ResultSetFactory;
import java.util.ArrayList;
import org.apache.derby.iapi.services.loader.GeneratedMethod;
import org.apache.derby.iapi.sql.depend.Dependent;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.services.monitor.Monitor;
import org.apache.derby.iapi.services.context.Context;
import java.util.Calendar;
import java.util.Hashtable;
import org.apache.derby.iapi.sql.ParameterValueSet;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.sql.conn.SQLSessionContext;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.ScanController;
import org.apache.derby.iapi.store.access.ConglomerateController;
import java.util.HashSet;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import java.sql.SQLWarning;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.sql.ResultSet;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.services.loader.GeneratedByteCode;
import org.apache.derby.iapi.sql.execute.CursorActivation;

public abstract class BaseActivation implements CursorActivation, GeneratedByteCode
{
    private LanguageConnectionContext lcc;
    protected ContextManager cm;
    protected ExecPreparedStatement preStmt;
    protected ResultSet resultSet;
    protected ResultDescription resultDescription;
    protected boolean closed;
    private String cursorName;
    protected int numSubqueries;
    private boolean singleExecution;
    private volatile boolean inUse;
    private java.sql.ResultSet targetVTI;
    private SQLWarning warnings;
    private GeneratedClass gc;
    private boolean checkRowCounts;
    private HashSet rowCountsCheckedThisExecution;
    private static final long MAX_SQRT;
    private static final int TEN_PERCENT_THRESHOLD = 400;
    private ConglomerateController updateHeapCC;
    private ScanController indexSC;
    private long indexConglomerateNumber;
    private TableDescriptor ddlTableDescriptor;
    private long maxRows;
    private boolean forCreateTable;
    private boolean scrollable;
    private boolean resultSetHoldability;
    private CursorResultSet forUpdateIndexScan;
    private boolean autoGeneratedKeysResultSetMode;
    private int[] autoGeneratedKeysColumnIndexes;
    private String[] autoGeneratedKeysColumnNames;
    private boolean isValid;
    protected String UUIDString;
    protected UUID UUIDValue;
    private Activation parentActivation;
    private SQLSessionContext sqlSessionContextForChildren;
    protected int indexOfSessionTableNamesInSavedObjects;
    protected ExecRow[] row;
    protected ParameterValueSet pvs;
    protected CursorResultSet[] raParentResultSets;
    protected Hashtable parentResultSets;
    private Calendar cal;
    
    protected BaseActivation() {
        this.rowCountsCheckedThisExecution = new HashSet(4, 0.9f);
        this.indexConglomerateNumber = -1L;
        this.maxRows = -1L;
        this.indexOfSessionTableNamesInSavedObjects = -1;
    }
    
    public final void initFromContext(final Context context) throws StandardException {
        this.cm = context.getContextManager();
        this.lcc = (LanguageConnectionContext)this.cm.getContext("LanguageConnectionContext");
        this.inUse = true;
        this.lcc.addActivation(this);
        this.isValid = true;
        this.UUIDValue = Monitor.getMonitor().getUUIDFactory().createUUID();
        this.UUIDString = this.UUIDValue.toString();
    }
    
    public final ResultSet execute() throws StandardException {
        this.throwIfClosed("execute");
        this.checkRowCounts = this.shouldWeCheckRowCounts();
        if (this.checkRowCounts) {
            this.rowCountsCheckedThisExecution.clear();
        }
        this.reinit();
        if (this.resultSet == null) {
            this.resultSet = this.decorateResultSet();
        }
        return this.resultSet;
    }
    
    ResultSet decorateResultSet() throws StandardException {
        return this.createResultSet();
    }
    
    protected abstract ResultSet createResultSet() throws StandardException;
    
    protected void reinit() throws StandardException {
    }
    
    public final ExecPreparedStatement getPreparedStatement() {
        return this.preStmt;
    }
    
    public ConstantAction getConstantAction() {
        return this.preStmt.getConstantAction();
    }
    
    public final void checkStatementValidity() throws StandardException {
        if (this.preStmt == null || this.preStmt.upToDate(this.gc)) {
            return;
        }
        final StandardException exception = StandardException.newException("XCL32.S");
        exception.setReport(1);
        throw exception;
    }
    
    public final void setupActivation(final ExecPreparedStatement preStmt, final boolean scrollable) throws StandardException {
        this.preStmt = preStmt;
        if (preStmt != null) {
            this.resultDescription = preStmt.getResultDescription();
            this.scrollable = scrollable;
            if (this.pvs != null && this.pvs.getParameterCount() != 0) {
                this.pvs.initialize(preStmt.getParameterTypes());
            }
        }
        else {
            this.resultDescription = null;
            this.scrollable = false;
        }
    }
    
    public ResultSet getResultSet() {
        return this.resultSet;
    }
    
    public RowLocation getRowLocationTemplate(final int n) {
        return (RowLocation)((RowLocation)this.getPreparedStatement().getSavedObject(n)).cloneValue(false);
    }
    
    public ResultDescription getResultDescription() {
        return this.resultDescription;
    }
    
    public void reset() throws StandardException {
        if (this.resultSet != null) {
            this.resultSet.close();
        }
        this.updateHeapCC = null;
        if (!this.isSingleExecution()) {
            this.clearWarnings();
        }
    }
    
    public final void close() throws StandardException {
        if (!this.closed) {
            this.reset();
            if (this.resultSet != null) {
                this.resultSet.finish();
                this.resultSet = null;
            }
            this.closed = true;
            final LanguageConnectionContext languageConnectionContext = this.getLanguageConnectionContext();
            languageConnectionContext.getDataDictionary().getDependencyManager().clearDependencies(languageConnectionContext, this);
            languageConnectionContext.removeActivation(this);
            if (this.preStmt != null) {
                this.preStmt.finish(languageConnectionContext);
                this.preStmt = null;
            }
            try {
                this.closeActivationAction();
            }
            catch (Throwable t) {
                throw StandardException.plainWrapException(t);
            }
        }
    }
    
    protected void closeActivationAction() throws Exception {
    }
    
    public boolean isClosed() {
        return this.closed;
    }
    
    public void setSingleExecution() {
        this.singleExecution = true;
    }
    
    public boolean isSingleExecution() {
        return this.singleExecution;
    }
    
    public int getNumSubqueries() {
        return this.numSubqueries;
    }
    
    public boolean isCursorActivation() {
        return false;
    }
    
    public final void setGC(final GeneratedClass gc) {
        this.gc = gc;
    }
    
    public final GeneratedClass getGC() {
        return this.gc;
    }
    
    public final GeneratedMethod getMethod(final String s) throws StandardException {
        return this.getGC().getMethod(s);
    }
    
    public Object e0() throws StandardException {
        return null;
    }
    
    public Object e1() throws StandardException {
        return null;
    }
    
    public Object e2() throws StandardException {
        return null;
    }
    
    public Object e3() throws StandardException {
        return null;
    }
    
    public Object e4() throws StandardException {
        return null;
    }
    
    public Object e5() throws StandardException {
        return null;
    }
    
    public Object e6() throws StandardException {
        return null;
    }
    
    public Object e7() throws StandardException {
        return null;
    }
    
    public Object e8() throws StandardException {
        return null;
    }
    
    public Object e9() throws StandardException {
        return null;
    }
    
    public boolean checkIfThisActivationHasHoldCursor(final String o) {
        return this.inUse && this.resultSetHoldability && this.indexOfSessionTableNamesInSavedObjects != -1 && (this.resultSet != null && !this.resultSet.isClosed() && this.resultSet.returnsRows()) && ((ArrayList)this.getPreparedStatement().getSavedObject(this.indexOfSessionTableNamesInSavedObjects)).contains(o);
    }
    
    public void setCursorName(final String cursorName) {
        if (this.isCursorActivation()) {
            this.cursorName = cursorName;
        }
    }
    
    public String getCursorName() {
        return this.isCursorActivation() ? this.cursorName : null;
    }
    
    public void setResultSetHoldability(final boolean resultSetHoldability) {
        this.resultSetHoldability = resultSetHoldability;
    }
    
    public boolean getResultSetHoldability() {
        return this.resultSetHoldability;
    }
    
    public void setAutoGeneratedKeysResultsetInfo(final int[] autoGeneratedKeysColumnIndexes, final String[] autoGeneratedKeysColumnNames) {
        this.autoGeneratedKeysResultSetMode = true;
        this.autoGeneratedKeysColumnIndexes = autoGeneratedKeysColumnIndexes;
        this.autoGeneratedKeysColumnNames = autoGeneratedKeysColumnNames;
    }
    
    public boolean getAutoGeneratedKeysResultsetMode() {
        return this.autoGeneratedKeysResultSetMode;
    }
    
    public int[] getAutoGeneratedKeysColumnIndexes() {
        return this.autoGeneratedKeysColumnIndexes;
    }
    
    public String[] getAutoGeneratedKeysColumnNames() {
        return this.autoGeneratedKeysColumnNames;
    }
    
    public final ResultSetFactory getResultSetFactory() {
        return this.getExecutionFactory().getResultSetFactory();
    }
    
    public final ExecutionFactory getExecutionFactory() {
        return this.getLanguageConnectionContext().getLanguageConnectionFactory().getExecutionFactory();
    }
    
    public CursorResultSet getTargetResultSet() {
        return null;
    }
    
    protected DataValueDescriptor getSetAutoincrementValue(final int n, final long n2) throws StandardException {
        return ((InsertResultSet)this.resultSet).getSetAutoincrementValue(n, n2);
    }
    
    protected NumberDataValue getCurrentValueAndAdvance(final String s, final int n) throws StandardException {
        final NumberDataValue numberDataValue = (NumberDataValue)this.getDataValueFactory().getNull(n, 0);
        this.lcc.getDataDictionary().getCurrentValueAndAdvance(s, numberDataValue);
        return numberDataValue;
    }
    
    public CursorResultSet getCursorResultSet() {
        return null;
    }
    
    public void throwIfClosed(final String s) throws StandardException {
        if (this.closed) {
            throw StandardException.newException("XCL05.S", s);
        }
    }
    
    public static void setColumnPosition(final int[] array, final int n, final int n2) {
        array[n] = n2;
    }
    
    public static void allocateQualArray(final Qualifier[][] array, final int n, final int n2) {
        array[n] = new Qualifier[n2];
    }
    
    public static void setQualifier(final Qualifier[][] array, final Qualifier qualifier, final int n, final int n2) {
        array[n][n2] = qualifier;
    }
    
    public static void reinitializeQualifiers(final Qualifier[][] array) {
        if (array != null) {
            for (int i = 0; i < array.length; ++i) {
                for (int j = 0; j < array[i].length; ++j) {
                    array[i][j].reinitialize();
                }
            }
        }
    }
    
    public final void markUnused() {
        if (this.isInUse()) {
            this.inUse = false;
            this.lcc.notifyUnusedActivation();
        }
    }
    
    public final boolean isInUse() {
        return this.inUse;
    }
    
    public void addWarning(final SQLWarning sqlWarning) {
        if (this.warnings == null) {
            this.warnings = sqlWarning;
        }
        else {
            this.warnings.setNextWarning(sqlWarning);
        }
    }
    
    public SQLWarning getWarnings() {
        return this.warnings;
    }
    
    public void clearWarnings() {
        this.warnings = null;
    }
    
    protected static void nullToPrimitiveTest(final DataValueDescriptor dataValueDescriptor, final String s) throws StandardException {
        if (dataValueDescriptor.isNull()) {
            throw StandardException.newException("39004", s);
        }
    }
    
    public void informOfRowCount(final NoPutResultSet set, final long n) throws StandardException {
        if (this.checkRowCounts) {
            boolean b = false;
            final int resultSetNumber = set.resultSetNumber();
            if (this.rowCountsCheckedThisExecution.add(ReuseFactory.getInteger(resultSetNumber))) {
                final long initialRowCount = this.getPreparedStatement().getInitialRowCount(resultSetNumber, n);
                if (n != initialRowCount) {
                    if (initialRowCount >= 400L) {
                        if (Math.abs(initialRowCount / (n - initialRowCount)) <= 10L) {
                            b = true;
                        }
                    }
                    else {
                        final long a = n - initialRowCount;
                        if (Math.abs(a) <= BaseActivation.MAX_SQRT && a * a > Math.abs(4L * initialRowCount)) {
                            b = true;
                        }
                    }
                }
            }
            if (b) {
                this.preStmt.makeInvalid(23, this.lcc);
            }
        }
    }
    
    public ConglomerateController getHeapConglomerateController() {
        return this.updateHeapCC;
    }
    
    public void setHeapConglomerateController(final ConglomerateController updateHeapCC) {
        this.updateHeapCC = updateHeapCC;
    }
    
    public void clearHeapConglomerateController() {
        this.updateHeapCC = null;
    }
    
    public ScanController getIndexScanController() {
        return this.indexSC;
    }
    
    public void setIndexScanController(final ScanController indexSC) {
        this.indexSC = indexSC;
    }
    
    public long getIndexConglomerateNumber() {
        return this.indexConglomerateNumber;
    }
    
    public void setIndexConglomerateNumber(final long indexConglomerateNumber) {
        this.indexConglomerateNumber = indexConglomerateNumber;
    }
    
    public void clearIndexScanInfo() {
        this.indexSC = null;
        this.indexConglomerateNumber = -1L;
    }
    
    public void setForCreateTable() {
        this.forCreateTable = true;
    }
    
    public boolean getForCreateTable() {
        return this.forCreateTable;
    }
    
    public void setDDLTableDescriptor(final TableDescriptor ddlTableDescriptor) {
        this.ddlTableDescriptor = ddlTableDescriptor;
    }
    
    public TableDescriptor getDDLTableDescriptor() {
        return this.ddlTableDescriptor;
    }
    
    public void setMaxRows(final long maxRows) {
        this.maxRows = maxRows;
    }
    
    public long getMaxRows() {
        return this.maxRows;
    }
    
    public void setTargetVTI(final java.sql.ResultSet targetVTI) {
        this.targetVTI = targetVTI;
    }
    
    public java.sql.ResultSet getTargetVTI() {
        return this.targetVTI;
    }
    
    protected boolean shouldWeCheckRowCounts() throws StandardException {
        final ExecPreparedStatement preparedStatement = this.getPreparedStatement();
        final int incrementExecutionCount = preparedStatement.incrementExecutionCount();
        if (incrementExecutionCount == 1) {
            return true;
        }
        if (incrementExecutionCount < 5) {
            return false;
        }
        int stalePlanCheckInterval = preparedStatement.getStalePlanCheckInterval();
        if (stalePlanCheckInterval == 0) {
            stalePlanCheckInterval = PropertyUtil.getServiceInt(this.getTransactionController(), "derby.language.stalePlanCheckInterval", 5, Integer.MAX_VALUE, 100);
            preparedStatement.setStalePlanCheckInterval(stalePlanCheckInterval);
        }
        return incrementExecutionCount % stalePlanCheckInterval == 1;
    }
    
    public final boolean getScrollable() {
        return this.scrollable;
    }
    
    protected final void setParameterValueSet(final int n, final boolean b) {
        this.pvs = this.lcc.getLanguageFactory().newParameterValueSet(this.lcc.getLanguageConnectionFactory().getClassFactory().getClassInspector(), n, b);
    }
    
    protected final DataValueDescriptor getParameter(final int n) throws StandardException {
        return this.pvs.getParameter(n);
    }
    
    public ParameterValueSet getParameterValueSet() {
        if (this.pvs == null) {
            this.setParameterValueSet(0, false);
        }
        return this.pvs;
    }
    
    public void setParameters(final ParameterValueSet pvs, final DataTypeDescriptor[] array) throws StandardException {
        if (!this.isClosed()) {
            if (this.pvs == null || array == null) {
                this.pvs = pvs;
                return;
            }
            final DataTypeDescriptor[] parameterTypes = this.preStmt.getParameterTypes();
            boolean b = false;
            if (parameterTypes != null && parameterTypes.length == array.length) {
                b = true;
                for (int i = 0; i < array.length; ++i) {
                    final DataTypeDescriptor dataTypeDescriptor = array[i];
                    final DataTypeDescriptor dataTypeDescriptor2 = parameterTypes[i];
                    if (!dataTypeDescriptor.isExactTypeAndLengthMatch(dataTypeDescriptor2)) {
                        b = false;
                        break;
                    }
                    if (dataTypeDescriptor.isNullable() != dataTypeDescriptor2.isNullable()) {
                        b = false;
                        break;
                    }
                }
            }
            if (!b) {
                throw StandardException.newException("XCL10.S");
            }
            pvs.transferDataValues(this.pvs);
        }
    }
    
    public void throwIfMissingParms() throws StandardException {
        if (this.pvs != null && !this.pvs.allAreSet()) {
            throw StandardException.newException("07000");
        }
    }
    
    public void setCurrentRow(final ExecRow execRow, final int n) {
        if (this.row != null) {
            this.row[n] = execRow;
        }
    }
    
    public void clearCurrentRow(final int n) {
        if (this.row != null) {
            this.row[n] = null;
        }
    }
    
    public Row getCurrentRow(final int n) {
        return this.row[n];
    }
    
    public SQLSessionContext getSQLSessionContextForChildren() {
        return this.sqlSessionContextForChildren;
    }
    
    public SQLSessionContext setupSQLSessionContextForChildren(final boolean b) {
        if (b) {
            this.sqlSessionContextForChildren = this.lcc.createSQLSessionContext();
        }
        else if (this.parentActivation != null) {
            this.sqlSessionContextForChildren = this.parentActivation.getSQLSessionContextForChildren();
        }
        else {
            this.sqlSessionContextForChildren = this.lcc.getTopLevelSQLSessionContext();
        }
        return this.sqlSessionContextForChildren;
    }
    
    public void setParentActivation(final Activation parentActivation) {
        this.parentActivation = parentActivation;
    }
    
    public Activation getParentActivation() {
        return this.parentActivation;
    }
    
    protected final DataValueDescriptor getColumnFromRow(final int n, final int n2) throws StandardException {
        if (this.row[n] == null) {
            return null;
        }
        return this.row[n].getColumn(n2);
    }
    
    protected void checkPositionedStatement(final String s, final String s2) throws StandardException {
        final ExecPreparedStatement preparedStatement = this.getPreparedStatement();
        if (preparedStatement == null) {
            return;
        }
        final LanguageConnectionContext languageConnectionContext = this.getLanguageConnectionContext();
        final CursorActivation lookupCursorActivation = languageConnectionContext.lookupCursorActivation(s);
        if (lookupCursorActivation != null && !s2.equals(lookupCursorActivation.getPreparedStatement().getObjectName())) {
            preparedStatement.makeInvalid(5, languageConnectionContext);
        }
    }
    
    public NoPutResultSet materializeResultSetIfPossible(final NoPutResultSet set) throws StandardException {
        set.openCore();
        final Vector vector = new Vector<ExecRow>();
        int n = 0;
        FormatableBitSet set2 = null;
        final int maxMemoryPerTable = this.getLanguageConnectionContext().getOptimizerFactory().getMaxMemoryPerTable();
        ExecRow execRow = set.getNextRowCore();
        if (execRow != null) {
            set2 = new FormatableBitSet(execRow.nColumns() + 1);
            set2.set(1);
        }
        while (execRow != null) {
            n += execRow.getColumn(1).getLength();
            if (n > maxMemoryPerTable) {
                break;
            }
            if (vector.size() > 512) {
                break;
            }
            vector.addElement(execRow.getClone(set2));
            execRow = set.getNextRowCore();
        }
        set.close();
        if (execRow != null) {
            return set;
        }
        final int resultSetNumber = set.resultSetNumber();
        final int size = vector.size();
        if (size == 0) {
            return new RowResultSet(this, (ExecRow)null, true, resultSetNumber, 0.0, 0.0);
        }
        final RowResultSet[] array = new RowResultSet[size];
        final UnionResultSet[] array2 = new UnionResultSet[size - 1];
        for (int i = 0; i < size; ++i) {
            array[i] = new RowResultSet(this, vector.elementAt(i), true, resultSetNumber, 1.0, 0.0);
            if (i > 0) {
                array2[i - 1] = new UnionResultSet((NoPutResultSet)((i > 1) ? array2[i - 2] : array[0]), array[i], this, resultSetNumber, i + 1, 0.0);
            }
        }
        set.finish();
        if (size == 1) {
            return array[0];
        }
        return array2[array2.length - 1];
    }
    
    public void setParentResultSet(final TemporaryRowHolder temporaryRowHolder, final String s) {
        if (this.parentResultSets == null) {
            this.parentResultSets = new Hashtable();
        }
        Vector<TemporaryRowHolder> value = this.parentResultSets.get(s);
        if (value == null) {
            value = new Vector<TemporaryRowHolder>();
            value.addElement(temporaryRowHolder);
        }
        else {
            value.addElement(temporaryRowHolder);
        }
        this.parentResultSets.put(s, value);
    }
    
    public Vector getParentResultSet(final String key) {
        return this.parentResultSets.get(key);
    }
    
    public Hashtable getParentResultSets() {
        return this.parentResultSets;
    }
    
    public void clearParentResultSets() {
        if (this.parentResultSets != null) {
            this.parentResultSets.clear();
        }
    }
    
    public void setForUpdateIndexScan(final CursorResultSet forUpdateIndexScan) {
        this.forUpdateIndexScan = forUpdateIndexScan;
    }
    
    public CursorResultSet getForUpdateIndexScan() {
        return this.forUpdateIndexScan;
    }
    
    protected Calendar getCalendar() {
        if (this.cal == null) {
            this.cal = new GregorianCalendar();
        }
        return this.cal;
    }
    
    public final LanguageConnectionContext getLanguageConnectionContext() {
        return this.lcc;
    }
    
    public final TransactionController getTransactionController() {
        return this.lcc.getTransactionExecute();
    }
    
    public ContextManager getContextManager() {
        return this.cm;
    }
    
    public DataValueFactory getDataValueFactory() {
        return this.getLanguageConnectionContext().getDataValueFactory();
    }
    
    public Connection getCurrentConnection() throws SQLException {
        return ((ConnectionContext)this.getContextManager().getContext("JDBC_ConnectionContext")).getNestedConnection(true);
    }
    
    public java.sql.ResultSet[][] getDynamicResults() {
        return null;
    }
    
    public int getMaxDynamicResults() {
        return 0;
    }
    
    public NumberDataValue getDB2Length(final DataValueDescriptor dataValueDescriptor, final int value, NumberDataValue nullInteger) throws StandardException {
        if (nullInteger == null) {
            nullInteger = this.getDataValueFactory().getNullInteger(null);
        }
        if (dataValueDescriptor.isNull()) {
            nullInteger.setToNull();
        }
        else if (value >= 0) {
            nullInteger.setValue(value);
        }
        else {
            nullInteger.setValue(dataValueDescriptor.getLength());
        }
        return nullInteger;
    }
    
    public DependableFinder getDependableFinder() {
        return null;
    }
    
    public String getObjectName() {
        return this.UUIDString;
    }
    
    public UUID getObjectID() {
        return this.UUIDValue;
    }
    
    public String getClassType() {
        return "Activation";
    }
    
    public boolean isPersistent() {
        return false;
    }
    
    public boolean isValid() {
        return this.isValid;
    }
    
    public void makeInvalid(final int n, final LanguageConnectionContext languageConnectionContext) throws StandardException {
        switch (n) {
            case 48: {
                this.isValid = false;
                languageConnectionContext.getDataDictionary().getDependencyManager().clearDependencies(languageConnectionContext, this);
            }
            case 47: {}
        }
    }
    
    public void prepareToInvalidate(final Provider provider, final int n, final LanguageConnectionContext languageConnectionContext) throws StandardException {
    }
    
    static {
        MAX_SQRT = (long)Math.sqrt(9.223372036854776E18);
    }
}
