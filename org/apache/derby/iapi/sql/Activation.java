// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.derby.iapi.sql;

import org.apache.derby.iapi.sql.conn.SQLSessionContext;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import java.util.Hashtable;
import java.util.Vector;
import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.ScanController;
import org.apache.derby.iapi.store.access.ConglomerateController;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.iapi.sql.execute.ExecutionFactory;
import org.apache.derby.iapi.types.DataValueFactory;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import java.sql.SQLWarning;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.depend.Dependent;

public interface Activation extends Dependent
{
    void reset() throws StandardException;
    
    void setCursorName(final String p0);
    
    boolean checkIfThisActivationHasHoldCursor(final String p0);
    
    ParameterValueSet getParameterValueSet();
    
    void setParameters(final ParameterValueSet p0, final DataTypeDescriptor[] p1) throws StandardException;
    
    ResultSet execute() throws StandardException;
    
    void close() throws StandardException;
    
    boolean isClosed();
    
    void setSingleExecution();
    
    boolean isSingleExecution();
    
    SQLWarning getWarnings();
    
    void addWarning(final SQLWarning p0);
    
    void clearWarnings();
    
    LanguageConnectionContext getLanguageConnectionContext();
    
    TransactionController getTransactionController();
    
    ResultSet getResultSet();
    
    void setCurrentRow(final ExecRow p0, final int p1);
    
    Row getCurrentRow(final int p0);
    
    void clearCurrentRow(final int p0);
    
    ExecPreparedStatement getPreparedStatement();
    
    void checkStatementValidity() throws StandardException;
    
    ResultDescription getResultDescription();
    
    DataValueFactory getDataValueFactory();
    
    ExecutionFactory getExecutionFactory();
    
    RowLocation getRowLocationTemplate(final int p0);
    
    int getNumSubqueries();
    
    String getCursorName();
    
    boolean getResultSetHoldability();
    
    void setResultSetHoldability(final boolean p0);
    
    void setAutoGeneratedKeysResultsetInfo(final int[] p0, final String[] p1);
    
    boolean getAutoGeneratedKeysResultsetMode();
    
    int[] getAutoGeneratedKeysColumnIndexes();
    
    String[] getAutoGeneratedKeysColumnNames();
    
    void markUnused();
    
    boolean isInUse();
    
    void informOfRowCount(final NoPutResultSet p0, final long p1) throws StandardException;
    
    ConglomerateController getHeapConglomerateController();
    
    void setHeapConglomerateController(final ConglomerateController p0);
    
    void clearHeapConglomerateController();
    
    ScanController getIndexScanController();
    
    void setIndexScanController(final ScanController p0);
    
    long getIndexConglomerateNumber();
    
    void setIndexConglomerateNumber(final long p0);
    
    void clearIndexScanInfo();
    
    void setForCreateTable();
    
    boolean getForCreateTable();
    
    void setDDLTableDescriptor(final TableDescriptor p0);
    
    TableDescriptor getDDLTableDescriptor();
    
    void setMaxRows(final long p0);
    
    long getMaxRows();
    
    boolean isCursorActivation();
    
    void setTargetVTI(final java.sql.ResultSet p0);
    
    java.sql.ResultSet getTargetVTI();
    
    ConstantAction getConstantAction();
    
    void setParentResultSet(final TemporaryRowHolder p0, final String p1);
    
    Vector getParentResultSet(final String p0);
    
    void clearParentResultSets();
    
    Hashtable getParentResultSets();
    
    void setForUpdateIndexScan(final CursorResultSet p0);
    
    CursorResultSet getForUpdateIndexScan();
    
    java.sql.ResultSet[][] getDynamicResults();
    
    int getMaxDynamicResults();
    
    SQLSessionContext getSQLSessionContextForChildren();
    
    SQLSessionContext setupSQLSessionContextForChildren(final boolean p0);
    
    void setParentActivation(final Activation p0);
    
    Activation getParentActivation();
}
