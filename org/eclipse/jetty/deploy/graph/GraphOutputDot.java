// 
// Decompiled by Procyon v0.5.36
// 

package org.eclipse.jetty.deploy.graph;

import java.text.CollationKey;
import java.text.Collator;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import org.eclipse.jetty.util.IO;
import java.util.Collection;
import java.util.Comparator;
import java.util.TreeSet;
import java.io.Writer;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.File;

public class GraphOutputDot
{
    private static final String TOPNODE = "undeployed";
    
    private GraphOutputDot() {
    }
    
    public static void write(final Graph graph, final File outputFile) throws IOException {
        FileWriter writer = null;
        PrintWriter out = null;
        try {
            writer = new FileWriter(outputFile);
            out = new PrintWriter(writer);
            out.println("// Autogenerated by " + GraphOutputDot.class.getName());
            out.println("digraph Graf {");
            writeGraphDefaults(out);
            writeNodeDefaults(out);
            writeEdgeDefaults(out);
            final Set<Node> nodes = new TreeSet<Node>(new TopNodeSort());
            nodes.addAll(graph.getNodes());
            for (final Node node : nodes) {
                writeNode(out, node);
            }
            for (final Edge edge : graph.getEdges()) {
                writeEdge(out, edge);
            }
            out.println("}");
        }
        finally {
            IO.close(out);
            IO.close(writer);
        }
    }
    
    private static void writeEdge(final PrintWriter out, final Edge edge) {
        out.println();
        out.println("  // Edge");
        out.printf("  \"%s\" -> \"%s\" [%n", toId(edge.getFrom()), toId(edge.getTo()));
        out.println("    arrowtail=none,");
        out.println("    arrowhead=normal");
        out.println("  ];");
    }
    
    private static void writeNode(final PrintWriter out, final Node node) {
        out.println();
        out.println("  // Node");
        out.printf("  \"%s\" [%n", toId(node));
        out.printf("    label=\"%s\",%n", node.getName());
        if (node.getName().endsWith("ed")) {
            out.println("    color=\"#ddddff\",");
            out.println("    style=filled,");
        }
        out.println("    shape=box");
        out.println("  ];");
    }
    
    private static CharSequence toId(final Node node) {
        final StringBuilder buf = new StringBuilder();
        for (final char c : node.getName().toCharArray()) {
            if (Character.isLetter(c)) {
                buf.append(c);
            }
            else if (Character.isDigit(c)) {
                buf.append(c);
            }
            else if (c == ' ' || c == '-' || c == '_') {
                buf.append(c);
            }
        }
        return buf;
    }
    
    private static void writeEdgeDefaults(final PrintWriter out) {
        out.println();
        out.println("  // Edge Defaults ");
        out.println("  edge [");
        out.println("    arrowsize=\"0.8\",");
        out.println("    fontsize=\"11\"");
        out.println("  ];");
    }
    
    private static void writeGraphDefaults(final PrintWriter out) {
        out.println();
        out.println("  // Graph Defaults ");
        out.println("  graph [");
        out.println("    bgcolor=\"#ffffff\",");
        out.println("    fontname=\"Helvetica\",");
        out.println("    fontsize=\"11\",");
        out.println("    label=\"Graph\",");
        out.println("    labeljust=\"l\",");
        out.println("    rankdir=\"TD\"");
        out.println("  ];");
    }
    
    private static void writeNodeDefaults(final PrintWriter out) {
        out.println();
        out.println("  // Node Defaults ");
        out.println("  node [");
        out.println("    fontname=\"Helvetica\",");
        out.println("    fontsize=\"11\",");
        out.println("    shap=\"box\"");
        out.println("  ];");
    }
    
    private static class TopNodeSort implements Comparator<Node>
    {
        private Collator collator;
        
        private TopNodeSort() {
            this.collator = Collator.getInstance();
        }
        
        public int compare(final Node o1, final Node o2) {
            if (o1.getName().equals("undeployed")) {
                return -1;
            }
            if (o2.getName().equals("undeployed")) {
                return 1;
            }
            final CollationKey key1 = this.toKey(o1);
            final CollationKey key2 = this.toKey(o2);
            return key1.compareTo(key2);
        }
        
        private CollationKey toKey(final Node node) {
            return this.collator.getCollationKey(node.getName());
        }
    }
}
